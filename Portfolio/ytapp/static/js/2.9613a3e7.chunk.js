(this["webpackJsonpno-frills-youtube"]=this["webpackJsonpno-frills-youtube"]||[]).push([[2],[function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(11);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDekNDLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsbUJBQU8sQ0FBQyxFQUFELENBQXhCO0FBQ0QsQ0FGRCxNQUVPIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(18);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUosRUFBMkM7QUFDekNDLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsbUJBQU8sQ0FBQyxFQUFELENBQXhCO0FBQ0QsQ0FGRCxNQUVPIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return $mobx; });\n/* unused harmony export FlowCancellationError */\n/* unused harmony export ObservableMap */\n/* unused harmony export ObservableSet */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Reaction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return allowStateChanges; });\n/* unused harmony export _allowStateChangesInsideComputed */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return allowStateReadsEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return allowStateReadsStart; });\n/* unused harmony export _autoAction */\n/* unused harmony export _endAction */\n/* unused harmony export _getAdministration */\n/* unused harmony export _getGlobalState */\n/* unused harmony export _interceptReads */\n/* unused harmony export _isComputingDerivation */\n/* unused harmony export _resetGlobalState */\n/* unused harmony export _startAction */\n/* unused harmony export action */\n/* unused harmony export autorun */\n/* unused harmony export comparer */\n/* unused harmony export computed */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return configure; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return createAtom; });\n/* unused harmony export entries */\n/* unused harmony export extendObservable */\n/* unused harmony export flow */\n/* unused harmony export flowResult */\n/* unused harmony export get */\n/* unused harmony export getAtom */\n/* unused harmony export getDebugName */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getDependencyTree; });\n/* unused harmony export getObserverTree */\n/* unused harmony export has */\n/* unused harmony export intercept */\n/* unused harmony export isAction */\n/* unused harmony export isBoxedObservable */\n/* unused harmony export isComputed */\n/* unused harmony export isComputedProp */\n/* unused harmony export isFlowCancellationError */\n/* unused harmony export isObservable */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return isObservableArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return isObservableMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return isObservableObject; });\n/* unused harmony export isObservableProp */\n/* unused harmony export isObservableSet */\n/* unused harmony export keys */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return makeAutoObservable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return makeObservable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return observable; });\n/* unused harmony export observe */\n/* unused harmony export onBecomeObserved */\n/* unused harmony export onBecomeUnobserved */\n/* unused harmony export onReactionError */\n/* unused harmony export override */\n/* unused harmony export reaction */\n/* unused harmony export remove */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return runInAction; });\n/* unused harmony export set */\n/* unused harmony export spy */\n/* unused harmony export toJS */\n/* unused harmony export trace */\n/* unused harmony export transaction */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return untracked; });\n/* unused harmony export values */\n/* unused harmony export when */\nvar niceErrors = {\n  0: "Invalid value for configuration \'enforceActions\', expected \'never\', \'always\' or \'observed\'",\n  1: function _(annotationType, key) {\n    return "Cannot apply \'" + annotationType + "\' to \'" + key.toString() + "\': Field not found.";\n  },\n  5: "\'keys()\' can only be used on observable objects, arrays, sets and maps",\n  6: "\'values()\' can only be used on observable objects, arrays, sets and maps",\n  7: "\'entries()\' can only be used on observable objects, arrays and maps",\n  8: "\'set()\' can only be used on observable objects, arrays and maps",\n  9: "\'remove()\' can only be used on observable objects, arrays and maps",\n  10: "\'has()\' can only be used on observable objects, arrays and maps",\n  11: "\'get()\' can only be used on observable objects, arrays and maps",\n  12: "Invalid annotation",\n  13: "Dynamic observable objects cannot be frozen",\n  14: "Intercept handlers should return nothing or a change object",\n  15: "Observable arrays cannot be frozen",\n  16: "Modification exception: the internal structure of an observable array was changed.",\n  17: function _(index, length) {\n    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;\n  },\n  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",\n  19: function _(other) {\n    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;\n  },\n  20: function _(other) {\n    return "Cannot initialize map from " + other;\n  },\n  21: function _(dataStructure) {\n    return "Cannot convert to map from \'" + dataStructure + "\'";\n  },\n  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",\n  23: "It is not possible to get index atoms from arrays",\n  24: function _(thing) {\n    return "Cannot obtain administration from " + thing;\n  },\n  25: function _(property, name) {\n    return "the entry \'" + property + "\' does not exist in the observable map \'" + name + "\'";\n  },\n  26: "please specify a property",\n  27: function _(property, name) {\n    return "no observable property \'" + property.toString() + "\' found on the observable object \'" + name + "\'";\n  },\n  28: function _(thing) {\n    return "Cannot obtain atom from " + thing;\n  },\n  29: "Expecting some object",\n  30: "invalid action stack. did you forget to finish an action?",\n  31: "missing option for computed: get",\n  32: function _(name, derivation) {\n    return "Cycle detected in computation " + name + ": " + derivation;\n  },\n  33: function _(name) {\n    return "The setter of computed value \'" + name + "\' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";\n  },\n  34: function _(name) {\n    return "[ComputedValue \'" + name + "\'] It is not possible to assign a new value to a computed value.";\n  },\n  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",\n  36: "isolateGlobalState should be called before MobX is running any reactions",\n  37: function _(method) {\n    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";\n  }\n};\nvar errors =  false ? undefined : {};\n\nfunction die(error) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (false) { var e; }\n\n  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);\n}\n\nvar mockGlobal = {};\n\nfunction getGlobal() {\n  if (typeof globalThis !== "undefined") {\n    return globalThis;\n  }\n\n  if (typeof window !== "undefined") {\n    return window;\n  }\n\n  if (typeof global !== "undefined") {\n    return global;\n  }\n\n  if (typeof self !== "undefined") {\n    return self;\n  }\n\n  return mockGlobal;\n}\n\nvar assign = Object.assign;\nvar getDescriptor = Object.getOwnPropertyDescriptor;\nvar defineProperty = Object.defineProperty;\nvar objectPrototype = Object.prototype;\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nvar EMPTY_OBJECT = {};\nObject.freeze(EMPTY_OBJECT);\nvar hasProxy = typeof Proxy !== "undefined";\nvar plainObjectString = /*#__PURE__*/Object.toString();\n\nfunction assertProxies() {\n  if (!hasProxy) {\n    die( false ? undefined : "Proxy not available");\n  }\n}\n\nfunction warnAboutProxyRequirement(msg) {\n  if (false) {}\n}\n\nfunction getNextId() {\n  return ++globalState.mobxGuid;\n}\n/**\r\n * Makes sure that the provided function is invoked at most once.\r\n */\n\n\nfunction once(func) {\n  var invoked = false;\n  return function () {\n    if (invoked) return;\n    invoked = true;\n    return func.apply(this, arguments);\n  };\n}\n\nvar noop = function noop() {};\n\nfunction isFunction(fn) {\n  return typeof fn === "function";\n}\n\nfunction isStringish(value) {\n  var t = typeof value;\n\n  switch (t) {\n    case "string":\n    case "symbol":\n    case "number":\n      return true;\n  }\n\n  return false;\n}\n\nfunction isObject(value) {\n  return value !== null && typeof value === "object";\n}\n\nfunction isPlainObject(value) {\n  var _proto$constructor;\n\n  if (!isObject(value)) return false;\n  var proto = Object.getPrototypeOf(value);\n  if (proto == null) return true;\n  return ((_proto$constructor = proto.constructor) == null ? void 0 : _proto$constructor.toString()) === plainObjectString;\n} // https://stackoverflow.com/a/37865170\n\n\nfunction isGenerator(obj) {\n  var constructor = obj == null ? void 0 : obj.constructor;\n  if (!constructor) return false;\n  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) return true;\n  return false;\n}\n\nfunction addHiddenProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\nfunction addHiddenFinalProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: false,\n    configurable: true,\n    value: value\n  });\n}\n\nfunction createInstanceofPredicate(name, theClass) {\n  var propName = "isMobX" + name;\n  theClass.prototype[propName] = true;\n  return function (x) {\n    return isObject(x) && x[propName] === true;\n  };\n}\n\nfunction isES6Map(thing) {\n  return thing instanceof Map;\n}\n\nfunction isES6Set(thing) {\n  return thing instanceof Set;\n}\n\nvar hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";\n/**\r\n * Returns the following: own enumerable keys and symbols.\r\n */\n\nfunction getPlainObjectKeys(object) {\n  var keys = Object.keys(object); // Not supported in IE, so there are not going to be symbol props anyway...\n\n  if (!hasGetOwnPropertySymbols) return keys;\n  var symbols = Object.getOwnPropertySymbols(object);\n  if (!symbols.length) return keys;\n  return [].concat(keys, symbols.filter(function (s) {\n    return objectPrototype.propertyIsEnumerable.call(object, s);\n  }));\n} // From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\n\n\nvar ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} :\n/* istanbul ignore next */\nObject.getOwnPropertyNames;\n\nfunction stringifyKey(key) {\n  if (typeof key === "string") return key;\n  if (typeof key === "symbol") return key.toString();\n  return new String(key).toString();\n}\n\nfunction toPrimitive(value) {\n  return value === null ? null : typeof value === "object" ? "" + value : value;\n}\n\nfunction hasProp(target, prop) {\n  return objectPrototype.hasOwnProperty.call(target, prop);\n} // From Immer utils\n\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n  var res = {}; // Note: without polyfill for ownKeys, symbols won\'t be picked up\n\n  ownKeys(target).forEach(function (key) {\n    res[key] = getDescriptor(target, key);\n  });\n  return res;\n};\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nvar storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");\n/**\r\n * Creates a function that acts as\r\n * - decorator\r\n * - annotation object\r\n */\n\nfunction createDecoratorAnnotation(annotation) {\n  function decorator(target, property) {\n    storeAnnotation(target, property, annotation);\n  }\n\n  return Object.assign(decorator, annotation);\n}\n/**\r\n * Stores annotation to prototype,\r\n * so it can be inspected later by `makeObservable` called from constructor\r\n */\n\n\nfunction storeAnnotation(prototype, key, annotation) {\n  if (!hasProp(prototype, storedAnnotationsSymbol)) {\n    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));\n  } // @override must override something\n\n\n  if (false) { var fieldName; } // Cannot re-decorate\n\n\n  assertNotDecorated(prototype, annotation, key); // Ignore override\n\n  if (!isOverride(annotation)) {\n    prototype[storedAnnotationsSymbol][key] = annotation;\n  }\n}\n\nfunction assertNotDecorated(prototype, annotation, key) {\n  if (false) { var requestedAnnotationType, currentAnnotationType, fieldName; }\n}\n/**\r\n * Collects annotations from prototypes and stores them on target (instance)\r\n */\n\n\nfunction collectStoredAnnotations(target) {\n  if (!hasProp(target, storedAnnotationsSymbol)) {\n    if (false) {} // We need a copy as we will remove annotation from the list once it\'s applied.\n\n\n    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));\n  }\n\n  return target[storedAnnotationsSymbol];\n}\n\nvar $mobx = /*#__PURE__*/Symbol("mobx administration");\n\nvar Atom = /*#__PURE__*/function () {\n  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it\'s not needed\n\n  /**\r\n   * Create a new atom. For debugging purposes it is recommended to give it a name.\r\n   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\r\n   */\n  function Atom(name_) {\n    if (name_ === void 0) {\n      name_ =  false ? undefined : "Atom";\n    }\n\n    this.name_ = void 0;\n    this.isPendingUnobservation_ = false;\n    this.isBeingObserved_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    this.name_ = name_;\n  } // onBecomeObservedListeners\n\n\n  var _proto = Atom.prototype;\n\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\r\n   * Invoke this method to notify mobx that your atom has been used somehow.\r\n   * Returns true if there is currently a reactive context.\r\n   */\n  ;\n\n  _proto.reportObserved = function reportObserved$1() {\n    return reportObserved(this);\n  }\n  /**\r\n   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\r\n   */\n  ;\n\n  _proto.reportChanged = function reportChanged() {\n    startBatch();\n    propagateChanged(this);\n    endBatch();\n  };\n\n  _proto.toString = function toString() {\n    return this.name_;\n  };\n\n  return Atom;\n}();\n\nvar isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);\n\nfunction createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n  if (onBecomeObservedHandler === void 0) {\n    onBecomeObservedHandler = noop;\n  }\n\n  if (onBecomeUnobservedHandler === void 0) {\n    onBecomeUnobservedHandler = noop;\n  }\n\n  var atom = new Atom(name); // default `noop` listener will not initialize the hook Set\n\n  if (onBecomeObservedHandler !== noop) {\n    onBecomeObserved(atom, onBecomeObservedHandler);\n  }\n\n  if (onBecomeUnobservedHandler !== noop) {\n    onBecomeUnobserved(atom, onBecomeUnobservedHandler);\n  }\n\n  return atom;\n}\n\nfunction identityComparer(a, b) {\n  return a === b;\n}\n\nfunction structuralComparer(a, b) {\n  return deepEqual(a, b);\n}\n\nfunction shallowComparer(a, b) {\n  return deepEqual(a, b, 1);\n}\n\nfunction defaultComparer(a, b) {\n  return Object.is(a, b);\n}\n\nvar comparer = {\n  identity: identityComparer,\n  structural: structuralComparer,\n  "default": defaultComparer,\n  shallow: shallowComparer\n};\n\nfunction deepEnhancer(v, _, name) {\n  // it is an observable already, done\n  if (isObservable(v)) return v; // something that can be converted and mutated?\n\n  if (Array.isArray(v)) return observable.array(v, {\n    name: name\n  });\n  if (isPlainObject(v)) return observable.object(v, undefined, {\n    name: name\n  });\n  if (isES6Map(v)) return observable.map(v, {\n    name: name\n  });\n  if (isES6Set(v)) return observable.set(v, {\n    name: name\n  });\n  return v;\n}\n\nfunction shallowEnhancer(v, _, name) {\n  if (v === undefined || v === null) return v;\n  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) return v;\n  if (Array.isArray(v)) return observable.array(v, {\n    name: name,\n    deep: false\n  });\n  if (isPlainObject(v)) return observable.object(v, undefined, {\n    name: name,\n    deep: false\n  });\n  if (isES6Map(v)) return observable.map(v, {\n    name: name,\n    deep: false\n  });\n  if (isES6Set(v)) return observable.set(v, {\n    name: name,\n    deep: false\n  });\n  if (false) {}\n}\n\nfunction referenceEnhancer(newValue) {\n  // never turn into an observable\n  return newValue;\n}\n\nfunction refStructEnhancer(v, oldValue) {\n  if (false) {}\n  if (deepEqual(v, oldValue)) return oldValue;\n  return v;\n}\n\nvar OVERRIDE = "override";\nvar override = /*#__PURE__*/createDecoratorAnnotation({\n  annotationType_: OVERRIDE,\n  make_: make_,\n  extend_: extend_\n});\n\nfunction isOverride(annotation) {\n  return annotation.annotationType_ === OVERRIDE;\n}\n\nfunction make_(adm, key) {\n  // Must not be plain object\n  if (false) {} // Must override something\n\n\n  if (false) {}\n}\n\nfunction extend_(adm, key, descriptor, proxyTrap) {\n  die("\'" + this.annotationType_ + "\' can only be used with \'makeObservable\'");\n}\n\nfunction createActionAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$1,\n    extend_: extend_$1\n  };\n}\n\nfunction make_$1(adm, key) {\n  var _this$options_$bound, _this$options_, _adm$target_$storedAn;\n\n  var annotated = false;\n  var source = adm.target_;\n  var bound = (_this$options_$bound = (_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) != null ? _this$options_$bound : false;\n\n  while (source && source !== objectPrototype) {\n    var descriptor = getDescriptor(source, key);\n\n    if (descriptor) {\n      // Instance or bound\n      // Keep first because the operation can be intercepted\n      // and we don\'t want to end up with partially annotated proto chain\n      if (source === adm.target_ || bound) {\n        var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);\n        var definePropertyOutcome = adm.defineProperty_(key, actionDescriptor);\n\n        if (!definePropertyOutcome) {\n          // Intercepted\n          return;\n        }\n\n        annotated = true; // Don\'t annotate protos if bound\n\n        if (bound) {\n          break;\n        }\n      } // Prototype\n\n\n      if (source !== adm.target_) {\n        if (isAction(descriptor.value)) {\n          // A prototype could have been annotated already by other constructor,\n          // rest of the proto chain must be annotated already\n          annotated = true;\n          break;\n        }\n\n        var _actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);\n\n        defineProperty(source, key, _actionDescriptor);\n        annotated = true;\n      }\n    }\n\n    source = Object.getPrototypeOf(source);\n  }\n\n  if (annotated) {\n    recordAnnotationApplied(adm, this, key);\n  } else if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {\n    // Throw on missing key, except for decorators:\n    // Decorator annotations are collected from whole prototype chain.\n    // When called from super() some props may not exist yet.\n    // However we don\'t have to worry about missing prop,\n    // because the decorator must have been applied to something.\n    die(1, this.annotationType_, adm.name_ + "." + key.toString());\n  }\n}\n\nfunction extend_$1(adm, key, descriptor, proxyTrap) {\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);\n  return adm.defineProperty_(key, actionDescriptor, proxyTrap);\n}\n\nfunction assertActionDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n\n  if (false) {}\n}\n\nfunction createActionDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3;\n\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n\n  assertActionDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n\n  if ((_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.bound) {\n    var _adm$proxy_;\n\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n\n  return {\n    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\n\nfunction createFlowAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$2,\n    extend_: extend_$2\n  };\n}\n\nfunction make_$2(adm, key) {\n  var _adm$target_$storedAn;\n\n  var annotated = false;\n  var source = adm.target_;\n\n  while (source && source !== objectPrototype) {\n    var descriptor = getDescriptor(source, key);\n\n    if (descriptor) {\n      if (source !== adm.target_) {\n        // Prototype\n        if (isFlow(descriptor.value)) {\n          // A prototype could have been annotated already by other constructor,\n          // rest of the proto chain must be annotated already\n          annotated = true;\n          break;\n        }\n\n        var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false);\n        defineProperty(source, key, flowDescriptor);\n      } else {\n        var _flowDescriptor = createFlowDescriptor(adm, this, key, descriptor);\n\n        var definePropertyOutcome = adm.defineProperty_(key, _flowDescriptor);\n\n        if (!definePropertyOutcome) {\n          // Intercepted\n          return;\n        }\n      }\n\n      annotated = true;\n    }\n\n    source = Object.getPrototypeOf(source);\n  }\n\n  if (annotated) {\n    recordAnnotationApplied(adm, this, key);\n  } else if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {\n    // Throw on missing key, except for decorators:\n    // Decorator annotations are collected from whole prototype chain.\n    // When called from super() some props may not exist yet.\n    // However we don\'t have to worry about missing prop,\n    // because the decorator must have been applied to something.\n    die(1, this.annotationType_, adm.name_ + "." + key.toString());\n  }\n}\n\nfunction extend_$2(adm, key, descriptor, proxyTrap) {\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor);\n  return adm.defineProperty_(key, flowDescriptor, proxyTrap);\n}\n\nfunction assertFlowDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n\n  if (false) {}\n}\n\nfunction createFlowDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n\n  assertFlowDescriptor(adm, annotation, key, descriptor);\n  return {\n    value: flow(descriptor.value),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\n\nfunction createComputedAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$3,\n    extend_: extend_$3\n  };\n}\n\nfunction make_$3(adm, key) {\n  var _adm$target_$storedAn;\n\n  var source = adm.target_;\n\n  while (source && source !== objectPrototype) {\n    var descriptor = getDescriptor(source, key);\n\n    if (descriptor) {\n      assertComputedDescriptor(adm, this, key, descriptor);\n      var definePropertyOutcome = adm.defineComputedProperty_(key, _extends({}, this.options_, {\n        get: descriptor.get,\n        set: descriptor.set\n      }));\n\n      if (!definePropertyOutcome) {\n        // Intercepted\n        return;\n      }\n\n      recordAnnotationApplied(adm, this, key);\n      return;\n    }\n\n    source = Object.getPrototypeOf(source);\n  }\n\n  if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {\n    // Throw on missing key, except for decorators:\n    // Decorator annotations are collected from whole prototype chain.\n    // When called from super() some props may not exist yet.\n    // However we don\'t have to worry about missing prop,\n    // because the decorator must have been applied to something.\n    die(1, this.annotationType_, adm.name_ + "." + key.toString());\n  }\n}\n\nfunction extend_$3(adm, key, descriptor, proxyTrap) {\n  assertComputedDescriptor(adm, this, key, descriptor);\n  return adm.defineComputedProperty_(key, _extends({}, this.options_, {\n    get: descriptor.get,\n    set: descriptor.set\n  }), proxyTrap);\n}\n\nfunction assertComputedDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var get = _ref2.get;\n\n  if (false) {}\n}\n\nfunction createObservableAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$4,\n    extend_: extend_$4\n  };\n}\n\nfunction make_$4(adm, key) {\n  var _adm$target_$storedAn;\n\n  var source = adm.target_; // Copy props from proto as well, see test:\n  // "decorate should work with Object.create"\n\n  while (source && source !== objectPrototype) {\n    var descriptor = getDescriptor(source, key);\n\n    if (descriptor) {\n      var _this$options_$enhanc, _this$options_;\n\n      assertObservableDescriptor(adm, this, key, descriptor);\n      var definePropertyOutcome = adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer);\n\n      if (!definePropertyOutcome) {\n        // Intercepted\n        return;\n      }\n\n      recordAnnotationApplied(adm, this, key);\n      return;\n    }\n\n    source = Object.getPrototypeOf(source);\n  }\n\n  if (!((_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? void 0 : _adm$target_$storedAn[key])) {\n    // Throw on missing key, except for decorators:\n    // Decorator annotations are collected from whole prototype chain.\n    // When called from super() some props may not exist yet.\n    // However we don\'t have to worry about missing prop,\n    // because the decorator must have been applied to something.\n    die(1, this.annotationType_, adm.name_ + "." + key.toString());\n  }\n}\n\nfunction extend_$4(adm, key, descriptor, proxyTrap) {\n  var _this$options_$enhanc2, _this$options_2;\n\n  assertObservableDescriptor(adm, this, key, descriptor);\n  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc2 = (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.enhancer) != null ? _this$options_$enhanc2 : deepEnhancer, proxyTrap);\n}\n\nfunction assertObservableDescriptor(adm, _ref, key, descriptor) {\n  var annotationType_ = _ref.annotationType_;\n\n  if (false) {}\n} // in the majority of cases\n\n\nvar defaultCreateObservableOptions = {\n  deep: true,\n  name: undefined,\n  defaultDecorator: undefined,\n  proxy: true\n};\nObject.freeze(defaultCreateObservableOptions);\n\nfunction asCreateObservableOptions(thing) {\n  return thing || defaultCreateObservableOptions;\n}\n\nvar observableAnnotation = /*#__PURE__*/createObservableAnnotation("observable");\nvar observableRefAnnotation = /*#__PURE__*/createObservableAnnotation("observable.ref", {\n  enhancer: referenceEnhancer\n});\nvar observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation("observable.shallow", {\n  enhancer: shallowEnhancer\n});\nvar observableStructAnnotation = /*#__PURE__*/createObservableAnnotation("observable.struct", {\n  enhancer: refStructEnhancer\n});\nvar observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);\n\nfunction getEnhancerFromOptions(options) {\n  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);\n}\n\nfunction getAnnotationFromOptions(options) {\n  return options ? options.deep === true ? observableAnnotation : options.deep === false ? observableRefAnnotation : options.defaultDecorator : undefined;\n}\n\nfunction getEnhancerFromAnnotation(annotation) {\n  var _annotation$options_$, _annotation$options_;\n\n  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;\n}\n/**\r\n * Turns an object, array or function into a reactive structure.\r\n * @param v the value which should become observable.\r\n */\n\n\nfunction createObservable(v, arg2, arg3) {\n  // @observable someProp;\n  if (isStringish(arg2)) {\n    storeAnnotation(v, arg2, observableAnnotation);\n    return;\n  } // already observable - ignore\n\n\n  if (isObservable(v)) return v; // plain object\n\n  if (isPlainObject(v)) return observable.object(v, arg2, arg3); // Array\n\n  if (Array.isArray(v)) return observable.array(v, arg2); // Map\n\n  if (isES6Map(v)) return observable.map(v, arg2); // Set\n\n  if (isES6Set(v)) return observable.set(v, arg2); // other object - ignore\n\n  if (typeof v === "object" && v !== null) return v; // anything else\n\n  return observable.box(v, arg2);\n}\n\nObject.assign(createObservable, observableDecoratorAnnotation);\nvar observableFactories = {\n  box: function box(value, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);\n  },\n  array: function array(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  map: function map(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  set: function set(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  object: function object(props, decorators, options) {\n    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);\n  },\n  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),\n  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),\n  deep: observableDecoratorAnnotation,\n  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)\n}; // eslint-disable-next-line\n\nvar observable = /*#__PURE__*/assign(createObservable, observableFactories);\nvar COMPUTED = "computed";\nvar COMPUTED_STRUCT = "computed.struct";\nvar computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);\nvar computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {\n  equals: comparer.structural\n});\n/**\r\n * Decorator for class properties: @computed get value() { return expr; }.\r\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\r\n */\n\nvar computed = function computed(arg1, arg2) {\n  if (isStringish(arg2)) {\n    // @computed\n    return storeAnnotation(arg1, arg2, computedAnnotation);\n  }\n\n  if (isPlainObject(arg1)) {\n    // @computed({ options })\n    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));\n  } // computed(expr, options?)\n\n\n  if (false) {}\n\n  var opts = isPlainObject(arg2) ? arg2 : {};\n  opts.get = arg1;\n  opts.name || (opts.name = arg1.name || "");\n  /* for generated name */\n\n  return new ComputedValue(opts);\n};\n\nObject.assign(computed, computedAnnotation);\ncomputed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);\n\nvar _getDescriptor$config, _getDescriptor; // mobx versions\n\n\nvar currentActionId = 0;\nvar nextActionId = 1;\nvar isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false; // we can safely recycle this object\n\nvar tmpNameDescriptor = {\n  value: "action",\n  configurable: true,\n  writable: false,\n  enumerable: false\n};\n\nfunction createAction(actionName, fn, autoAction, ref) {\n  if (autoAction === void 0) {\n    autoAction = false;\n  }\n\n  if (false) {}\n\n  function res() {\n    return executeAction(actionName, autoAction, fn, ref || this, arguments);\n  }\n\n  res.isMobxAction = true;\n\n  if (isFunctionNameConfigurable) {\n    tmpNameDescriptor.value = actionName;\n    Object.defineProperty(res, "name", tmpNameDescriptor);\n  }\n\n  return res;\n}\n\nfunction executeAction(actionName, canRunAsDerivation, fn, scope, args) {\n  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);\n\n  try {\n    return fn.apply(scope, args);\n  } catch (err) {\n    runInfo.error_ = err;\n    throw err;\n  } finally {\n    _endAction(runInfo);\n  }\n}\n\nfunction _startAction(actionName, canRunAsDerivation, // true for autoAction\nscope, args) {\n  var notifySpy_ =  false && false;\n  var startTime_ = 0;\n\n  if (false) { var flattenedArgs; }\n\n  var prevDerivation_ = globalState.trackingDerivation;\n  var runAsAction = !canRunAsDerivation || !prevDerivation_;\n  startBatch();\n  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow\n\n  if (runAsAction) {\n    untrackedStart();\n    prevAllowStateChanges_ = allowStateChangesStart(true);\n  }\n\n  var prevAllowStateReads_ = allowStateReadsStart(true);\n  var runInfo = {\n    runAsAction_: runAsAction,\n    prevDerivation_: prevDerivation_,\n    prevAllowStateChanges_: prevAllowStateChanges_,\n    prevAllowStateReads_: prevAllowStateReads_,\n    notifySpy_: notifySpy_,\n    startTime_: startTime_,\n    actionId_: nextActionId++,\n    parentActionId_: currentActionId\n  };\n  currentActionId = runInfo.actionId_;\n  return runInfo;\n}\n\nfunction _endAction(runInfo) {\n  if (currentActionId !== runInfo.actionId_) {\n    die(30);\n  }\n\n  currentActionId = runInfo.parentActionId_;\n\n  if (runInfo.error_ !== undefined) {\n    globalState.suppressReactionErrors = true;\n  }\n\n  allowStateChangesEnd(runInfo.prevAllowStateChanges_);\n  allowStateReadsEnd(runInfo.prevAllowStateReads_);\n  endBatch();\n  if (runInfo.runAsAction_) untrackedEnd(runInfo.prevDerivation_);\n\n  if (false) {}\n\n  globalState.suppressReactionErrors = false;\n}\n\nfunction allowStateChanges(allowStateChanges, func) {\n  var prev = allowStateChangesStart(allowStateChanges);\n\n  try {\n    return func();\n  } finally {\n    allowStateChangesEnd(prev);\n  }\n}\n\nfunction allowStateChangesStart(allowStateChanges) {\n  var prev = globalState.allowStateChanges;\n  globalState.allowStateChanges = allowStateChanges;\n  return prev;\n}\n\nfunction allowStateChangesEnd(prev) {\n  globalState.allowStateChanges = prev;\n}\n\nvar _Symbol$toPrimitive;\n\nvar CREATE = "create";\n_Symbol$toPrimitive = Symbol.toPrimitive;\n\nvar ObservableValue = /*#__PURE__*/function (_Atom) {\n  _inheritsLoose(ObservableValue, _Atom);\n\n  function ObservableValue(value, enhancer, name_, notifySpy, equals) {\n    var _this;\n\n    if (name_ === void 0) {\n      name_ =  false ? undefined : "ObservableValue";\n    }\n\n    if (notifySpy === void 0) {\n      notifySpy = true;\n    }\n\n    if (equals === void 0) {\n      equals = comparer["default"];\n    }\n\n    _this = _Atom.call(this, name_) || this;\n    _this.enhancer = void 0;\n    _this.name_ = void 0;\n    _this.equals = void 0;\n    _this.hasUnreportedChange_ = false;\n    _this.interceptors_ = void 0;\n    _this.changeListeners_ = void 0;\n    _this.value_ = void 0;\n    _this.dehancer = void 0;\n    _this.enhancer = enhancer;\n    _this.name_ = name_;\n    _this.equals = equals;\n    _this.value_ = enhancer(value, undefined, name_);\n\n    if (false) {}\n\n    return _this;\n  }\n\n  var _proto = ObservableValue.prototype;\n\n  _proto.dehanceValue = function dehanceValue(value) {\n    if (this.dehancer !== undefined) return this.dehancer(value);\n    return value;\n  };\n\n  _proto.set = function set(newValue) {\n    var oldValue = this.value_;\n    newValue = this.prepareNewValue_(newValue);\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n\n      if (false) {}\n\n      this.setNewValue_(newValue);\n      if (false) {}\n    }\n  };\n\n  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {\n    checkIfStateModificationsAreAllowed(this);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this,\n        type: UPDATE,\n        newValue: newValue\n      });\n      if (!change) return globalState.UNCHANGED;\n      newValue = change.newValue;\n    } // apply modifier\n\n\n    newValue = this.enhancer(newValue, this.value_, this.name_);\n    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;\n  };\n\n  _proto.setNewValue_ = function setNewValue_(newValue) {\n    var oldValue = this.value_;\n    this.value_ = newValue;\n    this.reportChanged();\n\n    if (hasListeners(this)) {\n      notifyListeners(this, {\n        type: UPDATE,\n        object: this,\n        newValue: newValue,\n        oldValue: oldValue\n      });\n    }\n  };\n\n  _proto.get = function get() {\n    this.reportObserved();\n    return this.dehanceValue(this.value_);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately) listener({\n      observableKind: "value",\n      debugObjectName: this.name_,\n      object: this,\n      type: UPDATE,\n      newValue: this.value_,\n      oldValue: undefined\n    });\n    return registerListener(this, listener);\n  };\n\n  _proto.raw = function raw() {\n    // used by MST ot get undehanced value\n    return this.value_;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.get();\n  };\n\n  _proto.toString = function toString() {\n    return this.name_ + "[" + this.value_ + "]";\n  };\n\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n\n  _proto[_Symbol$toPrimitive] = function () {\n    return this.valueOf();\n  };\n\n  return ObservableValue;\n}(Atom);\n\nvar isObservableValue = /*#__PURE__*/createInstanceofPredicate("ObservableValue", ObservableValue);\n\nvar _Symbol$toPrimitive$1;\n/**\r\n * A node in the state dependency root that observes other nodes, and can be observed itself.\r\n *\r\n * ComputedValue will remember the result of the computation for the duration of the batch, or\r\n * while being observed.\r\n *\r\n * During this time it will recompute only when one of its direct dependencies changed,\r\n * but only when it is being accessed with `ComputedValue.get()`.\r\n *\r\n * Implementation description:\r\n * 1. First time it\'s being accessed it will compute and remember result\r\n *    give back remembered result until 2. happens\r\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\r\n * 3. When it\'s being accessed, recompute if any shallow dependency changed.\r\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\r\n *    go to step 2. either way\r\n *\r\n * If at any point it\'s outside batch and it isn\'t observed: reset everything and go to 1.\r\n */\n\n\n_Symbol$toPrimitive$1 = Symbol.toPrimitive;\n\nvar ComputedValue = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  // during tracking it\'s an array with new observed observers\n  // to check for cycles\n  // N.B: unminified as it is used by MST\n\n  /**\r\n   * Create a new computed value based on a function expression.\r\n   *\r\n   * The `name` property is for debug purposes only.\r\n   *\r\n   * The `equals` property specifies the comparer function to use to determine if a newly produced\r\n   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\r\n   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\r\n   * Structural comparison can be convenient if you always produce a new aggregated object and\r\n   * don\'t want to notify observers if it is structurally the same.\r\n   * This is useful for working with vectors, mouse coordinates etc.\r\n   */\n  function ComputedValue(options) {\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.observing_ = [];\n    this.newObserving_ = null;\n    this.isBeingObserved_ = false;\n    this.isPendingUnobservation_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    this.unboundDepsCount_ = 0;\n    this.value_ = new CaughtException(null);\n    this.name_ = void 0;\n    this.triggeredBy_ = void 0;\n    this.isComputing_ = false;\n    this.isRunningSetter_ = false;\n    this.derivation = void 0;\n    this.setter_ = void 0;\n    this.isTracing_ = TraceMode.NONE;\n    this.scope_ = void 0;\n    this.equals_ = void 0;\n    this.requiresReaction_ = void 0;\n    this.keepAlive_ = void 0;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    if (!options.get) die(31);\n    this.derivation = options.get;\n    this.name_ = options.name || ( false ? undefined : "ComputedValue");\n\n    if (options.set) {\n      this.setter_ = createAction( false ? undefined : "ComputedValue-setter", options.set);\n    }\n\n    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);\n    this.scope_ = options.context;\n    this.requiresReaction_ = !!options.requiresReaction;\n    this.keepAlive_ = !!options.keepAlive;\n  }\n\n  var _proto = ComputedValue.prototype;\n\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    propagateMaybeChanged(this);\n  };\n\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\r\n   * Returns the current value of this computed value.\r\n   * Will evaluate its computation first if needed.\r\n   */\n  ;\n\n  _proto.get = function get() {\n    if (this.isComputing_) die(32, this.name_, this.derivation);\n\n    if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&\n    this.observers_.size === 0 && !this.keepAlive_) {\n      if (shouldCompute(this)) {\n        this.warnAboutUntrackedRead_();\n        startBatch(); // See perf test \'computed memoization\'\n\n        this.value_ = this.computeValue_(false);\n        endBatch();\n      }\n    } else {\n      reportObserved(this);\n\n      if (shouldCompute(this)) {\n        var prevTrackingContext = globalState.trackingContext;\n        if (this.keepAlive_ && !prevTrackingContext) globalState.trackingContext = this;\n        if (this.trackAndCompute()) propagateChangeConfirmed(this);\n        globalState.trackingContext = prevTrackingContext;\n      }\n    }\n\n    var result = this.value_;\n    if (isCaughtException(result)) throw result.cause;\n    return result;\n  };\n\n  _proto.set = function set(value) {\n    if (this.setter_) {\n      if (this.isRunningSetter_) die(33, this.name_);\n      this.isRunningSetter_ = true;\n\n      try {\n        this.setter_.call(this.scope_, value);\n      } finally {\n        this.isRunningSetter_ = false;\n      }\n    } else die(34, this.name_);\n  };\n\n  _proto.trackAndCompute = function trackAndCompute() {\n    // N.B: unminified as it is used by MST\n    var oldValue = this.value_;\n    var wasSuspended =\n    /* see #1208 */\n    this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;\n    var newValue = this.computeValue_(true);\n\n    if (false) {}\n\n    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);\n\n    if (changed) {\n      this.value_ = newValue;\n    }\n\n    return changed;\n  };\n\n  _proto.computeValue_ = function computeValue_(track) {\n    this.isComputing_ = true; // don\'t allow state changes during computation\n\n    var prev = allowStateChangesStart(false);\n    var res;\n\n    if (track) {\n      res = trackDerivedFunction(this, this.derivation, this.scope_);\n    } else {\n      if (globalState.disableErrorBoundaries === true) {\n        res = this.derivation.call(this.scope_);\n      } else {\n        try {\n          res = this.derivation.call(this.scope_);\n        } catch (e) {\n          res = new CaughtException(e);\n        }\n      }\n    }\n\n    allowStateChangesEnd(prev);\n    this.isComputing_ = false;\n    return res;\n  };\n\n  _proto.suspend_ = function suspend_() {\n    if (!this.keepAlive_) {\n      clearObserving(this);\n      this.value_ = undefined; // don\'t hold on to computed value!\n    }\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    var _this = this;\n\n    var firstTime = true;\n    var prevValue = undefined;\n    return autorun(function () {\n      // TODO: why is this in a different place than the spyReport() function? in all other observables it\'s called in the same place\n      var newValue = _this.get();\n\n      if (!firstTime || fireImmediately) {\n        var prevU = untrackedStart();\n        listener({\n          observableKind: "computed",\n          debugObjectName: _this.name_,\n          type: UPDATE,\n          object: _this,\n          newValue: newValue,\n          oldValue: prevValue\n        });\n        untrackedEnd(prevU);\n      }\n\n      firstTime = false;\n      prevValue = newValue;\n    });\n  };\n\n  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {\n    if (true) return;\n\n    if (this.requiresReaction_ === true) {\n      die("[mobx] Computed value " + this.name_ + " is read outside a reactive context");\n    }\n\n    if (this.isTracing_ !== TraceMode.NONE) {\n      console.log("[mobx.trace] \'" + this.name_ + "\' is being read outside a reactive context. Doing a full recompute");\n    }\n\n    if (globalState.computedRequiresReaction) {\n      console.warn("[mobx] Computed value " + this.name_ + " is being read outside a reactive context. Doing a full recompute");\n    }\n  };\n\n  _proto.toString = function toString() {\n    return this.name_ + "[" + this.derivation.toString() + "]";\n  };\n\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n\n  _proto[_Symbol$toPrimitive$1] = function () {\n    return this.valueOf();\n  };\n\n  return ComputedValue;\n}();\n\nvar isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);\nvar IDerivationState_;\n\n(function (IDerivationState_) {\n  // before being run or (outside batch and not being observed)\n  // at this point derivation is not holding any data about dependency tree\n  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_"; // no shallow dependency changed since last computation\n  // won\'t recalculate derivation\n  // this is what makes mobx fast\n\n  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_"; // some deep dependency changed, but don\'t know if shallow dependency changed\n  // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n  // currently only ComputedValue will propagate POSSIBLY_STALE\n  //\n  // having this state is second big optimization:\n  // don\'t have to recompute on every dependency change, but only when it\'s needed\n\n  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_"; // A shallow dependency has changed since last computation and the derivation\n  // will need to recompute when it\'s needed next.\n\n  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";\n})(IDerivationState_ || (IDerivationState_ = {}));\n\nvar TraceMode;\n\n(function (TraceMode) {\n  TraceMode[TraceMode["NONE"] = 0] = "NONE";\n  TraceMode[TraceMode["LOG"] = 1] = "LOG";\n  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";\n})(TraceMode || (TraceMode = {}));\n\nvar CaughtException = function CaughtException(cause) {\n  this.cause = void 0;\n  this.cause = cause; // Empty\n};\n\nfunction isCaughtException(e) {\n  return e instanceof CaughtException;\n}\n/**\r\n * Finds out whether any dependency of the derivation has actually changed.\r\n * If dependenciesState is 1 then it will recalculate dependencies,\r\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\r\n *\r\n * By iterating over the dependencies in the same order that they were reported and\r\n * stopping on the first change, all the recalculations are only called for ComputedValues\r\n * that will be tracked by derivation. That is because we assume that if the first x\r\n * dependencies of the derivation doesn\'t change then the derivation should run the same way\r\n * up until accessing x-th dependency.\r\n */\n\n\nfunction shouldCompute(derivation) {\n  switch (derivation.dependenciesState_) {\n    case IDerivationState_.UP_TO_DATE_:\n      return false;\n\n    case IDerivationState_.NOT_TRACKING_:\n    case IDerivationState_.STALE_:\n      return true;\n\n    case IDerivationState_.POSSIBLY_STALE_:\n      {\n        // state propagation can occur outside of action/reactive context #2195\n        var prevAllowStateReads = allowStateReadsStart(true);\n        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n\n        var obs = derivation.observing_,\n            l = obs.length;\n\n        for (var i = 0; i < l; i++) {\n          var obj = obs[i];\n\n          if (isComputedValue(obj)) {\n            if (globalState.disableErrorBoundaries) {\n              obj.get();\n            } else {\n              try {\n                obj.get();\n              } catch (e) {\n                // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                untrackedEnd(prevUntracked);\n                allowStateReadsEnd(prevAllowStateReads);\n                return true;\n              }\n            } // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n            // and `derivation` is an observer of `obj`\n            // invariantShouldCompute(derivation)\n\n\n            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {\n              untrackedEnd(prevUntracked);\n              allowStateReadsEnd(prevAllowStateReads);\n              return true;\n            }\n          }\n        }\n\n        changeDependenciesStateTo0(derivation);\n        untrackedEnd(prevUntracked);\n        allowStateReadsEnd(prevAllowStateReads);\n        return false;\n      }\n  }\n}\n\nfunction isComputingDerivation() {\n  return globalState.trackingDerivation !== null; // filter out actions inside computations\n}\n\nfunction checkIfStateModificationsAreAllowed(atom) {\n  if (true) {\n    return;\n  }\n\n  var hasObservers = atom.observers_.size > 0; // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n\n  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in \'runInAction\' (or decorate functions with \'action\') if needed. Tried to modify: ") + atom.name_);\n}\n\nfunction checkIfStateReadsAreAllowed(observable) {\n  if (false) {}\n}\n/**\r\n * Executes the provided function `f` and tracks which observables are being accessed.\r\n * The tracking information is stored on the `derivation` object and the derivation is registered\r\n * as observer of any of the accessed observables.\r\n */\n\n\nfunction trackDerivedFunction(derivation, f, context) {\n  var prevAllowStateReads = allowStateReadsStart(true); // pre allocate array allocation + room for variation in deps\n  // array will be trimmed by bindDependencies\n\n  changeDependenciesStateTo0(derivation);\n  derivation.newObserving_ = new Array(derivation.observing_.length + 100);\n  derivation.unboundDepsCount_ = 0;\n  derivation.runId_ = ++globalState.runId;\n  var prevTracking = globalState.trackingDerivation;\n  globalState.trackingDerivation = derivation;\n  globalState.inBatch++;\n  var result;\n\n  if (globalState.disableErrorBoundaries === true) {\n    result = f.call(context);\n  } else {\n    try {\n      result = f.call(context);\n    } catch (e) {\n      result = new CaughtException(e);\n    }\n  }\n\n  globalState.inBatch--;\n  globalState.trackingDerivation = prevTracking;\n  bindDependencies(derivation);\n  warnAboutDerivationWithoutDependencies(derivation);\n  allowStateReadsEnd(prevAllowStateReads);\n  return result;\n}\n\nfunction warnAboutDerivationWithoutDependencies(derivation) {\n  if (true) return;\n  if (derivation.observing_.length !== 0) return;\n\n  if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {\n    console.warn("[mobx] Derivation " + derivation.name_ + " is created/updated without reading any observable value");\n  }\n}\n/**\r\n * diffs newObserving with observing.\r\n * update observing to be newObserving with unique observables\r\n * notify observers that become observed/unobserved\r\n */\n\n\nfunction bindDependencies(derivation) {\n  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");\n  var prevObserving = derivation.observing_;\n  var observing = derivation.observing_ = derivation.newObserving_;\n  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_; // Go through all new observables and check diffValue: (this list can contain duplicates):\n  //   0: first occurrence, change to 1 and keep it\n  //   1: extra occurrence, drop it\n\n  var i0 = 0,\n      l = derivation.unboundDepsCount_;\n\n  for (var i = 0; i < l; i++) {\n    var dep = observing[i];\n\n    if (dep.diffValue_ === 0) {\n      dep.diffValue_ = 1;\n      if (i0 !== i) observing[i0] = dep;\n      i0++;\n    } // Upcast is \'safe\' here, because if dep is IObservable, `dependenciesState` will be undefined,\n    // not hitting the condition\n\n\n    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {\n      lowestNewObservingDerivationState = dep.dependenciesState_;\n    }\n  }\n\n  observing.length = i0;\n  derivation.newObserving_ = null; // newObserving shouldn\'t be needed outside tracking (statement moved down to work around FF bug, see #614)\n  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n  //   0: it\'s not in new observables, unobserve it\n  //   1: it keeps being observed, don\'t want to notify it. change to 0\n\n  l = prevObserving.length;\n\n  while (l--) {\n    var _dep = prevObserving[l];\n\n    if (_dep.diffValue_ === 0) {\n      removeObserver(_dep, derivation);\n    }\n\n    _dep.diffValue_ = 0;\n  } // Go through all new observables and check diffValue: (now it should be unique)\n  //   0: it was set to 0 in last loop. don\'t need to do anything.\n  //   1: it wasn\'t observed, let\'s observe it. set back to 0\n\n\n  while (i0--) {\n    var _dep2 = observing[i0];\n\n    if (_dep2.diffValue_ === 1) {\n      _dep2.diffValue_ = 0;\n      addObserver(_dep2, derivation);\n    }\n  } // Some new observed derivations may become stale during this derivation computation\n  // so they have had no chance to propagate staleness (#916)\n\n\n  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n    derivation.dependenciesState_ = lowestNewObservingDerivationState;\n    derivation.onBecomeStale_();\n  }\n}\n\nfunction clearObserving(derivation) {\n  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");\n  var obs = derivation.observing_;\n  derivation.observing_ = [];\n  var i = obs.length;\n\n  while (i--) {\n    removeObserver(obs[i], derivation);\n  }\n\n  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n}\n\nfunction untracked(action) {\n  var prev = untrackedStart();\n\n  try {\n    return action();\n  } finally {\n    untrackedEnd(prev);\n  }\n}\n\nfunction untrackedStart() {\n  var prev = globalState.trackingDerivation;\n  globalState.trackingDerivation = null;\n  return prev;\n}\n\nfunction untrackedEnd(prev) {\n  globalState.trackingDerivation = prev;\n}\n\nfunction allowStateReadsStart(allowStateReads) {\n  var prev = globalState.allowStateReads;\n  globalState.allowStateReads = allowStateReads;\n  return prev;\n}\n\nfunction allowStateReadsEnd(prev) {\n  globalState.allowStateReads = prev;\n}\n/**\r\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\r\n *\r\n */\n\n\nfunction changeDependenciesStateTo0(derivation) {\n  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) return;\n  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;\n  var obs = derivation.observing_;\n  var i = obs.length;\n\n  while (i--) {\n    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n  }\n}\n/**\r\n * These values will persist if global state is reset\r\n */\n\n\nvar persistentKeys = ["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"];\n\nvar MobXGlobals = function MobXGlobals() {\n  this.version = 6;\n  this.UNCHANGED = {};\n  this.trackingDerivation = null;\n  this.trackingContext = null;\n  this.runId = 0;\n  this.mobxGuid = 0;\n  this.inBatch = 0;\n  this.pendingUnobservations = [];\n  this.pendingReactions = [];\n  this.isRunningReactions = false;\n  this.allowStateChanges = false;\n  this.allowStateReads = true;\n  this.enforceActions = true;\n  this.spyListeners = [];\n  this.globalReactionErrorHandlers = [];\n  this.computedRequiresReaction = false;\n  this.reactionRequiresObservable = false;\n  this.observableRequiresReaction = false;\n  this.disableErrorBoundaries = false;\n  this.suppressReactionErrors = false;\n  this.useProxies = true;\n  this.verifyProxies = false;\n  this.safeDescriptors = true;\n};\n\nvar canMergeGlobalState = true;\nvar isolateCalled = false;\n\nvar globalState = /*#__PURE__*/function () {\n  var global = /*#__PURE__*/getGlobal();\n  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) canMergeGlobalState = false;\n  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) canMergeGlobalState = false;\n\n  if (!canMergeGlobalState) {\n    setTimeout(function () {\n      if (!isolateCalled) {\n        die(35);\n      }\n    }, 1);\n    return new MobXGlobals();\n  } else if (global.__mobxGlobals) {\n    global.__mobxInstanceCount += 1;\n    if (!global.__mobxGlobals.UNCHANGED) global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible\n\n    return global.__mobxGlobals;\n  } else {\n    global.__mobxInstanceCount = 1;\n    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();\n  }\n}();\n\nfunction isolateGlobalState() {\n  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) die(36);\n  isolateCalled = true;\n\n  if (canMergeGlobalState) {\n    var global = getGlobal();\n    if (--global.__mobxInstanceCount === 0) global.__mobxGlobals = undefined;\n    globalState = new MobXGlobals();\n  }\n}\n\nfunction getGlobalState() {\n  return globalState;\n}\n/**\r\n * For testing purposes only; this will break the internal state of existing observables,\r\n * but can be used to get back at a stable state after throwing errors\r\n */\n\n\nfunction resetGlobalState() {\n  var defaultGlobals = new MobXGlobals();\n\n  for (var key in defaultGlobals) {\n    if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];\n  }\n\n  globalState.allowStateChanges = !globalState.enforceActions;\n}\n\nfunction hasObservers(observable) {\n  return observable.observers_ && observable.observers_.size > 0;\n}\n\nfunction getObservers(observable) {\n  return observable.observers_;\n} // function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance\n//         } else {\n//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn\'t be held in map.") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         "INTERNAL ERROR there is no junk in map"\n//     )\n// }\n\n\nfunction addObserver(observable, node) {\n  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");\n  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");\n  // invariantObservers(observable);\n  observable.observers_.add(node);\n  if (observable.lowestObserverState_ > node.dependenciesState_) observable.lowestObserverState_ = node.dependenciesState_; // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn\'t add node");\n}\n\nfunction removeObserver(observable, node) {\n  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");\n  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");\n  // invariantObservers(observable);\n  observable.observers_["delete"](node);\n\n  if (observable.observers_.size === 0) {\n    // deleting last observer\n    queueForUnobservation(observable);\n  } // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");\n\n}\n\nfunction queueForUnobservation(observable) {\n  if (observable.isPendingUnobservation_ === false) {\n    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");\n    observable.isPendingUnobservation_ = true;\n    globalState.pendingUnobservations.push(observable);\n  }\n}\n/**\r\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\r\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\r\n * Avoids unnecessary recalculations.\r\n */\n\n\nfunction startBatch() {\n  globalState.inBatch++;\n}\n\nfunction endBatch() {\n  if (--globalState.inBatch === 0) {\n    runReactions(); // the batch is actually about to finish, all unobserving should happen here.\n\n    var list = globalState.pendingUnobservations;\n\n    for (var i = 0; i < list.length; i++) {\n      var observable = list[i];\n      observable.isPendingUnobservation_ = false;\n\n      if (observable.observers_.size === 0) {\n        if (observable.isBeingObserved_) {\n          // if this observable had reactive observers, trigger the hooks\n          observable.isBeingObserved_ = false;\n          observable.onBUO();\n        }\n\n        if (observable instanceof ComputedValue) {\n          // computed values are automatically teared down when the last observer leaves\n          // this process happens recursively, this computed might be the last observabe of another, etc..\n          observable.suspend_();\n        }\n      }\n    }\n\n    globalState.pendingUnobservations = [];\n  }\n}\n\nfunction reportObserved(observable) {\n  checkIfStateReadsAreAllowed(observable);\n  var derivation = globalState.trackingDerivation;\n\n  if (derivation !== null) {\n    /**\r\n     * Simple optimization, give each derivation run an unique id (runId)\r\n     * Check if last time this observable was accessed the same runId is used\r\n     * if this is the case, the relation is already known\r\n     */\n    if (derivation.runId_ !== observable.lastAccessedBy_) {\n      observable.lastAccessedBy_ = derivation.runId_; // Tried storing newObserving, or observing, or both as Set, but performance didn\'t come close...\n\n      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;\n\n      if (!observable.isBeingObserved_ && globalState.trackingContext) {\n        observable.isBeingObserved_ = true;\n        observable.onBO();\n      }\n    }\n\n    return true;\n  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n    queueForUnobservation(observable);\n  }\n\n  return false;\n} // function invariantLOS(observable: IObservable, msg: string) {\n//     // it\'s expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         "lowestObserverState is wrong for " +\n//             msg +\n//             " because " +\n//             min +\n//             " < " +\n//             observable.lowestObserverState\n//     )\n// }\n\n/**\r\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\r\n * It will propagate changes to observers from previous run\r\n * It\'s hard or maybe impossible (with reasonable perf) to get it right with current approach\r\n * Hopefully self reruning autoruns aren\'t a feature people should depend on\r\n * Also most basic use cases should be ok\r\n */\n// Called by Atom when its value changes\n\n\nfunction propagateChanged(observable) {\n  // invariantLOS(observable, "changed start");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;\n  observable.lowestObserverState_ = IDerivationState_.STALE_; // Ideally we use for..of here, but the downcompiled version is really slow...\n\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      if (false) {}\n\n      d.onBecomeStale_();\n    }\n\n    d.dependenciesState_ = IDerivationState_.STALE_;\n  }); // invariantLOS(observable, "changed end");\n} // Called by ComputedValue when it recalculate and its value changed\n\n\nfunction propagateChangeConfirmed(observable) {\n  // invariantLOS(observable, "confirmed start");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) d.dependenciesState_ = IDerivationState_.STALE_;else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n    ) observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n  }); // invariantLOS(observable, "confirmed end");\n} // Used by computed when its dependency changed, but we don\'t wan\'t to immediately recompute.\n\n\nfunction propagateMaybeChanged(observable) {\n  // invariantLOS(observable, "maybe start");\n  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) return;\n  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;\n\n      if (false) {}\n\n      d.onBecomeStale_();\n    }\n  }); // invariantLOS(observable, "maybe end");\n}\n\nfunction logTraceInfo(derivation, observable) {\n  console.log("[mobx.trace] \'" + derivation.name_ + "\' is invalidated due to a change in: \'" + observable.name_ + "\'");\n\n  if (derivation.isTracing_ === TraceMode.BREAK) {\n    var lines = [];\n    printDepTree(getDependencyTree(derivation), lines, 1); // prettier-ignore\n\n    new Function("debugger;\\n/*\\nTracing \'" + derivation.name_ + "\'\\n\\nYou are entering this break point because derivation \'" + derivation.name_ + "\' is being traced and \'" + observable.name_ + "\' is now forcing it to update.\\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\\n\\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, "/") : "") + "\\n\\nThe dependencies for this derivation are:\\n\\n" + lines.join("\\n") + "\\n*/\\n    ")();\n  }\n}\n\nfunction printDepTree(tree, lines, depth) {\n  if (lines.length >= 1000) {\n    lines.push("(and many more)");\n    return;\n  }\n\n  lines.push("" + new Array(depth).join("\\t") + tree.name); // MWE: not the fastest, but the easiest way :)\n\n  if (tree.dependencies) tree.dependencies.forEach(function (child) {\n    return printDepTree(child, lines, depth + 1);\n  });\n}\n\nvar Reaction = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {\n    if (name_ === void 0) {\n      name_ =  false ? undefined : "Reaction";\n    }\n\n    if (requiresObservable_ === void 0) {\n      requiresObservable_ = false;\n    }\n\n    this.name_ = void 0;\n    this.onInvalidate_ = void 0;\n    this.errorHandler_ = void 0;\n    this.requiresObservable_ = void 0;\n    this.observing_ = [];\n    this.newObserving_ = [];\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.unboundDepsCount_ = 0;\n    this.isDisposed_ = false;\n    this.isScheduled_ = false;\n    this.isTrackPending_ = false;\n    this.isRunning_ = false;\n    this.isTracing_ = TraceMode.NONE;\n    this.name_ = name_;\n    this.onInvalidate_ = onInvalidate_;\n    this.errorHandler_ = errorHandler_;\n    this.requiresObservable_ = requiresObservable_;\n  }\n\n  var _proto = Reaction.prototype;\n\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    this.schedule_();\n  };\n\n  _proto.schedule_ = function schedule_() {\n    if (!this.isScheduled_) {\n      this.isScheduled_ = true;\n      globalState.pendingReactions.push(this);\n      runReactions();\n    }\n  };\n\n  _proto.isScheduled = function isScheduled() {\n    return this.isScheduled_;\n  }\n  /**\r\n   * internal, use schedule() if you intend to kick off a reaction\r\n   */\n  ;\n\n  _proto.runReaction_ = function runReaction_() {\n    if (!this.isDisposed_) {\n      startBatch();\n      this.isScheduled_ = false;\n      var prev = globalState.trackingContext;\n      globalState.trackingContext = this;\n\n      if (shouldCompute(this)) {\n        this.isTrackPending_ = true;\n\n        try {\n          this.onInvalidate_();\n\n          if (false) {}\n        } catch (e) {\n          this.reportExceptionInDerivation_(e);\n        }\n      }\n\n      globalState.trackingContext = prev;\n      endBatch();\n    }\n  };\n\n  _proto.track = function track(fn) {\n    if (this.isDisposed_) {\n      return; // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either\n    }\n\n    startBatch();\n    var notify = isSpyEnabled();\n    var startTime;\n\n    if (false) {}\n\n    this.isRunning_ = true;\n    var prevReaction = globalState.trackingContext; // reactions could create reactions...\n\n    globalState.trackingContext = this;\n    var result = trackDerivedFunction(this, fn, undefined);\n    globalState.trackingContext = prevReaction;\n    this.isRunning_ = false;\n    this.isTrackPending_ = false;\n\n    if (this.isDisposed_) {\n      // disposed during last run. Clean up everything that was bound after the dispose call.\n      clearObserving(this);\n    }\n\n    if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause);\n\n    if (false) {}\n\n    endBatch();\n  };\n\n  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {\n    var _this = this;\n\n    if (this.errorHandler_) {\n      this.errorHandler_(error, this);\n      return;\n    }\n\n    if (globalState.disableErrorBoundaries) throw error;\n    var message =  false ? undefined : "[mobx] uncaught error in \'" + this + "\'";\n\n    if (!globalState.suppressReactionErrors) {\n      console.error(message, error);\n      /** If debugging brought you here, please, read the above message :-). Tnx! */\n    } else if (false) {} // prettier-ignore\n\n\n    if (false) {}\n\n    globalState.globalReactionErrorHandlers.forEach(function (f) {\n      return f(error, _this);\n    });\n  };\n\n  _proto.dispose = function dispose() {\n    if (!this.isDisposed_) {\n      this.isDisposed_ = true;\n\n      if (!this.isRunning_) {\n        // if disposed while running, clean up later. Maybe not optimal, but rare case\n        startBatch();\n        clearObserving(this);\n        endBatch();\n      }\n    }\n  };\n\n  _proto.getDisposer_ = function getDisposer_() {\n    var r = this.dispose.bind(this);\n    r[$mobx] = this;\n    return r;\n  };\n\n  _proto.toString = function toString() {\n    return "Reaction[" + this.name_ + "]";\n  };\n\n  _proto.trace = function trace$1(enterBreakPoint) {\n    if (enterBreakPoint === void 0) {\n      enterBreakPoint = false;\n    }\n\n    trace(this, enterBreakPoint);\n  };\n\n  return Reaction;\n}();\n\nfunction onReactionError(handler) {\n  globalState.globalReactionErrorHandlers.push(handler);\n  return function () {\n    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n    if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);\n  };\n}\n/**\r\n * Magic number alert!\r\n * Defines within how many times a reaction is allowed to re-trigger itself\r\n * until it is assumed that this is gonna be a never ending loop...\r\n */\n\n\nvar MAX_REACTION_ITERATIONS = 100;\n\nvar reactionScheduler = function reactionScheduler(f) {\n  return f();\n};\n\nfunction runReactions() {\n  // Trampolining, if runReactions are already running, new reactions will be picked up\n  if (globalState.inBatch > 0 || globalState.isRunningReactions) return;\n  reactionScheduler(runReactionsHelper);\n}\n\nfunction runReactionsHelper() {\n  globalState.isRunningReactions = true;\n  var allReactions = globalState.pendingReactions;\n  var iterations = 0; // While running reactions, new reactions might be triggered.\n  // Hence we work with two variables and check whether\n  // we converge to no remaining reactions after a while.\n\n  while (allReactions.length > 0) {\n    if (++iterations === MAX_REACTION_ITERATIONS) {\n      console.error( false ? undefined : "[mobx] cycle in reaction: " + allReactions[0]);\n      allReactions.splice(0); // clear reactions\n    }\n\n    var remainingReactions = allReactions.splice(0);\n\n    for (var i = 0, l = remainingReactions.length; i < l; i++) {\n      remainingReactions[i].runReaction_();\n    }\n  }\n\n  globalState.isRunningReactions = false;\n}\n\nvar isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);\n\nfunction setReactionScheduler(fn) {\n  var baseScheduler = reactionScheduler;\n\n  reactionScheduler = function reactionScheduler(f) {\n    return fn(function () {\n      return baseScheduler(f);\n    });\n  };\n}\n\nfunction isSpyEnabled() {\n  return  false && false;\n}\n\nfunction spyReport(event) {\n  if (true) return; // dead code elimination can do the rest\n\n  if (!globalState.spyListeners.length) return;\n  var listeners = globalState.spyListeners;\n\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](event);\n  }\n}\n\nfunction spyReportStart(event) {\n  if (true) return;\n\n  var change = _extends({}, event, {\n    spyReportStart: true\n  });\n\n  spyReport(change);\n}\n\nvar END_EVENT = {\n  type: "report-end",\n  spyReportEnd: true\n};\n\nfunction spyReportEnd(change) {\n  if (true) return;\n  if (change) spyReport(_extends({}, change, {\n    type: "report-end",\n    spyReportEnd: true\n  }));else spyReport(END_EVENT);\n}\n\nfunction spy(listener) {\n  if (true) {\n    console.warn("[mobx.spy] Is a no-op in production builds");\n    return function () {};\n  } else {}\n}\n\nvar ACTION = "action";\nvar ACTION_BOUND = "action.bound";\nvar AUTOACTION = "autoAction";\nvar AUTOACTION_BOUND = "autoAction.bound";\nvar DEFAULT_ACTION_NAME = "<unnamed action>";\nvar actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);\nvar actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {\n  bound: true\n});\nvar autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {\n  autoAction: true\n});\nvar autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {\n  autoAction: true,\n  bound: true\n});\n\nfunction createActionFactory(autoAction) {\n  var res = function action(arg1, arg2) {\n    // action(fn() {})\n    if (isFunction(arg1)) return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction); // action("name", fn() {})\n\n    if (isFunction(arg2)) return createAction(arg1, arg2, autoAction); // @action\n\n    if (isStringish(arg2)) {\n      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);\n    } // action("name") & @action("name")\n\n\n    if (isStringish(arg1)) {\n      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n        name: arg1,\n        autoAction: autoAction\n      }));\n    }\n\n    if (false) {}\n  };\n\n  return res;\n}\n\nvar action = /*#__PURE__*/createActionFactory(false);\nObject.assign(action, actionAnnotation);\nvar autoAction = /*#__PURE__*/createActionFactory(true);\nObject.assign(autoAction, autoActionAnnotation);\naction.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);\nautoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);\n\nfunction runInAction(fn) {\n  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);\n}\n\nfunction isAction(thing) {\n  return isFunction(thing) && thing.isMobxAction === true;\n}\n/**\r\n * Creates a named reactive view and keeps it alive, so that the view is always\r\n * updated if one of the dependencies changes, even when the view is not further used by something else.\r\n * @param view The reactive view\r\n * @returns disposer function, which can be used to stop the view from being updated in the future.\r\n */\n\n\nfunction autorun(view, opts) {\n  var _opts$name, _opts;\n\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n\n  if (false) {}\n\n  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  false ? undefined : "Autorun";\n  var runSync = !opts.scheduler && !opts.delay;\n  var reaction;\n\n  if (runSync) {\n    // normal autorun\n    reaction = new Reaction(name, function () {\n      this.track(reactionRunner);\n    }, opts.onError, opts.requiresObservable);\n  } else {\n    var scheduler = createSchedulerFromOptions(opts); // debounced autorun\n\n    var isScheduled = false;\n    reaction = new Reaction(name, function () {\n      if (!isScheduled) {\n        isScheduled = true;\n        scheduler(function () {\n          isScheduled = false;\n          if (!reaction.isDisposed_) reaction.track(reactionRunner);\n        });\n      }\n    }, opts.onError, opts.requiresObservable);\n  }\n\n  function reactionRunner() {\n    view(reaction);\n  }\n\n  reaction.schedule_();\n  return reaction.getDisposer_();\n}\n\nvar run = function run(f) {\n  return f();\n};\n\nfunction createSchedulerFromOptions(opts) {\n  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {\n    return setTimeout(f, opts.delay);\n  } : run;\n}\n\nfunction reaction(expression, effect, opts) {\n  var _opts$name2;\n\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n\n  if (false) {}\n\n  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  false ? undefined : "Reaction";\n  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);\n  var runSync = !opts.scheduler && !opts.delay;\n  var scheduler = createSchedulerFromOptions(opts);\n  var firstTime = true;\n  var isScheduled = false;\n  var value;\n  var oldValue = undefined; // only an issue with fireImmediately\n\n  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];\n  var r = new Reaction(name, function () {\n    if (firstTime || runSync) {\n      reactionRunner();\n    } else if (!isScheduled) {\n      isScheduled = true;\n      scheduler(reactionRunner);\n    }\n  }, opts.onError, opts.requiresObservable);\n\n  function reactionRunner() {\n    isScheduled = false;\n    if (r.isDisposed_) return;\n    var changed = false;\n    r.track(function () {\n      var nextValue = allowStateChanges(false, function () {\n        return expression(r);\n      });\n      changed = firstTime || !equals(value, nextValue);\n      oldValue = value;\n      value = nextValue;\n    });\n    if (firstTime && opts.fireImmediately) effectAction(value, oldValue, r);else if (!firstTime && changed) effectAction(value, oldValue, r);\n    firstTime = false;\n  }\n\n  r.schedule_();\n  return r.getDisposer_();\n}\n\nfunction wrapErrorHandler(errorHandler, baseFn) {\n  return function () {\n    try {\n      return baseFn.apply(this, arguments);\n    } catch (e) {\n      errorHandler.call(this, e);\n    }\n  };\n}\n\nvar ON_BECOME_OBSERVED = "onBO";\nvar ON_BECOME_UNOBSERVED = "onBUO";\n\nfunction onBecomeObserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);\n}\n\nfunction onBecomeUnobserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);\n}\n\nfunction interceptHook(hook, thing, arg2, arg3) {\n  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);\n  var cb = isFunction(arg3) ? arg3 : arg2;\n  var listenersKey = hook + "L";\n\n  if (atom[listenersKey]) {\n    atom[listenersKey].add(cb);\n  } else {\n    atom[listenersKey] = new Set([cb]);\n  }\n\n  return function () {\n    var hookListeners = atom[listenersKey];\n\n    if (hookListeners) {\n      hookListeners["delete"](cb);\n\n      if (hookListeners.size === 0) {\n        delete atom[listenersKey];\n      }\n    }\n  };\n}\n\nvar NEVER = "never";\nvar ALWAYS = "always";\nvar OBSERVED = "observed"; // const IF_AVAILABLE = "ifavailable"\n\nfunction configure(options) {\n  if (options.isolateGlobalState === true) {\n    isolateGlobalState();\n  }\n\n  var useProxies = options.useProxies,\n      enforceActions = options.enforceActions;\n\n  if (useProxies !== undefined) {\n    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";\n  }\n\n  if (useProxies === "ifavailable") globalState.verifyProxies = true;\n\n  if (enforceActions !== undefined) {\n    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;\n    globalState.enforceActions = ea;\n    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;\n  }\n\n  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {\n    if (key in options) globalState[key] = !!options[key];\n  });\n  globalState.allowStateReads = !globalState.observableRequiresReaction;\n\n  if (false) {}\n\n  if (options.reactionScheduler) {\n    setReactionScheduler(options.reactionScheduler);\n  }\n}\n\nfunction extendObservable(target, properties, annotations, options) {\n  if (false) {} // Pull descriptors first, so we don\'t have to deal with props added by administration ($mobx)\n\n\n  var descriptors = getOwnPropertyDescriptors(properties);\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n\n  try {\n    ownKeys(descriptors).forEach(function (key) {\n      adm.extend_(key, descriptors[key], // must pass "undefined" for { key: undefined }\n      !annotations ? true : key in annotations ? annotations[key] : true);\n    });\n  } finally {\n    endBatch();\n  }\n\n  return target;\n}\n\nfunction getDependencyTree(thing, property) {\n  return nodeToDependencyTree(getAtom(thing, property));\n}\n\nfunction nodeToDependencyTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (node.observing_ && node.observing_.length > 0) result.dependencies = unique(node.observing_).map(nodeToDependencyTree);\n  return result;\n}\n\nfunction getObserverTree(thing, property) {\n  return nodeToObserverTree(getAtom(thing, property));\n}\n\nfunction nodeToObserverTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (hasObservers(node)) result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);\n  return result;\n}\n\nfunction unique(list) {\n  return Array.from(new Set(list));\n}\n\nvar generatorId = 0;\n\nfunction FlowCancellationError() {\n  this.message = "FLOW_CANCELLED";\n}\n\nFlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);\n\nfunction isFlowCancellationError(error) {\n  return error instanceof FlowCancellationError;\n}\n\nvar flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");\nvar flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {\n  // @flow\n  if (isStringish(arg2)) {\n    return storeAnnotation(arg1, arg2, flowAnnotation);\n  } // flow(fn)\n\n\n  if (false) {}\n  var generator = arg1;\n  var name = generator.name || "<unnamed flow>"; // Implementation based on https://github.com/tj/co/blob/master/index.js\n\n  var res = function res() {\n    var ctx = this;\n    var args = arguments;\n    var runId = ++generatorId;\n    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);\n    var rejector;\n    var pendingPromise = undefined;\n    var promise = new Promise(function (resolve, reject) {\n      var stepId = 0;\n      rejector = reject;\n\n      function onFulfilled(res) {\n        pendingPromise = undefined;\n        var ret;\n\n        try {\n          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);\n        } catch (e) {\n          return reject(e);\n        }\n\n        next(ret);\n      }\n\n      function onRejected(err) {\n        pendingPromise = undefined;\n        var ret;\n\n        try {\n          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);\n        } catch (e) {\n          return reject(e);\n        }\n\n        next(ret);\n      }\n\n      function next(ret) {\n        if (isFunction(ret == null ? void 0 : ret.then)) {\n          // an async iterator\n          ret.then(next, reject);\n          return;\n        }\n\n        if (ret.done) return resolve(ret.value);\n        pendingPromise = Promise.resolve(ret.value);\n        return pendingPromise.then(onFulfilled, onRejected);\n      }\n\n      onFulfilled(undefined); // kick off the process\n    });\n    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {\n      try {\n        if (pendingPromise) cancelPromise(pendingPromise); // Finally block can return (or yield) stuff..\n\n        var _res = gen["return"](undefined); // eat anything that promise would do, it\'s cancelled!\n\n\n        var yieldedPromise = Promise.resolve(_res.value);\n        yieldedPromise.then(noop, noop);\n        cancelPromise(yieldedPromise); // maybe it can be cancelled :)\n        // reject our original promise\n\n        rejector(new FlowCancellationError());\n      } catch (e) {\n        rejector(e); // there could be a throwing finally block\n      }\n    });\n    return promise;\n  };\n\n  res.isMobXFlow = true;\n  return res;\n}, flowAnnotation);\n\nfunction cancelPromise(promise) {\n  if (isFunction(promise.cancel)) promise.cancel();\n}\n\nfunction flowResult(result) {\n  return result; // just tricking TypeScript :)\n}\n\nfunction isFlow(fn) {\n  return (fn == null ? void 0 : fn.isMobXFlow) === true;\n}\n\nfunction interceptReads(thing, propOrHandler, handler) {\n  var target;\n\n  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n    target = getAdministration(thing);\n  } else if (isObservableObject(thing)) {\n    if (false) {}\n    target = getAdministration(thing, propOrHandler);\n  } else if (false) {}\n\n  if (false) {}\n  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;\n  return function () {\n    target.dehancer = undefined;\n  };\n}\n\nfunction intercept(thing, propOrHandler, handler) {\n  if (isFunction(handler)) return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);\n}\n\nfunction interceptInterceptable(thing, handler) {\n  return getAdministration(thing).intercept_(handler);\n}\n\nfunction interceptProperty(thing, property, handler) {\n  return getAdministration(thing, property).intercept_(handler);\n}\n\nfunction _isComputed(value, property) {\n  if (property !== undefined) {\n    if (isObservableObject(value) === false) return false;\n    if (!value[$mobx].values_.has(property)) return false;\n    var atom = getAtom(value, property);\n    return isComputedValue(atom);\n  }\n\n  return isComputedValue(value);\n}\n\nfunction isComputed(value) {\n  if (false) {}\n  return _isComputed(value);\n}\n\nfunction isComputedProp(value, propName) {\n  if (false) {}\n  return _isComputed(value, propName);\n}\n\nfunction _isObservable(value, property) {\n  if (!value) return false;\n\n  if (property !== undefined) {\n    if (false) {}\n\n    if (isObservableObject(value)) {\n      return value[$mobx].values_.has(property);\n    }\n\n    return false;\n  } // For first check, see #701\n\n\n  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);\n}\n\nfunction isObservable(value) {\n  if (false) {}\n  return _isObservable(value);\n}\n\nfunction isObservableProp(value, propName) {\n  if (false) {}\n  return _isObservable(value, propName);\n}\n\nfunction keys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].keys_();\n  }\n\n  if (isObservableMap(obj) || isObservableSet(obj)) {\n    return Array.from(obj.keys());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.map(function (_, index) {\n      return index;\n    });\n  }\n\n  die(5);\n}\n\nfunction values(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return obj[key];\n    });\n  }\n\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return obj.get(key);\n    });\n  }\n\n  if (isObservableSet(obj)) {\n    return Array.from(obj.values());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.slice();\n  }\n\n  die(6);\n}\n\nfunction entries(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj[key]];\n    });\n  }\n\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj.get(key)];\n    });\n  }\n\n  if (isObservableSet(obj)) {\n    return Array.from(obj.entries());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.map(function (key, index) {\n      return [index, key];\n    });\n  }\n\n  die(7);\n}\n\nfunction set(obj, key, value) {\n  if (arguments.length === 2 && !isObservableSet(obj)) {\n    startBatch();\n    var _values = key;\n\n    try {\n      for (var _key in _values) {\n        set(obj, _key, _values[_key]);\n      }\n    } finally {\n      endBatch();\n    }\n\n    return;\n  }\n\n  if (isObservableObject(obj)) {\n    obj[$mobx].set_(key, value);\n  } else if (isObservableMap(obj)) {\n    obj.set(key, value);\n  } else if (isObservableSet(obj)) {\n    obj.add(key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== "number") key = parseInt(key, 10);\n    if (key < 0) die("Invalid index: \'" + key + "\'");\n    startBatch();\n    if (key >= obj.length) obj.length = key + 1;\n    obj[key] = value;\n    endBatch();\n  } else die(8);\n}\n\nfunction remove(obj, key) {\n  if (isObservableObject(obj)) {\n    obj[$mobx].delete_(key);\n  } else if (isObservableMap(obj)) {\n    obj["delete"](key);\n  } else if (isObservableSet(obj)) {\n    obj["delete"](key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== "number") key = parseInt(key, 10);\n    obj.splice(key, 1);\n  } else {\n    die(9);\n  }\n}\n\nfunction has(obj, key) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].has_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.has(key);\n  } else if (isObservableSet(obj)) {\n    return obj.has(key);\n  } else if (isObservableArray(obj)) {\n    return key >= 0 && key < obj.length;\n  }\n\n  die(10);\n}\n\nfunction get(obj, key) {\n  if (!has(obj, key)) return undefined;\n\n  if (isObservableObject(obj)) {\n    return obj[$mobx].get_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.get(key);\n  } else if (isObservableArray(obj)) {\n    return obj[key];\n  }\n\n  die(11);\n}\n\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n  if (isFunction(cbOrFire)) return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);\n}\n\nfunction observeObservable(thing, listener, fireImmediately) {\n  return getAdministration(thing).observe_(listener, fireImmediately);\n}\n\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n  return getAdministration(thing, property).observe_(listener, fireImmediately);\n}\n\nfunction cache(map, key, value) {\n  map.set(key, value);\n  return value;\n}\n\nfunction toJSHelper(source, __alreadySeen) {\n  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) return source;\n  if (isObservableValue(source)) return toJSHelper(source.get(), __alreadySeen);\n\n  if (__alreadySeen.has(source)) {\n    return __alreadySeen.get(source);\n  }\n\n  if (isObservableArray(source)) {\n    var res = cache(__alreadySeen, source, new Array(source.length));\n    source.forEach(function (value, idx) {\n      res[idx] = toJSHelper(value, __alreadySeen);\n    });\n    return res;\n  }\n\n  if (isObservableSet(source)) {\n    var _res = cache(__alreadySeen, source, new Set());\n\n    source.forEach(function (value) {\n      _res.add(toJSHelper(value, __alreadySeen));\n    });\n    return _res;\n  }\n\n  if (isObservableMap(source)) {\n    var _res2 = cache(__alreadySeen, source, new Map());\n\n    source.forEach(function (value, key) {\n      _res2.set(key, toJSHelper(value, __alreadySeen));\n    });\n    return _res2;\n  } else {\n    // must be observable object\n    keys(source); // make sure keys are observed\n\n    var _res3 = cache(__alreadySeen, source, {});\n\n    getPlainObjectKeys(source).forEach(function (key) {\n      _res3[key] = toJSHelper(source[key], __alreadySeen);\n    });\n    return _res3;\n  }\n}\n/**\r\n * Basically, a deep clone, so that no reactive property will exist anymore.\r\n */\n\n\nfunction toJS(source, options) {\n  if (false) {}\n  return toJSHelper(source, new Map());\n}\n\nfunction trace() {\n  if (true) die("trace() is not available in production builds");\n  var enterBreakPoint = false;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();\n  var derivation = getAtomFromArgs(args);\n\n  if (!derivation) {\n    return die("\'trace(break?)\' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");\n  }\n\n  if (derivation.isTracing_ === TraceMode.NONE) {\n    console.log("[mobx.trace] \'" + derivation.name_ + "\' tracing enabled");\n  }\n\n  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;\n}\n\nfunction getAtomFromArgs(args) {\n  switch (args.length) {\n    case 0:\n      return globalState.trackingDerivation;\n\n    case 1:\n      return getAtom(args[0]);\n\n    case 2:\n      return getAtom(args[0], args[1]);\n  }\n}\n/**\r\n * During a transaction no views are updated until the end of the transaction.\r\n * The transaction will be run synchronously nonetheless.\r\n *\r\n * @param action a function that updates some reactive state\r\n * @returns any value that was returned by the \'action\' parameter.\r\n */\n\n\nfunction transaction(action, thisArg) {\n  if (thisArg === void 0) {\n    thisArg = undefined;\n  }\n\n  startBatch();\n\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\n\nfunction when(predicate, arg1, arg2) {\n  if (arguments.length === 1 || arg1 && typeof arg1 === "object") return whenPromise(predicate, arg1);\n  return _when(predicate, arg1, arg2 || {});\n}\n\nfunction _when(predicate, effect, opts) {\n  var timeoutHandle;\n\n  if (typeof opts.timeout === "number") {\n    timeoutHandle = setTimeout(function () {\n      if (!disposer[$mobx].isDisposed_) {\n        disposer();\n        var error = new Error("WHEN_TIMEOUT");\n        if (opts.onError) opts.onError(error);else throw error;\n      }\n    }, opts.timeout);\n  }\n\n  opts.name =  false ? undefined : "When";\n  var effectAction = createAction( false ? undefined : "When-effect", effect); // eslint-disable-next-line\n\n  var disposer = autorun(function (r) {\n    // predicate should not change state\n    var cond = allowStateChanges(false, predicate);\n\n    if (cond) {\n      r.dispose();\n      if (timeoutHandle) clearTimeout(timeoutHandle);\n      effectAction();\n    }\n  }, opts);\n  return disposer;\n}\n\nfunction whenPromise(predicate, opts) {\n  if (false) {}\n  var cancel;\n  var res = new Promise(function (resolve, reject) {\n    var disposer = _when(predicate, resolve, _extends({}, opts, {\n      onError: reject\n    }));\n\n    cancel = function cancel() {\n      disposer();\n      reject("WHEN_CANCELLED");\n    };\n  });\n  res.cancel = cancel;\n  return res;\n}\n\nfunction getAdm(target) {\n  return target[$mobx];\n} // Optimization: we don\'t need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\n\n\nvar objectProxyTraps = {\n  has: function has(target, name) {\n    if (false) {}\n    return getAdm(target).has_(name);\n  },\n  get: function get(target, name) {\n    return getAdm(target).get_(name);\n  },\n  set: function set(target, name, value) {\n    var _getAdm$set_;\n\n    if (!isStringish(name)) return false;\n\n    if (false) {} // null (intercepted) -> true (success)\n\n\n    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;\n  },\n  deleteProperty: function deleteProperty(target, name) {\n    var _getAdm$delete_;\n\n    if (false) {}\n\n    if (!isStringish(name)) return false; // null (intercepted) -> true (success)\n\n    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;\n  },\n  defineProperty: function defineProperty(target, name, descriptor) {\n    var _getAdm$definePropert;\n\n    if (false) {} // null (intercepted) -> true (success)\n\n\n    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;\n  },\n  ownKeys: function ownKeys(target) {\n    if (false) {}\n    return getAdm(target).ownKeys_();\n  },\n  preventExtensions: function preventExtensions(target) {\n    die(13);\n  }\n};\n\nfunction asDynamicObservableObject(target, options) {\n  var _target$$mobx, _target$$mobx$proxy_;\n\n  assertProxies();\n  target = asObservableObject(target, options);\n  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);\n}\n\nfunction hasInterceptors(interceptable) {\n  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;\n}\n\nfunction registerInterceptor(interceptable, handler) {\n  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);\n  interceptors.push(handler);\n  return once(function () {\n    var idx = interceptors.indexOf(handler);\n    if (idx !== -1) interceptors.splice(idx, 1);\n  });\n}\n\nfunction interceptChange(interceptable, change) {\n  var prevU = untrackedStart();\n\n  try {\n    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n    var interceptors = [].concat(interceptable.interceptors_ || []);\n\n    for (var i = 0, l = interceptors.length; i < l; i++) {\n      change = interceptors[i](change);\n      if (change && !change.type) die(14);\n      if (!change) break;\n    }\n\n    return change;\n  } finally {\n    untrackedEnd(prevU);\n  }\n}\n\nfunction hasListeners(listenable) {\n  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;\n}\n\nfunction registerListener(listenable, handler) {\n  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);\n  listeners.push(handler);\n  return once(function () {\n    var idx = listeners.indexOf(handler);\n    if (idx !== -1) listeners.splice(idx, 1);\n  });\n}\n\nfunction notifyListeners(listenable, change) {\n  var prevU = untrackedStart();\n  var listeners = listenable.changeListeners_;\n  if (!listeners) return;\n  listeners = listeners.slice();\n\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](change);\n  }\n\n  untrackedEnd(prevU);\n}\n\nfunction makeObservable(target, annotations, options) {\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n\n  try {\n    var _annotations; // Default to decorators\n\n\n    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target); // Annotate\n\n    ownKeys(annotations).forEach(function (key) {\n      return adm.make_(key, annotations[key]);\n    });\n  } finally {\n    endBatch();\n  }\n\n  return target;\n}\n\nfunction makeAutoObservable(target, overrides, options) {\n  if (false) {} // Optimization (avoids visiting protos)\n  // assumes that annotation.make_/.extend_ works the same for plain objects\n\n\n  if (isPlainObject(target)) {\n    return extendObservable(target, target, overrides, options);\n  }\n\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n\n  try {\n    // Use cached inferred annotations if available (only in classes)\n    if (target[inferredAnnotationsSymbol]) {\n      target[inferredAnnotationsSymbol].forEach(function (value, key) {\n        return adm.make_(key, value);\n      }); // Overrides are not cached, unless `true`, see #2832\n\n      if (overrides) {\n        ownKeys(overrides).forEach(function (key) {\n          var annotation = overrides[key];\n\n          if (annotation !== true) {\n            adm.make_(key, annotation);\n          }\n        });\n      }\n    } else {\n      var _ignoreKeys;\n\n      var ignoreKeys = (_ignoreKeys = {}, _ignoreKeys[$mobx] = 1, _ignoreKeys[inferredAnnotationsSymbol] = 1, _ignoreKeys.constructor = 1, _ignoreKeys);\n\n      var make = function make(key) {\n        if (ignoreKeys[key]) return;\n        ignoreKeys[key] = 1;\n        adm.make_(key, // must pass "undefined" for { key: undefined }\n        !overrides ? true : key in overrides ? overrides[key] : true);\n      };\n\n      var current = target;\n\n      while (current && current !== objectPrototype) {\n        ownKeys(current).forEach(make);\n        current = Object.getPrototypeOf(current);\n      }\n    }\n  } finally {\n    endBatch();\n  }\n\n  return target;\n}\n\nvar SPLICE = "splice";\nvar UPDATE = "update";\nvar MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859\n\nvar arrayTraps = {\n  get: function get(target, name) {\n    var adm = target[$mobx];\n    if (name === $mobx) return adm;\n    if (name === "length") return adm.getArrayLength_();\n\n    if (typeof name === "string" && !isNaN(name)) {\n      return adm.get_(parseInt(name));\n    }\n\n    if (hasProp(arrayExtensions, name)) {\n      return arrayExtensions[name];\n    }\n\n    return target[name];\n  },\n  set: function set(target, name, value) {\n    var adm = target[$mobx];\n\n    if (name === "length") {\n      adm.setArrayLength_(value);\n    }\n\n    if (typeof name === "symbol" || isNaN(name)) {\n      target[name] = value;\n    } else {\n      // numeric string\n      adm.set_(parseInt(name), value);\n    }\n\n    return true;\n  },\n  preventExtensions: function preventExtensions() {\n    die(15);\n  }\n};\n\nvar ObservableArrayAdministration = /*#__PURE__*/function () {\n  // this is the prop that gets proxied, so can\'t replace it!\n  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {\n    if (name === void 0) {\n      name =  false ? undefined : "ObservableArray";\n    }\n\n    this.owned_ = void 0;\n    this.legacyMode_ = void 0;\n    this.atom_ = void 0;\n    this.values_ = [];\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.enhancer_ = void 0;\n    this.dehancer = void 0;\n    this.proxy_ = void 0;\n    this.lastKnownLength_ = 0;\n    this.owned_ = owned_;\n    this.legacyMode_ = legacyMode_;\n    this.atom_ = new Atom(name);\n\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV,  false ? undefined : "ObservableArray[..]");\n    };\n  }\n\n  var _proto = ObservableArrayAdministration.prototype;\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) return this.dehancer(value);\n    return value;\n  };\n\n  _proto.dehanceValues_ = function dehanceValues_(values) {\n    if (this.dehancer !== undefined && values.length > 0) return values.map(this.dehancer);\n    return values;\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately === void 0) {\n      fireImmediately = false;\n    }\n\n    if (fireImmediately) {\n      listener({\n        observableKind: "array",\n        object: this.proxy_,\n        debugObjectName: this.atom_.name_,\n        type: "splice",\n        index: 0,\n        added: this.values_.slice(),\n        addedCount: this.values_.length,\n        removed: [],\n        removedCount: 0\n      });\n    }\n\n    return registerListener(this, listener);\n  };\n\n  _proto.getArrayLength_ = function getArrayLength_() {\n    this.atom_.reportObserved();\n    return this.values_.length;\n  };\n\n  _proto.setArrayLength_ = function setArrayLength_(newLength) {\n    if (typeof newLength !== "number" || newLength < 0) die("Out of range: " + newLength);\n    var currentLength = this.values_.length;\n    if (newLength === currentLength) return;else if (newLength > currentLength) {\n      var newItems = new Array(newLength - currentLength);\n\n      for (var i = 0; i < newLength - currentLength; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n\n\n      this.spliceWithArray_(currentLength, 0, newItems);\n    } else this.spliceWithArray_(newLength, currentLength - newLength);\n  };\n\n  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {\n    if (oldLength !== this.lastKnownLength_) die(16);\n    this.lastKnownLength_ += delta;\n    if (this.legacyMode_ && delta > 0) reserveArrayBuffer(oldLength + delta + 1);\n  };\n\n  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {\n    var _this = this;\n\n    checkIfStateModificationsAreAllowed(this.atom_);\n    var length = this.values_.length;\n    if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);\n    if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n    if (newItems === undefined) newItems = EMPTY_ARRAY;\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_,\n        type: SPLICE,\n        index: index,\n        removedCount: deleteCount,\n        added: newItems\n      });\n      if (!change) return EMPTY_ARRAY;\n      deleteCount = change.removedCount;\n      newItems = change.added;\n    }\n\n    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {\n      return _this.enhancer_(v, undefined);\n    });\n\n    if (this.legacyMode_ || "production" !== "production") {\n      var lengthDelta = newItems.length - deleteCount;\n      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn\'t modified\n    }\n\n    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);\n    if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice_(index, newItems, res);\n    return this.dehanceValues_(res);\n  };\n\n  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {\n    if (newItems.length < MAX_SPLICE_SIZE) {\n      var _this$values_;\n\n      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));\n    } else {\n      var res = this.values_.slice(index, index + deleteCount);\n      var oldItems = this.values_.slice(index + deleteCount);\n      this.values_.length = index + newItems.length - deleteCount;\n\n      for (var i = 0; i < newItems.length; i++) {\n        this.values_[index + i] = newItems[i];\n      }\n\n      for (var _i = 0; _i < oldItems.length; _i++) {\n        this.values_[index + newItems.length + _i] = oldItems[_i];\n      }\n\n      return res;\n    }\n  };\n\n  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "array",\n      object: this.proxy_,\n      type: UPDATE,\n      debugObjectName: this.atom_.name_,\n      index: index,\n      newValue: newValue,\n      oldValue: oldValue\n    } : null; // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won\'t\n    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n\n    if (false) {}\n    this.atom_.reportChanged();\n    if (notify) notifyListeners(this, change);\n    if (false) {}\n  };\n\n  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "array",\n      object: this.proxy_,\n      debugObjectName: this.atom_.name_,\n      type: SPLICE,\n      index: index,\n      removed: removed,\n      added: added,\n      removedCount: removed.length,\n      addedCount: added.length\n    } : null;\n    if (false) {}\n    this.atom_.reportChanged(); // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n\n    if (notify) notifyListeners(this, change);\n    if (false) {}\n  };\n\n  _proto.get_ = function get_(index) {\n    if (index < this.values_.length) {\n      this.atom_.reportObserved();\n      return this.dehanceValue_(this.values_[index]);\n    }\n\n    console.warn( false ? undefined : "[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX");\n  };\n\n  _proto.set_ = function set_(index, newValue) {\n    var values = this.values_;\n\n    if (index < values.length) {\n      // update at index in range\n      checkIfStateModificationsAreAllowed(this.atom_);\n      var oldValue = values[index];\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: UPDATE,\n          object: this.proxy_,\n          index: index,\n          newValue: newValue\n        });\n        if (!change) return;\n        newValue = change.newValue;\n      }\n\n      newValue = this.enhancer_(newValue, oldValue);\n      var changed = newValue !== oldValue;\n\n      if (changed) {\n        values[index] = newValue;\n        this.notifyArrayChildUpdate_(index, newValue, oldValue);\n      }\n    } else if (index === values.length) {\n      // add a new item\n      this.spliceWithArray_(index, 0, [newValue]);\n    } else {\n      // out of bounds\n      die(17, index, values.length);\n    }\n  };\n\n  return ObservableArrayAdministration;\n}();\n\nfunction createObservableArray(initialValues, enhancer, name, owned) {\n  if (name === void 0) {\n    name =  false ? undefined : "ObservableArray";\n  }\n\n  if (owned === void 0) {\n    owned = false;\n  }\n\n  assertProxies();\n  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);\n  addHiddenFinalProp(adm.values_, $mobx, adm);\n  var proxy = new Proxy(adm.values_, arrayTraps);\n  adm.proxy_ = proxy;\n\n  if (initialValues && initialValues.length) {\n    var prev = allowStateChangesStart(true);\n    adm.spliceWithArray_(0, 0, initialValues);\n    allowStateChangesEnd(prev);\n  }\n\n  return proxy;\n} // eslint-disable-next-line\n\n\nvar arrayExtensions = {\n  clear: function clear() {\n    return this.splice(0);\n  },\n  replace: function replace(newItems) {\n    var adm = this[$mobx];\n    return adm.spliceWithArray_(0, adm.values_.length, newItems);\n  },\n  // Used by JSON.stringify\n  toJSON: function toJSON() {\n    return this.slice();\n  },\n\n  /*\r\n   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\r\n   * since these functions alter the inner structure of the array, the have side effects.\r\n   * Because the have side effects, they should not be used in computed function,\r\n   * and for that reason the do not call dependencyState.notifyObserved\r\n   */\n  splice: function splice(index, deleteCount) {\n    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      newItems[_key - 2] = arguments[_key];\n    }\n\n    var adm = this[$mobx];\n\n    switch (arguments.length) {\n      case 0:\n        return [];\n\n      case 1:\n        return adm.spliceWithArray_(index);\n\n      case 2:\n        return adm.spliceWithArray_(index, deleteCount);\n    }\n\n    return adm.spliceWithArray_(index, deleteCount, newItems);\n  },\n  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {\n    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);\n  },\n  push: function push() {\n    var adm = this[$mobx];\n\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    adm.spliceWithArray_(adm.values_.length, 0, items);\n    return adm.values_.length;\n  },\n  pop: function pop() {\n    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];\n  },\n  shift: function shift() {\n    return this.splice(0, 1)[0];\n  },\n  unshift: function unshift() {\n    var adm = this[$mobx];\n\n    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      items[_key3] = arguments[_key3];\n    }\n\n    adm.spliceWithArray_(0, 0, items);\n    return adm.values_.length;\n  },\n  reverse: function reverse() {\n    // reverse by default mutates in place before returning the result\n    // which makes it both a \'derivation\' and a \'mutation\'.\n    if (globalState.trackingDerivation) {\n      die(37, "reverse");\n    }\n\n    this.replace(this.slice().reverse());\n    return this;\n  },\n  sort: function sort() {\n    // sort by default mutates in place before returning the result\n    // which goes against all good practices. Let\'s not change the array in place!\n    if (globalState.trackingDerivation) {\n      die(37, "sort");\n    }\n\n    var copy = this.slice();\n    copy.sort.apply(copy, arguments);\n    this.replace(copy);\n    return this;\n  },\n  remove: function remove(value) {\n    var adm = this[$mobx];\n    var idx = adm.dehanceValues_(adm.values_).indexOf(value);\n\n    if (idx > -1) {\n      this.splice(idx, 1);\n      return true;\n    }\n\n    return false;\n  }\n};\n/**\r\n * Wrap function from prototype\r\n * Without this, everything works as well, but this works\r\n * faster as everything works on unproxied values\r\n */\n\naddArrayExtension("concat", simpleFunc);\naddArrayExtension("flat", simpleFunc);\naddArrayExtension("includes", simpleFunc);\naddArrayExtension("indexOf", simpleFunc);\naddArrayExtension("join", simpleFunc);\naddArrayExtension("lastIndexOf", simpleFunc);\naddArrayExtension("slice", simpleFunc);\naddArrayExtension("toString", simpleFunc);\naddArrayExtension("toLocaleString", simpleFunc); // map\n\naddArrayExtension("every", mapLikeFunc);\naddArrayExtension("filter", mapLikeFunc);\naddArrayExtension("find", mapLikeFunc);\naddArrayExtension("findIndex", mapLikeFunc);\naddArrayExtension("flatMap", mapLikeFunc);\naddArrayExtension("forEach", mapLikeFunc);\naddArrayExtension("map", mapLikeFunc);\naddArrayExtension("some", mapLikeFunc); // reduce\n\naddArrayExtension("reduce", reduceLikeFunc);\naddArrayExtension("reduceRight", reduceLikeFunc);\n\nfunction addArrayExtension(funcName, funcFactory) {\n  if (typeof Array.prototype[funcName] === "function") {\n    arrayExtensions[funcName] = funcFactory(funcName);\n  }\n} // Report and delegate to dehanced array\n\n\nfunction simpleFunc(funcName) {\n  return function () {\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n} // Make sure callbacks recieve correct array arg #2326\n\n\nfunction mapLikeFunc(funcName) {\n  return function (callback, thisArg) {\n    var _this2 = this;\n\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName](function (element, index) {\n      return callback.call(thisArg, element, index, _this2);\n    });\n  };\n} // Make sure callbacks recieve correct array arg #2326\n\n\nfunction reduceLikeFunc(funcName) {\n  return function () {\n    var _this3 = this;\n\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_); // #2432 - reduce behavior depends on arguments.length\n\n    var callback = arguments[0];\n\n    arguments[0] = function (accumulator, currentValue, index) {\n      return callback(accumulator, currentValue, index, _this3);\n    };\n\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\n\nvar isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);\n\nfunction isObservableArray(thing) {\n  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);\n}\n\nvar _Symbol$iterator, _Symbol$toStringTag;\n\nvar ObservableMapMarker = {};\nvar ADD = "add";\nvar DELETE = "delete"; // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\n\n_Symbol$iterator = Symbol.iterator;\n_Symbol$toStringTag = Symbol.toStringTag;\n\nvar ObservableMap = /*#__PURE__*/function () {\n  // hasMap, not hashMap >-).\n  function ObservableMap(initialData, enhancer_, name_) {\n    if (enhancer_ === void 0) {\n      enhancer_ = deepEnhancer;\n    }\n\n    if (name_ === void 0) {\n      name_ =  false ? undefined : "ObservableMap";\n    }\n\n    this.enhancer_ = void 0;\n    this.name_ = void 0;\n    this[$mobx] = ObservableMapMarker;\n    this.data_ = void 0;\n    this.hasMap_ = void 0;\n    this.keysAtom_ = void 0;\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = enhancer_;\n    this.name_ = name_;\n\n    if (!isFunction(Map)) {\n      die(18);\n    }\n\n    this.keysAtom_ = createAtom( false ? undefined : "ObservableMap.keys()");\n    this.data_ = new Map();\n    this.hasMap_ = new Map();\n    this.merge(initialData);\n  }\n\n  var _proto = ObservableMap.prototype;\n\n  _proto.has_ = function has_(key) {\n    return this.data_.has(key);\n  };\n\n  _proto.has = function has(key) {\n    var _this = this;\n\n    if (!globalState.trackingDerivation) return this.has_(key);\n    var entry = this.hasMap_.get(key);\n\n    if (!entry) {\n      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  false ? undefined : "ObservableMap.key?", false);\n      this.hasMap_.set(key, newEntry);\n      onBecomeUnobserved(newEntry, function () {\n        return _this.hasMap_["delete"](key);\n      });\n    }\n\n    return entry.get();\n  };\n\n  _proto.set = function set(key, value) {\n    var hasKey = this.has_(key);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: hasKey ? UPDATE : ADD,\n        object: this,\n        newValue: value,\n        name: key\n      });\n      if (!change) return this;\n      value = change.newValue;\n    }\n\n    if (hasKey) {\n      this.updateValue_(key, value);\n    } else {\n      this.addValue_(key, value);\n    }\n\n    return this;\n  };\n\n  _proto["delete"] = function _delete(key) {\n    var _this2 = this;\n\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        name: key\n      });\n      if (!change) return false;\n    }\n\n    if (this.has_(key)) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n\n      var _change = notify || notifySpy ? {\n        observableKind: "map",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: this.data_.get(key).value_,\n        name: key\n      } : null;\n\n      if (false) {}\n      transaction(function () {\n        _this2.keysAtom_.reportChanged();\n\n        _this2.updateHasMapEntry_(key, false);\n\n        var observable = _this2.data_.get(key);\n\n        observable.setNewValue_(undefined);\n\n        _this2.data_["delete"](key);\n      });\n      if (notify) notifyListeners(this, _change);\n      if (false) {}\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.updateHasMapEntry_ = function updateHasMapEntry_(key, value) {\n    var entry = this.hasMap_.get(key);\n\n    if (entry) {\n      entry.setNewValue_(value);\n    }\n  };\n\n  _proto.updateValue_ = function updateValue_(key, newValue) {\n    var observable = this.data_.get(key);\n    newValue = observable.prepareNewValue_(newValue);\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: "map",\n        debugObjectName: this.name_,\n        type: UPDATE,\n        object: this,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if (false) {}\n      observable.setNewValue_(newValue);\n      if (notify) notifyListeners(this, change);\n      if (false) {}\n    }\n  };\n\n  _proto.addValue_ = function addValue_(key, newValue) {\n    var _this3 = this;\n\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    transaction(function () {\n      var observable = new ObservableValue(newValue, _this3.enhancer_,  false ? undefined : "ObservableMap.key", false);\n\n      _this3.data_.set(key, observable);\n\n      newValue = observable.value_; // value might have been changed\n\n      _this3.updateHasMapEntry_(key, true);\n\n      _this3.keysAtom_.reportChanged();\n    });\n    var notifySpy = isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: "map",\n      debugObjectName: this.name_,\n      type: ADD,\n      object: this,\n      name: key,\n      newValue: newValue\n    } : null;\n    if (false) {}\n    if (notify) notifyListeners(this, change);\n    if (false) {}\n  };\n\n  _proto.get = function get(key) {\n    if (this.has(key)) return this.dehanceValue_(this.data_.get(key).get());\n    return this.dehanceValue_(undefined);\n  };\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n\n    return value;\n  };\n\n  _proto.keys = function keys() {\n    this.keysAtom_.reportObserved();\n    return this.data_.keys();\n  };\n\n  _proto.values = function values() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next = keys.next(),\n            done = _keys$next.done,\n            value = _keys$next.value;\n\n        return {\n          done: done,\n          value: done ? undefined : self.get(value)\n        };\n      }\n    });\n  };\n\n  _proto.entries = function entries() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next2 = keys.next(),\n            done = _keys$next2.done,\n            value = _keys$next2.value;\n\n        return {\n          done: done,\n          value: done ? undefined : [value, self.get(value)]\n        };\n      }\n    });\n  };\n\n  _proto[_Symbol$iterator] = function () {\n    return this.entries();\n  };\n\n  _proto.forEach = function forEach(callback, thisArg) {\n    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          key = _step$value[0],\n          value = _step$value[1];\n      callback.call(thisArg, value, key, this);\n    }\n  }\n  /** Merge another object into this object, returns this. */\n  ;\n\n  _proto.merge = function merge(other) {\n    var _this4 = this;\n\n    if (isObservableMap(other)) {\n      other = new Map(other);\n    }\n\n    transaction(function () {\n      if (isPlainObject(other)) getPlainObjectKeys(other).forEach(function (key) {\n        return _this4.set(key, other[key]);\n      });else if (Array.isArray(other)) other.forEach(function (_ref) {\n        var key = _ref[0],\n            value = _ref[1];\n        return _this4.set(key, value);\n      });else if (isES6Map(other)) {\n        if (other.constructor !== Map) die(19, other);\n        other.forEach(function (value, key) {\n          return _this4.set(key, value);\n        });\n      } else if (other !== null && other !== undefined) die(20, other);\n    });\n    return this;\n  };\n\n  _proto.clear = function clear() {\n    var _this5 = this;\n\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator2 = _createForOfIteratorHelperLoose(_this5.keys()), _step2; !(_step2 = _iterator2()).done;) {\n          var key = _step2.value;\n\n          _this5["delete"](key);\n        }\n      });\n    });\n  };\n\n  _proto.replace = function replace(values) {\n    var _this6 = this; // Implementation requirements:\n    // - respect ordering of replacement map\n    // - allow interceptors to run and potentially prevent individual operations\n    // - don\'t recreate observables that already exist in original map (so we don\'t destroy existing subscriptions)\n    // - don\'t _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n    // - note that result map may differ from replacement map due to the interceptors\n\n\n    transaction(function () {\n      // Convert to map so we can do quick key lookups\n      var replacementMap = convertToMap(values);\n      var orderedData = new Map(); // Used for optimization\n\n      var keysReportChangedCalled = false; // Delete keys that don\'t exist in replacement map\n      // if the key deletion is prevented by interceptor\n      // add entry at the beginning of the result map\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(_this6.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value; // Concurrently iterating/deleting keys\n        // iterator should handle this correctly\n\n        if (!replacementMap.has(key)) {\n          var deleted = _this6["delete"](key); // Was the key removed?\n\n\n          if (deleted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          } else {\n            // Delete prevented by interceptor\n            var value = _this6.data_.get(key);\n\n            orderedData.set(key, value);\n          }\n        }\n      } // Merge entries\n\n\n      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {\n        var _step4$value = _step4.value,\n            _key = _step4$value[0],\n            _value = _step4$value[1]; // We will want to know whether a new key is added\n\n        var keyExisted = _this6.data_.has(_key); // Add or update value\n\n\n        _this6.set(_key, _value); // The addition could have been prevent by interceptor\n\n\n        if (_this6.data_.has(_key)) {\n          // The update could have been prevented by interceptor\n          // and also we want to preserve existing values\n          // so use value from _data map (instead of replacement map)\n          var _value2 = _this6.data_.get(_key);\n\n          orderedData.set(_key, _value2); // Was a new key added?\n\n          if (!keyExisted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          }\n        }\n      } // Check for possible key order change\n\n\n      if (!keysReportChangedCalled) {\n        if (_this6.data_.size !== orderedData.size) {\n          // If size differs, keys are definitely modified\n          _this6.keysAtom_.reportChanged();\n        } else {\n          var iter1 = _this6.data_.keys();\n\n          var iter2 = orderedData.keys();\n          var next1 = iter1.next();\n          var next2 = iter2.next();\n\n          while (!next1.done) {\n            if (next1.value !== next2.value) {\n              _this6.keysAtom_.reportChanged();\n\n              break;\n            }\n\n            next1 = iter1.next();\n            next2 = iter2.next();\n          }\n        }\n      } // Use correctly ordered map\n\n\n      _this6.data_ = orderedData;\n    });\n    return this;\n  };\n\n  _proto.toString = function toString() {\n    return "[object ObservableMap]";\n  };\n\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n  /**\r\n   * Observes this object. Triggers for the events \'add\', \'update\' and \'delete\'.\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n   * for callback details\r\n   */\n\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (false) {}\n    return registerListener(this, listener);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _createClass(ObservableMap, [{\n    key: "size",\n    get: function get() {\n      this.keysAtom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return "Map";\n    }\n  }]);\n\n  return ObservableMap;\n}(); // eslint-disable-next-line\n\n\nvar isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);\n\nfunction convertToMap(dataStructure) {\n  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n    return dataStructure;\n  } else if (Array.isArray(dataStructure)) {\n    return new Map(dataStructure);\n  } else if (isPlainObject(dataStructure)) {\n    var map = new Map();\n\n    for (var key in dataStructure) {\n      map.set(key, dataStructure[key]);\n    }\n\n    return map;\n  } else {\n    return die(21, dataStructure);\n  }\n}\n\nvar _Symbol$iterator$1, _Symbol$toStringTag$1;\n\nvar ObservableSetMarker = {};\n_Symbol$iterator$1 = Symbol.iterator;\n_Symbol$toStringTag$1 = Symbol.toStringTag;\n\nvar ObservableSet = /*#__PURE__*/function () {\n  function ObservableSet(initialData, enhancer, name_) {\n    if (enhancer === void 0) {\n      enhancer = deepEnhancer;\n    }\n\n    if (name_ === void 0) {\n      name_ =  false ? undefined : "ObservableSet";\n    }\n\n    this.name_ = void 0;\n    this[$mobx] = ObservableSetMarker;\n    this.data_ = new Set();\n    this.atom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = void 0;\n    this.name_ = name_;\n\n    if (!isFunction(Set)) {\n      die(22);\n    }\n\n    this.atom_ = createAtom(this.name_);\n\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV, name_);\n    };\n\n    if (initialData) {\n      this.replace(initialData);\n    }\n  }\n\n  var _proto = ObservableSet.prototype;\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n\n    return value;\n  };\n\n  _proto.clear = function clear() {\n    var _this = this;\n\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {\n          var value = _step.value;\n\n          _this["delete"](value);\n        }\n      });\n    });\n  };\n\n  _proto.forEach = function forEach(callbackFn, thisArg) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {\n      var value = _step2.value;\n      callbackFn.call(thisArg, value, value, this);\n    }\n  };\n\n  _proto.add = function add(value) {\n    var _this2 = this;\n\n    checkIfStateModificationsAreAllowed(this.atom_);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: ADD,\n        object: this,\n        newValue: value\n      });\n      if (!change) return this; // ideally, value = change.value would be done here, so that values can be\n      // changed by interceptor. Same applies for other Set and Map api\'s.\n    }\n\n    if (!this.has(value)) {\n      transaction(function () {\n        _this2.data_.add(_this2.enhancer_(value, undefined));\n\n        _this2.atom_.reportChanged();\n      });\n      var notifySpy =  false && false;\n      var notify = hasListeners(this);\n\n      var _change = notify || notifySpy ? {\n        observableKind: "set",\n        debugObjectName: this.name_,\n        type: ADD,\n        object: this,\n        newValue: value\n      } : null;\n\n      if (notifySpy && "production" !== "production") spyReportStart(_change);\n      if (notify) notifyListeners(this, _change);\n      if (notifySpy && "production" !== "production") spyReportEnd();\n    }\n\n    return this;\n  };\n\n  _proto["delete"] = function _delete(value) {\n    var _this3 = this;\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        oldValue: value\n      });\n      if (!change) return false;\n    }\n\n    if (this.has(value)) {\n      var notifySpy =  false && false;\n      var notify = hasListeners(this);\n\n      var _change2 = notify || notifySpy ? {\n        observableKind: "set",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: value\n      } : null;\n\n      if (notifySpy && "production" !== "production") spyReportStart(_change2);\n      transaction(function () {\n        _this3.atom_.reportChanged();\n\n        _this3.data_["delete"](value);\n      });\n      if (notify) notifyListeners(this, _change2);\n      if (notifySpy && "production" !== "production") spyReportEnd();\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.has = function has(value) {\n    this.atom_.reportObserved();\n    return this.data_.has(this.dehanceValue_(value));\n  };\n\n  _proto.entries = function entries() {\n    var nextIndex = 0;\n    var keys = Array.from(this.keys());\n    var values = Array.from(this.values());\n    return makeIterable({\n      next: function next() {\n        var index = nextIndex;\n        nextIndex += 1;\n        return index < values.length ? {\n          value: [keys[index], values[index]],\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n\n  _proto.keys = function keys() {\n    return this.values();\n  };\n\n  _proto.values = function values() {\n    this.atom_.reportObserved();\n    var self = this;\n    var nextIndex = 0;\n    var observableValues = Array.from(this.data_.values());\n    return makeIterable({\n      next: function next() {\n        return nextIndex < observableValues.length ? {\n          value: self.dehanceValue_(observableValues[nextIndex++]),\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n\n  _proto.replace = function replace(other) {\n    var _this4 = this;\n\n    if (isObservableSet(other)) {\n      other = new Set(other);\n    }\n\n    transaction(function () {\n      if (Array.isArray(other)) {\n        _this4.clear();\n\n        other.forEach(function (value) {\n          return _this4.add(value);\n        });\n      } else if (isES6Set(other)) {\n        _this4.clear();\n\n        other.forEach(function (value) {\n          return _this4.add(value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die("Cannot initialize set from " + other);\n      }\n    });\n    return this;\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    // ... \'fireImmediately\' could also be true?\n    if (false) {}\n    return registerListener(this, listener);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n\n  _proto.toString = function toString() {\n    return "[object ObservableSet]";\n  };\n\n  _proto[_Symbol$iterator$1] = function () {\n    return this.values();\n  };\n\n  _createClass(ObservableSet, [{\n    key: "size",\n    get: function get() {\n      this.atom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag$1,\n    get: function get() {\n      return "Set";\n    }\n  }]);\n\n  return ObservableSet;\n}(); // eslint-disable-next-line\n\n\nvar isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);\nvar inferredAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-inferred-annotations");\nvar descriptorCache = /*#__PURE__*/Object.create(null);\nvar REMOVE = "remove";\n\nvar ObservableObjectAdministration = /*#__PURE__*/function () {\n  function ObservableObjectAdministration(target_, values_, name_, // Used anytime annotation is not explicitely provided\n  defaultAnnotation_, // Bind automatically inferred actions?\n  autoBind_) {\n    if (values_ === void 0) {\n      values_ = new Map();\n    }\n\n    if (defaultAnnotation_ === void 0) {\n      defaultAnnotation_ = observable;\n    }\n\n    if (autoBind_ === void 0) {\n      autoBind_ = false;\n    }\n\n    this.target_ = void 0;\n    this.values_ = void 0;\n    this.name_ = void 0;\n    this.defaultAnnotation_ = void 0;\n    this.autoBind_ = void 0;\n    this.keysAtom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.proxy_ = void 0;\n    this.isPlainObject_ = void 0;\n    this.appliedAnnotations_ = void 0;\n    this.pendingKeys_ = void 0;\n    this.target_ = target_;\n    this.values_ = values_;\n    this.name_ = name_;\n    this.defaultAnnotation_ = defaultAnnotation_;\n    this.autoBind_ = autoBind_;\n    this.keysAtom_ = new Atom( false ? undefined : "ObservableObject.keys"); // Optimization: we use this frequently\n\n    this.isPlainObject_ = isPlainObject(this.target_);\n\n    if (false) {}\n\n    if (false) {}\n\n    if (false) {}\n  }\n\n  var _proto = ObservableObjectAdministration.prototype;\n\n  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {\n    return this.values_.get(key).get();\n  };\n\n  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {\n    var observable = this.values_.get(key);\n\n    if (observable instanceof ComputedValue) {\n      observable.set(newValue);\n      return true;\n    } // intercept\n\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: UPDATE,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: newValue\n      });\n      if (!change) return null;\n      newValue = change.newValue;\n    }\n\n    newValue = observable.prepareNewValue_(newValue); // notify spy & observers\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notify = hasListeners(this);\n      var notifySpy =  false && false;\n\n      var _change = notify || notifySpy ? {\n        type: UPDATE,\n        observableKind: "object",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n\n      if (false) {}\n      observable.setNewValue_(newValue);\n      if (notify) notifyListeners(this, _change);\n      if (false) {}\n    }\n\n    return true;\n  };\n\n  _proto.get_ = function get_(key) {\n    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n      // Key doesn\'t exist yet, subscribe for it in case it\'s added later\n      this.has_(key);\n    }\n\n    return this.target_[key];\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {any} value\r\n   * @param {Annotation|boolean} annotation true - infer from descriptor, false - copy as is\r\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.set_ = function set_(key, value, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    } // Don\'t use .has(key) - we care about own\n\n\n    if (hasProp(this.target_, key)) {\n      // Existing prop\n      if (this.values_.has(key)) {\n        // Observable (can be intercepted)\n        return this.setObservablePropValue_(key, value);\n      } else if (proxyTrap) {\n        // Non-observable - proxy\n        return Reflect.set(this.target_, key, value);\n      } else {\n        // Non-observable\n        this.target_[key] = value;\n        return true;\n      }\n    } else {\n      // New prop\n      return this.extend_(key, {\n        value: value,\n        enumerable: true,\n        writable: true,\n        configurable: true\n      }, this.defaultAnnotation_, proxyTrap);\n    }\n  } // Trap for "in"\n  ;\n\n  _proto.has_ = function has_(key) {\n    if (!globalState.trackingDerivation) {\n      // Skip key subscription outside derivation\n      return key in this.target_;\n    }\n\n    this.pendingKeys_ || (this.pendingKeys_ = new Map());\n    var entry = this.pendingKeys_.get(key);\n\n    if (!entry) {\n      entry = new ObservableValue(key in this.target_, referenceEnhancer,  false ? undefined : "ObservableObject.key?", false);\n      this.pendingKeys_.set(key, entry);\n    }\n\n    return entry.get();\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {Annotation|boolean} annotation true - infer from object or it\'s prototype, false - ignore\r\n   */\n  ;\n\n  _proto.make_ = function make_(key, annotation) {\n    if (annotation === true) {\n      annotation = this.inferAnnotation_(key);\n    }\n\n    if (annotation === false) {\n      return;\n    }\n\n    assertAnnotable(this, annotation, key);\n    annotation.make_(this, key);\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {Annotation|boolean} annotation true - infer from descriptor, false - copy as is\r\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    if (annotation === true) {\n      annotation = inferAnnotationFromDescriptor(descriptor, this.defaultAnnotation_, this.autoBind_);\n    }\n\n    if (annotation === false) {\n      return this.defineProperty_(key, descriptor, proxyTrap);\n    }\n\n    assertAnnotable(this, annotation, key);\n    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);\n\n    if (outcome) {\n      recordAnnotationApplied(this, annotation, key);\n    }\n\n    return outcome;\n  };\n\n  _proto.inferAnnotation_ = function inferAnnotation_(key) {\n    var _this$target_$inferre; // Inherited is fine - annotation cannot differ in subclass\n\n\n    var annotation = (_this$target_$inferre = this.target_[inferredAnnotationsSymbol]) == null ? void 0 : _this$target_$inferre.get(key);\n    if (annotation) return annotation;\n    var current = this.target_;\n\n    while (current && current !== objectPrototype) {\n      var descriptor = getDescriptor(current, key);\n\n      if (descriptor) {\n        annotation = inferAnnotationFromDescriptor(descriptor, this.defaultAnnotation_, this.autoBind_);\n        break;\n      }\n\n      current = Object.getPrototypeOf(current);\n    } // Not found (false means ignore)\n\n\n    if (annotation === undefined) {\n      die(1, "true", key);\n    } // Cache the annotation.\n    // Note we can do this only because annotation and field can\'t change.\n\n\n    if (!this.isPlainObject_) {\n      // We could also place it on furthest proto, shoudn\'t matter\n      var closestProto = Object.getPrototypeOf(this.target_);\n\n      if (!hasProp(closestProto, inferredAnnotationsSymbol)) {\n        addHiddenProp(closestProto, inferredAnnotationsSymbol, new Map());\n      }\n\n      closestProto[inferredAnnotationsSymbol].set(key, annotation);\n    }\n\n    return annotation;\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: descriptor.value\n        });\n        if (!change) return null;\n        var newValue = change.newValue;\n\n        if (descriptor.value !== newValue) {\n          descriptor = _extends({}, descriptor, {\n            value: newValue\n          });\n        }\n      } // Define\n\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      } // Notify\n\n\n      this.notifyPropertyAddition_(key, descriptor.value);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  } // If original descriptor becomes relevant, move this to annotation directly\n  ;\n\n  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: value\n        });\n        if (!change) return null;\n        value = change.newValue;\n      }\n\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: true,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      }; // Define\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n\n      var _observable = new ObservableValue(value, enhancer,  false ? undefined : "ObservableObject.key", false);\n\n      this.values_.set(key, _observable); // Notify (value possibly changed by ObservableValue)\n\n      this.notifyPropertyAddition_(key, _observable.value_);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  } // If original descriptor becomes relevant, move this to annotation directly\n  ;\n\n  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: undefined\n        });\n        if (!change) return null;\n      }\n\n      options.name || (options.name =  false ? undefined : "ObservableObject.key");\n      options.context = this.proxy_ || this.target_;\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: false,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      }; // Define\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n\n      this.values_.set(key, new ComputedValue(options)); // Notify\n\n      this.notifyPropertyAddition_(key, undefined);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {boolean} proxyTrap whether it\'s called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.delete_ = function delete_(key, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    } // No such prop\n\n\n    if (!hasProp(this.target_, key)) {\n      return true;\n    } // Intercept\n\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_ || this.target_,\n        name: key,\n        type: REMOVE\n      }); // Cancelled\n\n      if (!change) return null;\n    } // Delete\n\n\n    try {\n      var _this$pendingKeys_, _this$pendingKeys_$ge;\n\n      startBatch();\n      var notify = hasListeners(this);\n      var notifySpy =  false && false;\n\n      var _observable2 = this.values_.get(key); // Value needed for spies/listeners\n\n\n      var value = undefined; // Optimization: don\'t pull the value unless we will need it\n\n      if (!_observable2 && (notify || notifySpy)) {\n        var _getDescriptor;\n\n        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;\n      } // delete prop (do first, may fail)\n\n\n      if (proxyTrap) {\n        if (!Reflect.deleteProperty(this.target_, key)) {\n          return false;\n        }\n      } else {\n        delete this.target_[key];\n      } // Allow re-annotating this field\n\n\n      if (false) {} // Clear observable\n\n\n      if (_observable2) {\n        this.values_["delete"](key); // for computed, value is undefined\n\n        if (_observable2 instanceof ObservableValue) {\n          value = _observable2.value_;\n        } // Notify: autorun(() => obj[key]), see #1796\n\n\n        propagateChanged(_observable2);\n      } // Notify "keys/entries/values" observers\n\n\n      this.keysAtom_.reportChanged(); // Notify "has" observers\n      // "in" as it may still exist in proto\n\n      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_); // Notify spies/listeners\n\n      if (notify || notifySpy) {\n        var _change2 = {\n          type: REMOVE,\n          observableKind: "object",\n          object: this.proxy_ || this.target_,\n          debugObjectName: this.name_,\n          oldValue: value,\n          name: key\n        };\n        if (false) {}\n        if (notify) notifyListeners(this, _change2);\n        if (false) {}\n      }\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  }\n  /**\r\n   * Observes this object. Triggers for the events \'add\', \'update\' and \'delete\'.\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n   * for callback details\r\n   */\n  ;\n\n  _proto.observe_ = function observe_(callback, fireImmediately) {\n    if (false) {}\n    return registerListener(this, callback);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {\n    var _this$pendingKeys_2, _this$pendingKeys_2$g;\n\n    var notify = hasListeners(this);\n    var notifySpy =  false && false;\n\n    if (notify || notifySpy) {\n      var change = notify || notifySpy ? {\n        type: ADD,\n        observableKind: "object",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: value\n      } : null;\n      if (false) {}\n      if (notify) notifyListeners(this, change);\n      if (false) {}\n    }\n\n    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true); // Notify "keys/entries/values" observers\n\n    this.keysAtom_.reportChanged();\n  };\n\n  _proto.ownKeys_ = function ownKeys_() {\n    this.keysAtom_.reportObserved();\n    return ownKeys(this.target_);\n  };\n\n  _proto.keys_ = function keys_() {\n    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n    // We choose to over-report in Object.keys(object), because:\n    // - typically it\'s used with simple data objects\n    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n    this.keysAtom_.reportObserved();\n    return Object.keys(this.target_);\n  };\n\n  return ObservableObjectAdministration;\n}();\n\nfunction asObservableObject(target, options) {\n  var _options$name;\n\n  if (false) {}\n\n  if (hasProp(target, $mobx)) {\n    if (false) {}\n\n    return target;\n  }\n\n  if (false) {}\n  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  false ? undefined : "ObservableObject";\n  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options), options == null ? void 0 : options.autoBind);\n  addHiddenProp(target, $mobx, adm);\n  return target;\n}\n\nvar isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);\n\nfunction getCachedObservablePropDescriptor(key) {\n  return descriptorCache[key] || (descriptorCache[key] = {\n    get: function get() {\n      return this[$mobx].getObservablePropValue_(key);\n    },\n    set: function set(value) {\n      return this[$mobx].setObservablePropValue_(key, value);\n    }\n  });\n}\n\nfunction isObservableObject(thing) {\n  if (isObject(thing)) {\n    return isObservableObjectAdministration(thing[$mobx]);\n  }\n\n  return false;\n}\n\nfunction recordAnnotationApplied(adm, annotation, key) {\n  var _adm$target_$storedAn;\n\n  if (false) {} // Remove applied decorator annotation so we don\'t try to apply it again in subclass constructor\n\n\n  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];\n}\n\nfunction assertAnnotable(adm, annotation, key) {\n  // Valid annotation\n  if (false) {}\n  /*\r\n  // Configurable, not sealed, not frozen\r\n  // Possibly not needed, just a little better error then the one thrown by engine.\r\n  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\r\n  if (__DEV__) {\r\n      const configurable = getDescriptor(adm.target_, key)?.configurable\r\n      const frozen = Object.isFrozen(adm.target_)\r\n      const sealed = Object.isSealed(adm.target_)\r\n      if (!configurable || frozen || sealed) {\r\n          const fieldName = `${adm.name_}.${key.toString()}`\r\n          const requestedAnnotationType = annotation.annotationType_\r\n          let error = `Cannot apply \'${requestedAnnotationType}\' to \'${fieldName}\':`\r\n          if (frozen) {\r\n              error += `\\nObject is frozen.`\r\n          }\r\n          if (sealed) {\r\n              error += `\\nObject is sealed.`\r\n          }\r\n          if (!configurable) {\r\n              error += `\\nproperty is not configurable.`\r\n              // Mention only if caused by us to avoid confusion\r\n              if (hasProp(adm.appliedAnnotations!, key)) {\r\n                  error += `\\nTo prevent accidental re-definition of a field by a subclass, `\r\n                  error += `all annotated fields of non-plain objects (classes) are not configurable.`\r\n              }\r\n          }\r\n          die(error)\r\n      }\r\n  }\r\n  */\n  // Not annotated\n\n\n  if (false) { var requestedAnnotationType, currentAnnotationType, fieldName; }\n}\n/**\r\n * This array buffer contains two lists of properties, so that all arrays\r\n * can recycle their property definitions, which significantly improves performance of creating\r\n * properties on the fly.\r\n */\n\n\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0; // Typescript workaround to make sure ObservableArray extends Array\n\nvar StubArray = function StubArray() {};\n\nfunction inherit(ctor, proto) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ctor.prototype, proto);\n  } else if (ctor.prototype.__proto__ !== undefined) {\n    ctor.prototype.__proto__ = proto;\n  } else {\n    ctor.prototype = proto;\n  }\n}\n\ninherit(StubArray, Array.prototype); // Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\n\nvar LegacyObservableArray = /*#__PURE__*/function (_StubArray) {\n  _inheritsLoose(LegacyObservableArray, _StubArray);\n\n  function LegacyObservableArray(initialValues, enhancer, name, owned) {\n    var _this;\n\n    if (name === void 0) {\n      name =  false ? undefined : "ObservableArray";\n    }\n\n    if (owned === void 0) {\n      owned = false;\n    }\n\n    _this = _StubArray.call(this) || this;\n    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);\n    adm.proxy_ = _assertThisInitialized(_this);\n    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);\n\n    if (initialValues && initialValues.length) {\n      var prev = allowStateChangesStart(true); // @ts-ignore\n\n      _this.spliceWithArray(0, 0, initialValues);\n\n      allowStateChangesEnd(prev);\n    }\n\n    return _this;\n  }\n\n  var _proto = LegacyObservableArray.prototype;\n\n  _proto.concat = function concat() {\n    this[$mobx].atom_.reportObserved();\n\n    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n      arrays[_key] = arguments[_key];\n    }\n\n    return Array.prototype.concat.apply(this.slice(), //@ts-ignore\n    arrays.map(function (a) {\n      return isObservableArray(a) ? a.slice() : a;\n    }));\n  };\n\n  _proto[Symbol.iterator] = function () {\n    var self = this;\n    var nextIndex = 0;\n    return makeIterable({\n      next: function next() {\n        // @ts-ignore\n        return nextIndex < self.length ? {\n          value: self[nextIndex++],\n          done: false\n        } : {\n          done: true,\n          value: undefined\n        };\n      }\n    });\n  };\n\n  _createClass(LegacyObservableArray, [{\n    key: "length",\n    get: function get() {\n      return this[$mobx].getArrayLength_();\n    },\n    set: function set(newLength) {\n      this[$mobx].setArrayLength_(newLength);\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return "Array";\n    }\n  }]);\n\n  return LegacyObservableArray;\n}(StubArray);\n\nObject.entries(arrayExtensions).forEach(function (_ref) {\n  var prop = _ref[0],\n      fn = _ref[1];\n  if (prop !== "concat") addHiddenProp(LegacyObservableArray.prototype, prop, fn);\n});\n\nfunction createArrayEntryDescriptor(index) {\n  return {\n    enumerable: false,\n    configurable: true,\n    get: function get() {\n      return this[$mobx].get_(index);\n    },\n    set: function set(value) {\n      this[$mobx].set_(index, value);\n    }\n  };\n}\n\nfunction createArrayBufferItem(index) {\n  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));\n}\n\nfunction reserveArrayBuffer(max) {\n  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n      createArrayBufferItem(index);\n    }\n\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n  }\n}\n\nreserveArrayBuffer(1000);\n\nfunction createLegacyArray(initialValues, enhancer, name) {\n  return new LegacyObservableArray(initialValues, enhancer, name);\n}\n\nfunction getAtom(thing, property) {\n  if (typeof thing === "object" && thing !== null) {\n    if (isObservableArray(thing)) {\n      if (property !== undefined) die(23);\n      return thing[$mobx].atom_;\n    }\n\n    if (isObservableSet(thing)) {\n      return thing[$mobx];\n    }\n\n    if (isObservableMap(thing)) {\n      if (property === undefined) return thing.keysAtom_;\n      var observable = thing.data_.get(property) || thing.hasMap_.get(property);\n      if (!observable) die(25, property, getDebugName(thing));\n      return observable;\n    }\n\n    if (isObservableObject(thing)) {\n      if (!property) return die(26);\n\n      var _observable = thing[$mobx].values_.get(property);\n\n      if (!_observable) die(27, property, getDebugName(thing));\n      return _observable;\n    }\n\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n      return thing;\n    }\n  } else if (isFunction(thing)) {\n    if (isReaction(thing[$mobx])) {\n      // disposer function\n      return thing[$mobx];\n    }\n  }\n\n  die(28);\n}\n\nfunction getAdministration(thing, property) {\n  if (!thing) die(29);\n  if (property !== undefined) return getAdministration(getAtom(thing, property));\n  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;\n  if (isObservableMap(thing) || isObservableSet(thing)) return thing;\n  if (thing[$mobx]) return thing[$mobx];\n  die(24, thing);\n}\n\nfunction getDebugName(thing, property) {\n  var named;\n\n  if (property !== undefined) {\n    named = getAtom(thing, property);\n  } else if (isAction(thing)) {\n    return thing.name;\n  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n    named = getAdministration(thing);\n  } else {\n    // valid for arrays as well\n    named = getAtom(thing);\n  }\n\n  return named.name_;\n}\n\nvar toString = objectPrototype.toString;\n\nfunction deepEqual(a, b, depth) {\n  if (depth === void 0) {\n    depth = -1;\n  }\n\n  return eq(a, b, depth);\n} // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\n\n\nfunction eq(a, b, depth, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren\'t identical.\n  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n  if (a !== a) return b !== b; // Exhaust primitive checks\n\n  var type = typeof a;\n  if (!isFunction(type) && type !== "object" && typeof b != "object") return false; // Compare `[[Class]]` names.\n\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n\n  switch (className) {\n    // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n    case "[object RegExp]": // RegExps are coerced to strings for comparison (Note: \'\' + /a/i === \'/a/i\')\n\n    case "[object String]":\n      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is\n      // equivalent to `new String("5")`.\n      return "" + a === "" + b;\n\n    case "[object Number]":\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n    case "[object Date]":\n    case "[object Boolean]":\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n\n    case "[object Symbol]":\n      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);\n\n    case "[object Map]":\n    case "[object Set]":\n      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n      // Hide this extra level by increasing the depth.\n      if (depth >= 0) {\n        depth++;\n      }\n\n      break;\n  } // Unwrap any wrapped objects.\n\n\n  a = unwrap(a);\n  b = unwrap(b);\n  var areArrays = className === "[object Array]";\n\n  if (!areArrays) {\n    if (typeof a != "object" || typeof b != "object") return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n\n    var aCtor = a.constructor,\n        bCtor = b.constructor;\n\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {\n      return false;\n    }\n  }\n\n  if (depth === 0) {\n    return false;\n  } else if (depth < 0) {\n    depth = -1;\n  } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It\'s done here since we only need them for objects and arrays comparison.\n\n\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  } // Add the first object to the stack of traversed objects.\n\n\n  aStack.push(a);\n  bStack.push(b); // Recursively compare objects and arrays.\n\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n    while (length--) {\n      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var keys = Object.keys(a);\n    var key;\n    length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n    if (Object.keys(b).length !== length) return false;\n\n    while (length--) {\n      // Deep compare each member\n      key = keys[length];\n      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) return false;\n    }\n  } // Remove the first object from the stack of traversed objects.\n\n\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\nfunction unwrap(a) {\n  if (isObservableArray(a)) return a.slice();\n  if (isES6Map(a) || isObservableMap(a)) return Array.from(a.entries());\n  if (isES6Set(a) || isObservableSet(a)) return Array.from(a.entries());\n  return a;\n}\n\nfunction makeIterable(iterator) {\n  iterator[Symbol.iterator] = getSelf;\n  return iterator;\n}\n\nfunction getSelf() {\n  return this;\n}\n/**\r\n * Infers the best fitting annotation from property descriptor or false if the field shoudn\'t be annotated\r\n * - getter(+setter) -> computed\r\n * - setter w/o getter -> false (ignore)\r\n * - flow -> false (ignore)\r\n * - generator -> flow\r\n * - action -> false (ignore)\r\n * - function -> action (optionally bound)\r\n * - other -> defaultAnnotation\r\n */\n\n\nfunction inferAnnotationFromDescriptor(desc, defaultAnnotation, autoBind) {\n  if (desc.get) return computed;\n  if (desc.set) return false; // ignore lone setter\n  // If already wrapped in action/flow, don\'t do that another time, but assume it is already set up properly.\n\n  return isFunction(desc.value) ? isGenerator(desc.value) ? isFlow(desc.value) ? false : flow : isAction(desc.value) ? false : autoBind ? autoAction.bound : autoAction : defaultAnnotation;\n}\n\nfunction isAnnotation(thing) {\n  return (// Can be function\n    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)\n  );\n}\n/**\r\n * (c) Michel Weststrate 2015 - 2020\r\n * MIT Licensed\r\n *\r\n * Welcome to the mobx sources! To get an global overview of how MobX internally works,\r\n * this is a good place to start:\r\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\r\n *\r\n * Source folders:\r\n * ===============\r\n *\r\n * - api/     Most of the public static methods exposed by the module can be found here.\r\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\r\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\r\n * - utils/   Utility stuff.\r\n *\r\n */\n\n\n["Symbol", "Map", "Set", "Symbol"].forEach(function (m) {\n  var g = getGlobal();\n\n  if (typeof g[m] === "undefined") {\n    die("MobX requires global \'" + m + "\' to be available or polyfilled");\n  }\n});\n\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {\n  // See: https://github.com/andykog/mobx-devtools/\n  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n    spy: spy,\n    extras: {\n      getDebugName: getDebugName\n    },\n    $mobx: $mobx\n  });\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(19)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMudHMiLCIuLi8uLi9zcmMvdXRpbHMvZ2xvYmFsLnRzIiwiLi4vLi4vc3JjL3V0aWxzL3V0aWxzLnRzIiwiLi4vLi4vc3JjL2FwaS9kZWNvcmF0b3JzLnRzIiwiLi4vLi4vc3JjL2NvcmUvYXRvbS50cyIsIi4uLy4uL3NyYy91dGlscy9jb21wYXJlci50cyIsIi4uLy4uL3NyYy90eXBlcy9tb2RpZmllcnMudHMiLCIuLi8uLi9zcmMvdHlwZXMvb3ZlcnJpZGVhbm5vdGF0aW9uLnRzIiwiLi4vLi4vc3JjL3R5cGVzL2FjdGlvbmFubm90YXRpb24udHMiLCIuLi8uLi9zcmMvdHlwZXMvZmxvd2Fubm90YXRpb24udHMiLCIuLi8uLi9zcmMvdHlwZXMvY29tcHV0ZWRhbm5vdGF0aW9uLnRzIiwiLi4vLi4vc3JjL3R5cGVzL29ic2VydmFibGVhbm5vdGF0aW9uLnRzIiwiLi4vLi4vc3JjL2FwaS9vYnNlcnZhYmxlLnRzIiwiLi4vLi4vc3JjL2FwaS9jb21wdXRlZC50cyIsIi4uLy4uL3NyYy9jb3JlL2FjdGlvbi50cyIsIi4uLy4uL3NyYy90eXBlcy9vYnNlcnZhYmxldmFsdWUudHMiLCIuLi8uLi9zcmMvY29yZS9jb21wdXRlZHZhbHVlLnRzIiwiLi4vLi4vc3JjL2NvcmUvZGVyaXZhdGlvbi50cyIsIi4uLy4uL3NyYy9jb3JlL2dsb2JhbHN0YXRlLnRzIiwiLi4vLi4vc3JjL2NvcmUvb2JzZXJ2YWJsZS50cyIsIi4uLy4uL3NyYy9jb3JlL3JlYWN0aW9uLnRzIiwiLi4vLi4vc3JjL2NvcmUvc3B5LnRzIiwiLi4vLi4vc3JjL2FwaS9hY3Rpb24udHMiLCIuLi8uLi9zcmMvYXBpL2F1dG9ydW4udHMiLCIuLi8uLi9zcmMvYXBpL2JlY29tZS1vYnNlcnZlZC50cyIsIi4uLy4uL3NyYy9hcGkvY29uZmlndXJlLnRzIiwiLi4vLi4vc3JjL2FwaS9leHRlbmRvYnNlcnZhYmxlLnRzIiwiLi4vLi4vc3JjL2FwaS9leHRyYXMudHMiLCIuLi8uLi9zcmMvYXBpL2Zsb3cudHMiLCIuLi8uLi9zcmMvYXBpL2ludGVyY2VwdC1yZWFkLnRzIiwiLi4vLi4vc3JjL2FwaS9pbnRlcmNlcHQudHMiLCIuLi8uLi9zcmMvYXBpL2lzY29tcHV0ZWQudHMiLCIuLi8uLi9zcmMvYXBpL2lzb2JzZXJ2YWJsZS50cyIsIi4uLy4uL3NyYy9hcGkvb2JqZWN0LWFwaS50cyIsIi4uLy4uL3NyYy9hcGkvb2JzZXJ2ZS50cyIsIi4uLy4uL3NyYy9hcGkvdG9qcy50cyIsIi4uLy4uL3NyYy9hcGkvdHJhY2UudHMiLCIuLi8uLi9zcmMvYXBpL3RyYW5zYWN0aW9uLnRzIiwiLi4vLi4vc3JjL2FwaS93aGVuLnRzIiwiLi4vLi4vc3JjL3R5cGVzL2R5bmFtaWNvYmplY3QudHMiLCIuLi8uLi9zcmMvdHlwZXMvaW50ZXJjZXB0LXV0aWxzLnRzIiwiLi4vLi4vc3JjL3R5cGVzL2xpc3Rlbi11dGlscy50cyIsIi4uLy4uL3NyYy9hcGkvbWFrZU9ic2VydmFibGUudHMiLCIuLi8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZWFycmF5LnRzIiwiLi4vLi4vc3JjL3R5cGVzL29ic2VydmFibGVtYXAudHMiLCIuLi8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZXNldC50cyIsIi4uLy4uL3NyYy90eXBlcy9vYnNlcnZhYmxlb2JqZWN0LnRzIiwiLi4vLi4vc3JjL3R5cGVzL2xlZ2FjeW9ic2VydmFibGVhcnJheS50cyIsIi4uLy4uL3NyYy90eXBlcy90eXBlLXV0aWxzLnRzIiwiLi4vLi4vc3JjL3V0aWxzL2VxLnRzIiwiLi4vLi4vc3JjL3V0aWxzL2l0ZXJhYmxlLnRzIiwiLi4vLi4vc3JjL2FwaS9hbm5vdGF0aW9uLnRzIiwiLi4vLi4vc3JjL21vYngudHMiXSwibmFtZXMiOlsibmljZUVycm9ycyIsImtleSIsIm90aGVyIiwicHJvcGVydHkiLCJlcnJvcnMiLCJkaWUiLCJlcnJvciIsImFyZ3MiLCJtb2NrR2xvYmFsIiwiZ2V0R2xvYmFsIiwiYXNzaWduIiwiT2JqZWN0IiwiZ2V0RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5Iiwib2JqZWN0UHJvdG90eXBlIiwiRU1QVFlfQVJSQVkiLCJFTVBUWV9PQkpFQ1QiLCJoYXNQcm94eSIsInBsYWluT2JqZWN0U3RyaW5nIiwiYXNzZXJ0UHJveGllcyIsIndhcm5BYm91dFByb3h5UmVxdWlyZW1lbnQiLCJtc2ciLCJnZXROZXh0SWQiLCJnbG9iYWxTdGF0ZSIsIm9uY2UiLCJmdW5jIiwiaW52b2tlZCIsIm5vb3AiLCJpc0Z1bmN0aW9uIiwiZm4iLCJpc1N0cmluZ2lzaCIsInZhbHVlIiwidCIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiaXNHZW5lcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsImFkZEhpZGRlblByb3AiLCJvYmplY3QiLCJwcm9wTmFtZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImFkZEhpZGRlbkZpbmFsUHJvcCIsImNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUiLCJuYW1lIiwidGhlQ2xhc3MiLCJ4IiwiaXNFUzZNYXAiLCJ0aGluZyIsImlzRVM2U2V0IiwiaGFzR2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0UGxhaW5PYmplY3RLZXlzIiwia2V5cyIsInN5bWJvbHMiLCJvd25LZXlzIiwiUmVmbGVjdCIsInN0cmluZ2lmeUtleSIsInRvUHJpbWl0aXZlIiwiaGFzUHJvcCIsInRhcmdldCIsInByb3AiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVzIiwic3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wiLCJTeW1ib2wiLCJjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uIiwiYW5ub3RhdGlvbiIsInN0b3JlQW5ub3RhdGlvbiIsInByb3RvdHlwZSIsImFzc2VydE5vdERlY29yYXRlZCIsImlzT3ZlcnJpZGUiLCJjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnMiLCIkbW9ieCIsIkF0b20iLCJuYW1lXyIsImlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fIiwiaXNCZWluZ09ic2VydmVkXyIsIm9ic2VydmVyc18iLCJkaWZmVmFsdWVfIiwibGFzdEFjY2Vzc2VkQnlfIiwibG93ZXN0T2JzZXJ2ZXJTdGF0ZV8iLCJJRGVyaXZhdGlvblN0YXRlXyIsIk5PVF9UUkFDS0lOR18iLCJvbkJPTCIsIm9uQlVPTCIsIm9uQk8iLCJsaXN0ZW5lciIsIm9uQlVPIiwicmVwb3J0T2JzZXJ2ZWQiLCJyZXBvcnRDaGFuZ2VkIiwic3RhcnRCYXRjaCIsInByb3BhZ2F0ZUNoYW5nZWQiLCJlbmRCYXRjaCIsInRvU3RyaW5nIiwiaXNBdG9tIiwiY3JlYXRlQXRvbSIsIm9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyIiwib25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciIsImF0b20iLCJvbkJlY29tZU9ic2VydmVkIiwib25CZWNvbWVVbm9ic2VydmVkIiwiYSIsImRlZXBFcXVhbCIsImNvbXBhcmVyIiwiaWRlbnRpdHkiLCJzdHJ1Y3R1cmFsIiwic2hhbGxvdyIsInNoYWxsb3dDb21wYXJlciIsImRlZXBFbmhhbmNlciIsInYiLCJfIiwiaXNPYnNlcnZhYmxlIiwiQXJyYXkiLCJzaGFsbG93RW5oYW5jZXIiLCJpc09ic2VydmFibGVPYmplY3QiLCJpc09ic2VydmFibGVBcnJheSIsImlzT2JzZXJ2YWJsZU1hcCIsImlzT2JzZXJ2YWJsZVNldCIsImRlZXAiLCJyZWZlcmVuY2VFbmhhbmNlciIsIm5ld1ZhbHVlIiwicmVmU3RydWN0RW5oYW5jZXIiLCJvbGRWYWx1ZSIsIk9WRVJSSURFIiwib3ZlcnJpZGUiLCJhbm5vdGF0aW9uVHlwZV8iLCJtYWtlXyIsImV4dGVuZF8iLCJjcmVhdGVBY3Rpb25Bbm5vdGF0aW9uIiwib3B0aW9ucyIsIm9wdGlvbnNfIiwiYW5ub3RhdGVkIiwic291cmNlIiwiYWRtIiwiYm91bmQiLCJkZXNjcmlwdG9yIiwiYWN0aW9uRGVzY3JpcHRvciIsImNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eU91dGNvbWUiLCJpc0FjdGlvbiIsInJlY29yZEFubm90YXRpb25BcHBsaWVkIiwic2FmZURlc2NyaXB0b3JzIiwiYXNzZXJ0QWN0aW9uRGVzY3JpcHRvciIsImNyZWF0ZUFjdGlvbiIsImNyZWF0ZUZsb3dBbm5vdGF0aW9uIiwiaXNGbG93IiwiZmxvd0Rlc2NyaXB0b3IiLCJjcmVhdGVGbG93RGVzY3JpcHRvciIsImFzc2VydEZsb3dEZXNjcmlwdG9yIiwiZmxvdyIsImNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbiIsImFzc2VydENvbXB1dGVkRGVzY3JpcHRvciIsImdldCIsInNldCIsImNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uIiwiYXNzZXJ0T2JzZXJ2YWJsZURlc2NyaXB0b3IiLCJkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMiLCJkZWZhdWx0RGVjb3JhdG9yIiwicHJveHkiLCJhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zIiwib2JzZXJ2YWJsZUFubm90YXRpb24iLCJvYnNlcnZhYmxlUmVmQW5ub3RhdGlvbiIsImVuaGFuY2VyIiwib2JzZXJ2YWJsZVNoYWxsb3dBbm5vdGF0aW9uIiwib2JzZXJ2YWJsZVN0cnVjdEFubm90YXRpb24iLCJvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbiIsImdldEVuaGFuY2VyRnJvbU9wdGlvbnMiLCJnZXRFbmhhbmNlckZyb21Bbm5vdGF0aW9uIiwiZ2V0QW5ub3RhdGlvbkZyb21PcHRpb25zIiwib2JzZXJ2YWJsZSIsIm9ic2VydmFibGVGYWN0b3JpZXMiLCJib3giLCJvIiwiYXJyYXkiLCJtYXAiLCJleHRlbmRPYnNlcnZhYmxlIiwiYXNPYnNlcnZhYmxlT2JqZWN0IiwiYXNEeW5hbWljT2JzZXJ2YWJsZU9iamVjdCIsInJlZiIsInN0cnVjdCIsIkNPTVBVVEVEIiwiQ09NUFVURURfU1RSVUNUIiwiY29tcHV0ZWRBbm5vdGF0aW9uIiwiY29tcHV0ZWRTdHJ1Y3RBbm5vdGF0aW9uIiwiZXF1YWxzIiwiY29tcHV0ZWQiLCJvcHRzIiwiYXJnMSIsImN1cnJlbnRBY3Rpb25JZCIsIm5leHRBY3Rpb25JZCIsImlzRnVuY3Rpb25OYW1lQ29uZmlndXJhYmxlIiwidG1wTmFtZURlc2NyaXB0b3IiLCJhY3Rpb25OYW1lIiwiYXV0b0FjdGlvbiIsImV4ZWN1dGVBY3Rpb24iLCJjYW5SdW5Bc0Rlcml2YXRpb24iLCJzY29wZSIsInJ1bkluZm8iLCJfc3RhcnRBY3Rpb24iLCJfZW5kQWN0aW9uIiwibm90aWZ5U3B5XyIsInN0YXJ0VGltZV8iLCJwcmV2RGVyaXZhdGlvbl8iLCJydW5Bc0FjdGlvbiIsInByZXZBbGxvd1N0YXRlQ2hhbmdlc18iLCJ1bnRyYWNrZWRTdGFydCIsImFsbG93U3RhdGVDaGFuZ2VzU3RhcnQiLCJwcmV2QWxsb3dTdGF0ZVJlYWRzXyIsImFsbG93U3RhdGVSZWFkc1N0YXJ0IiwicnVuQXNBY3Rpb25fIiwiYWN0aW9uSWRfIiwicGFyZW50QWN0aW9uSWRfIiwiYWxsb3dTdGF0ZUNoYW5nZXNFbmQiLCJhbGxvd1N0YXRlUmVhZHNFbmQiLCJ1bnRyYWNrZWRFbmQiLCJhbGxvd1N0YXRlQ2hhbmdlcyIsInByZXYiLCJDUkVBVEUiLCJPYnNlcnZhYmxlVmFsdWUiLCJub3RpZnlTcHkiLCJoYXNVbnJlcG9ydGVkQ2hhbmdlXyIsImludGVyY2VwdG9yc18iLCJjaGFuZ2VMaXN0ZW5lcnNfIiwidmFsdWVfIiwiZGVoYW5jZXIiLCJkZWhhbmNlVmFsdWUiLCJpc1NweUVuYWJsZWQiLCJzcHlSZXBvcnRFbmQiLCJwcmVwYXJlTmV3VmFsdWVfIiwiY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQiLCJoYXNJbnRlcmNlcHRvcnMiLCJjaGFuZ2UiLCJpbnRlcmNlcHRDaGFuZ2UiLCJ0eXBlIiwic2V0TmV3VmFsdWVfIiwiaGFzTGlzdGVuZXJzIiwibm90aWZ5TGlzdGVuZXJzIiwiaW50ZXJjZXB0XyIsInJlZ2lzdGVySW50ZXJjZXB0b3IiLCJvYnNlcnZlXyIsIm9ic2VydmFibGVLaW5kIiwiZGVidWdPYmplY3ROYW1lIiwidW5kZWZpbmVkIiwicmVnaXN0ZXJMaXN0ZW5lciIsInJhdyIsInRvSlNPTiIsInZhbHVlT2YiLCJpc09ic2VydmFibGVWYWx1ZSIsIkNvbXB1dGVkVmFsdWUiLCJkZXBlbmRlbmNpZXNTdGF0ZV8iLCJvYnNlcnZpbmdfIiwibmV3T2JzZXJ2aW5nXyIsInJ1bklkXyIsIlVQX1RPX0RBVEVfIiwidW5ib3VuZERlcHNDb3VudF8iLCJ0cmlnZ2VyZWRCeV8iLCJpc0NvbXB1dGluZ18iLCJpc1J1bm5pbmdTZXR0ZXJfIiwiZGVyaXZhdGlvbiIsInNldHRlcl8iLCJpc1RyYWNpbmdfIiwiVHJhY2VNb2RlIiwiTk9ORSIsInNjb3BlXyIsImVxdWFsc18iLCJyZXF1aXJlc1JlYWN0aW9uXyIsImtlZXBBbGl2ZV8iLCJvbkJlY29tZVN0YWxlXyIsInByb3BhZ2F0ZU1heWJlQ2hhbmdlZCIsInNob3VsZENvbXB1dGUiLCJwcmV2VHJhY2tpbmdDb250ZXh0IiwicHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkIiwicmVzdWx0IiwiaXNDYXVnaHRFeGNlcHRpb24iLCJ0cmFja0FuZENvbXB1dGUiLCJ3YXNTdXNwZW5kZWQiLCJjaGFuZ2VkIiwiY29tcHV0ZVZhbHVlXyIsInRyYWNrRGVyaXZlZEZ1bmN0aW9uIiwic3VzcGVuZF8iLCJjbGVhck9ic2VydmluZyIsImZpcnN0VGltZSIsInByZXZWYWx1ZSIsImF1dG9ydW4iLCJwcmV2VSIsIndhcm5BYm91dFVudHJhY2tlZFJlYWRfIiwiY29uc29sZSIsImlzQ29tcHV0ZWRWYWx1ZSIsIkNhdWdodEV4Y2VwdGlvbiIsImUiLCJwcmV2QWxsb3dTdGF0ZVJlYWRzIiwicHJldlVudHJhY2tlZCIsIm9icyIsImwiLCJpIiwiY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAiLCJpc0NvbXB1dGluZ0Rlcml2YXRpb24iLCJoYXNPYnNlcnZlcnMiLCJjaGVja0lmU3RhdGVSZWFkc0FyZUFsbG93ZWQiLCJmIiwiY29udGV4dCIsInByZXZUcmFja2luZyIsImJpbmREZXBlbmRlbmNpZXMiLCJ3YXJuQWJvdXREZXJpdmF0aW9uV2l0aG91dERlcGVuZGVuY2llcyIsInByZXZPYnNlcnZpbmciLCJvYnNlcnZpbmciLCJsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUiLCJpMCIsImRlcCIsInJlbW92ZU9ic2VydmVyIiwiYWRkT2JzZXJ2ZXIiLCJ1bnRyYWNrZWQiLCJhY3Rpb24iLCJhbGxvd1N0YXRlUmVhZHMiLCJwZXJzaXN0ZW50S2V5cyIsIk1vYlhHbG9iYWxzIiwiY2FuTWVyZ2VHbG9iYWxTdGF0ZSIsImlzb2xhdGVDYWxsZWQiLCJnbG9iYWwiLCJzZXRUaW1lb3V0IiwiaXNvbGF0ZUdsb2JhbFN0YXRlIiwiZ2V0R2xvYmFsU3RhdGUiLCJyZXNldEdsb2JhbFN0YXRlIiwiZGVmYXVsdEdsb2JhbHMiLCJnZXRPYnNlcnZlcnMiLCJub2RlIiwicXVldWVGb3JVbm9ic2VydmF0aW9uIiwicnVuUmVhY3Rpb25zIiwibGlzdCIsImQiLCJsaW5lcyIsInByaW50RGVwVHJlZSIsImdldERlcGVuZGVuY3lUcmVlIiwidHJlZSIsImRlcHRoIiwiUmVhY3Rpb24iLCJyZXF1aXJlc09ic2VydmFibGVfIiwiaXNEaXNwb3NlZF8iLCJpc1NjaGVkdWxlZF8iLCJpc1RyYWNrUGVuZGluZ18iLCJpc1J1bm5pbmdfIiwic2NoZWR1bGVfIiwiaXNTY2hlZHVsZWQiLCJydW5SZWFjdGlvbl8iLCJ0cmFjayIsIm5vdGlmeSIsInByZXZSZWFjdGlvbiIsInJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbl8iLCJtZXNzYWdlIiwiZGlzcG9zZSIsImdldERpc3Bvc2VyXyIsInIiLCJ0cmFjZSIsImVudGVyQnJlYWtQb2ludCIsIm9uUmVhY3Rpb25FcnJvciIsImhhbmRsZXIiLCJpZHgiLCJNQVhfUkVBQ1RJT05fSVRFUkFUSU9OUyIsInJlYWN0aW9uU2NoZWR1bGVyIiwiYWxsUmVhY3Rpb25zIiwiaXRlcmF0aW9ucyIsInJlbWFpbmluZ1JlYWN0aW9ucyIsImlzUmVhY3Rpb24iLCJzZXRSZWFjdGlvblNjaGVkdWxlciIsImJhc2VTY2hlZHVsZXIiLCJzcHlSZXBvcnQiLCJldmVudCIsImxpc3RlbmVycyIsInNweVJlcG9ydFN0YXJ0IiwiRU5EX0VWRU5UIiwic3B5IiwiQUNUSU9OIiwiQUNUSU9OX0JPVU5EIiwiQVVUT0FDVElPTiIsIkFVVE9BQ1RJT05fQk9VTkQiLCJERUZBVUxUX0FDVElPTl9OQU1FIiwiYWN0aW9uQW5ub3RhdGlvbiIsImFjdGlvbkJvdW5kQW5ub3RhdGlvbiIsImF1dG9BY3Rpb25Bbm5vdGF0aW9uIiwiYXV0b0FjdGlvbkJvdW5kQW5ub3RhdGlvbiIsImNyZWF0ZUFjdGlvbkZhY3RvcnkiLCJydW5JbkFjdGlvbiIsInZpZXciLCJydW5TeW5jIiwicmVhY3Rpb24iLCJzY2hlZHVsZXIiLCJjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyIsInJ1biIsImV4cHJlc3Npb24iLCJlZmZlY3QiLCJlZmZlY3RBY3Rpb24iLCJ3cmFwRXJyb3JIYW5kbGVyIiwicmVhY3Rpb25SdW5uZXIiLCJuZXh0VmFsdWUiLCJiYXNlRm4iLCJlcnJvckhhbmRsZXIiLCJPTl9CRUNPTUVfT0JTRVJWRUQiLCJPTl9CRUNPTUVfVU5PQlNFUlZFRCIsImFyZzIiLCJhcmczIiwiaW50ZXJjZXB0SG9vayIsImdldEF0b20iLCJjYiIsImxpc3RlbmVyc0tleSIsImhvb2siLCJob29rTGlzdGVuZXJzIiwiTkVWRVIiLCJBTFdBWVMiLCJPQlNFUlZFRCIsImNvbmZpZ3VyZSIsInVzZVByb3hpZXMiLCJlbmZvcmNlQWN0aW9ucyIsImVhIiwicHJvcGVydGllcyIsImFubm90YXRpb25zIiwiZGVzY3JpcHRvcnMiLCJub2RlVG9EZXBlbmRlbmN5VHJlZSIsInVuaXF1ZSIsImdldE9ic2VydmVyVHJlZSIsIm5vZGVUb09ic2VydmVyVHJlZSIsImdlbmVyYXRvcklkIiwiRmxvd0NhbmNlbGxhdGlvbkVycm9yIiwiRXJyb3IiLCJpc0Zsb3dDYW5jZWxsYXRpb25FcnJvciIsImZsb3dBbm5vdGF0aW9uIiwiZ2VuZXJhdG9yIiwiY3R4IiwicnVuSWQiLCJnZW4iLCJwZW5kaW5nUHJvbWlzZSIsInByb21pc2UiLCJzdGVwSWQiLCJyZWplY3RvciIsInJldCIsInJlamVjdCIsIm5leHQiLCJyZXNvbHZlIiwiUHJvbWlzZSIsIm9uRnVsZmlsbGVkIiwiY2FuY2VsUHJvbWlzZSIsInlpZWxkZWRQcm9taXNlIiwiZmxvd1Jlc3VsdCIsImludGVyY2VwdFJlYWRzIiwicHJvcE9ySGFuZGxlciIsImdldEFkbWluaXN0cmF0aW9uIiwiaW50ZXJjZXB0IiwiaW50ZXJjZXB0UHJvcGVydHkiLCJpbnRlcmNlcHRJbnRlcmNlcHRhYmxlIiwiX2lzQ29tcHV0ZWQiLCJpc0NvbXB1dGVkIiwiaXNDb21wdXRlZFByb3AiLCJfaXNPYnNlcnZhYmxlIiwiaXNPYnNlcnZhYmxlUHJvcCIsInZhbHVlcyIsImVudHJpZXMiLCJhcmd1bWVudHMiLCJwYXJzZUludCIsInJlbW92ZSIsImhhcyIsIm9ic2VydmUiLCJwcm9wT3JDYiIsImNiT3JGaXJlIiwiZmlyZUltbWVkaWF0ZWx5Iiwib2JzZXJ2ZU9ic2VydmFibGVQcm9wZXJ0eSIsIm9ic2VydmVPYnNlcnZhYmxlIiwidG9KU0hlbHBlciIsIl9fYWxyZWFkeVNlZW4iLCJjYWNoZSIsInRvSlMiLCJnZXRBdG9tRnJvbUFyZ3MiLCJ0cmFuc2FjdGlvbiIsInRoaXNBcmciLCJ3aGVuIiwicHJlZGljYXRlIiwid2hlblByb21pc2UiLCJfd2hlbiIsInRpbWVvdXRIYW5kbGUiLCJkaXNwb3NlciIsImNvbmQiLCJjbGVhclRpbWVvdXQiLCJvbkVycm9yIiwiY2FuY2VsIiwib2JqZWN0UHJveHlUcmFwcyIsImdldEFkbSIsImRlbGV0ZVByb3BlcnR5IiwicHJldmVudEV4dGVuc2lvbnMiLCJpbnRlcmNlcHRhYmxlIiwiaW50ZXJjZXB0b3JzIiwibGlzdGVuYWJsZSIsIm1ha2VPYnNlcnZhYmxlIiwibWFrZUF1dG9PYnNlcnZhYmxlIiwib3ZlcnJpZGVzIiwiaWdub3JlS2V5cyIsIm1ha2UiLCJjdXJyZW50IiwiU1BMSUNFIiwiVVBEQVRFIiwiTUFYX1NQTElDRV9TSVpFIiwiYXJyYXlUcmFwcyIsImlzTmFOIiwiYXJyYXlFeHRlbnNpb25zIiwiT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24iLCJhdG9tXyIsInZhbHVlc18iLCJlbmhhbmNlcl8iLCJwcm94eV8iLCJsYXN0S25vd25MZW5ndGhfIiwiZGVoYW5jZVZhbHVlXyIsImRlaGFuY2VWYWx1ZXNfIiwiaW5kZXgiLCJhZGRlZCIsImFkZGVkQ291bnQiLCJyZW1vdmVkIiwicmVtb3ZlZENvdW50IiwiZ2V0QXJyYXlMZW5ndGhfIiwic2V0QXJyYXlMZW5ndGhfIiwibmV3TGVuZ3RoIiwiY3VycmVudExlbmd0aCIsIm5ld0l0ZW1zIiwidXBkYXRlQXJyYXlMZW5ndGhfIiwib2xkTGVuZ3RoIiwiZGVsdGEiLCJyZXNlcnZlQXJyYXlCdWZmZXIiLCJzcGxpY2VXaXRoQXJyYXlfIiwibGVuZ3RoIiwiTWF0aCIsImRlbGV0ZUNvdW50IiwibGVuZ3RoRGVsdGEiLCJzcGxpY2VJdGVtc0ludG9WYWx1ZXNfIiwib2xkSXRlbXMiLCJub3RpZnlBcnJheUNoaWxkVXBkYXRlXyIsIm5vdGlmeUFycmF5U3BsaWNlXyIsImdldF8iLCJzZXRfIiwiY3JlYXRlT2JzZXJ2YWJsZUFycmF5IiwiaW5pdGlhbFZhbHVlcyIsIm93bmVkIiwiY2xlYXIiLCJyZXBsYWNlIiwic3BsaWNlIiwic3BsaWNlV2l0aEFycmF5IiwicHVzaCIsIml0ZW1zIiwicG9wIiwic2hpZnQiLCJ1bnNoaWZ0IiwicmV2ZXJzZSIsInNvcnQiLCJjb3B5IiwiYWRkQXJyYXlFeHRlbnNpb24iLCJmdW5jRmFjdG9yeSIsImRlaGFuY2VkVmFsdWVzIiwiY2FsbGJhY2siLCJpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uIiwiT2JzZXJ2YWJsZU1hcE1hcmtlciIsIkFERCIsIkRFTEVURSIsIml0ZXJhdG9yIiwidG9TdHJpbmdUYWciLCJPYnNlcnZhYmxlTWFwIiwiZGF0YV8iLCJoYXNNYXBfIiwia2V5c0F0b21fIiwiaGFzXyIsImVudHJ5IiwibmV3RW50cnkiLCJoYXNLZXkiLCJ1cGRhdGVIYXNNYXBFbnRyeV8iLCJ1cGRhdGVWYWx1ZV8iLCJhZGRWYWx1ZV8iLCJzZWxmIiwibWFrZUl0ZXJhYmxlIiwiZG9uZSIsImZvckVhY2giLCJtZXJnZSIsInJlcGxhY2VtZW50TWFwIiwiY29udmVydFRvTWFwIiwib3JkZXJlZERhdGEiLCJrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCIsImRlbGV0ZWQiLCJrZXlFeGlzdGVkIiwiaXRlcjEiLCJpdGVyMiIsIm5leHQxIiwibmV4dDIiLCJkYXRhU3RydWN0dXJlIiwiT2JzZXJ2YWJsZVNldE1hcmtlciIsIk9ic2VydmFibGVTZXQiLCJjYWxsYmFja0ZuIiwiYWRkIiwibmV4dEluZGV4Iiwib2JzZXJ2YWJsZVZhbHVlcyIsImluZmVycmVkQW5ub3RhdGlvbnNTeW1ib2wiLCJkZXNjcmlwdG9yQ2FjaGUiLCJSRU1PVkUiLCJPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24iLCJkZWZhdWx0QW5ub3RhdGlvbl8iLCJhdXRvQmluZF8iLCJpc1BsYWluT2JqZWN0XyIsImFwcGxpZWRBbm5vdGF0aW9uc18iLCJwZW5kaW5nS2V5c18iLCJnZXRPYnNlcnZhYmxlUHJvcFZhbHVlXyIsInNldE9ic2VydmFibGVQcm9wVmFsdWVfIiwicHJveHlUcmFwIiwiYXNzZXJ0QW5ub3RhYmxlIiwiaW5mZXJBbm5vdGF0aW9uRnJvbURlc2NyaXB0b3IiLCJvdXRjb21lIiwiaW5mZXJBbm5vdGF0aW9uXyIsImNsb3Nlc3RQcm90byIsImRlZmluZVByb3BlcnR5XyIsImRlbGV0ZU91dGNvbWUiLCJkZWZpbmVPYnNlcnZhYmxlUHJvcGVydHlfIiwiY2FjaGVkRGVzY3JpcHRvciIsImdldENhY2hlZE9ic2VydmFibGVQcm9wRGVzY3JpcHRvciIsImRlZmluZUNvbXB1dGVkUHJvcGVydHlfIiwiZGVsZXRlXyIsIm5vdGlmeVByb3BlcnR5QWRkaXRpb25fIiwib3duS2V5c18iLCJrZXlzXyIsIlN0cmluZyIsImlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uIiwiT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRSIsIlN0dWJBcnJheSIsImN0b3IiLCJpbmhlcml0IiwiTGVnYWN5T2JzZXJ2YWJsZUFycmF5IiwiY29uY2F0IiwiYXJyYXlzIiwiY3JlYXRlQXJyYXlFbnRyeURlc2NyaXB0b3IiLCJtYXgiLCJjcmVhdGVBcnJheUJ1ZmZlckl0ZW0iLCJjcmVhdGVMZWdhY3lBcnJheSIsImdldERlYnVnTmFtZSIsIm5hbWVkIiwiYiIsImVxIiwiY2xhc3NOYW1lIiwidW53cmFwIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsImFTdGFjayIsImJTdGFjayIsImRlc2MiLCJkZWZhdWx0QW5ub3RhdGlvbiIsImF1dG9CaW5kIiwiaXNBbm5vdGF0aW9uIiwiZyIsIl9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXh0cmFzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTUEsVUFBVSxHQUFHO0FBQ2YsS0FEZTtBQUFBO0FBR1gsMERBQStDQyxHQUFHLENBQWxELFFBQStDQSxFQUEvQztBQUhXO0FBS2YsS0FMZTtBQU1mLEtBTmU7QUFPZixLQVBlO0FBUWYsS0FSZTtBQVNmLEtBVGU7QUFVZixNQVZlO0FBV2YsTUFYZTtBQVlmLE1BWmU7QUFhZixNQWJlO0FBY2YsTUFkZTtBQWVmLE1BZmU7QUFnQmYsTUFoQmU7QUFBQTtBQWtCWDtBQWxCVztBQW9CZixNQXBCZTtBQUFBO0FBc0JYLFdBQU8sMkRBQTJEQyxLQUFLLENBQUxBLFlBQWxFO0FBdEJXO0FBQUE7QUF5QlgsV0FBTyxnQ0FBUDtBQXpCVztBQUFBO0FBNEJYO0FBNUJXO0FBOEJmLE1BOUJlO0FBK0JmLE1BL0JlO0FBQUE7QUFpQ1gsV0FBTyx1Q0FBUDtBQWpDVztBQUFBO0FBb0NYO0FBcENXO0FBc0NmLE1BdENlO0FBQUE7QUF3Q1gsd0NBQWtDQyxRQUFRLENBQTFDLFFBQWtDQSxFQUFsQztBQXhDVztBQUFBO0FBMkNYLFdBQU8sNkJBQVA7QUEzQ1c7QUE2Q2YsTUE3Q2U7QUE4Q2YsTUE5Q2U7QUErQ2YsTUEvQ2U7QUFBQTtBQWlEWDtBQWpEVztBQUFBO0FBb0RYO0FBcERXO0FBQUE7QUF1RFg7QUF2RFc7QUF5RGYsTUF6RGU7QUEwRGYsTUExRGU7QUFBQTtBQTREWDtBQUNIO0FBN0RjLENBQW5CO0FBZ0VBLElBQU1DLE1BQU0sR0FBc0IscUJBQWxDOztTQUVnQkMsRyxDQUFJQyxLLEVBQUFBO29DQUF3Q0MseUMsRUFBQUEsUSxFQUFBQSxXLEVBQUFBLE0sRUFBQUE7QUFBQUE7OztBQUN4RCxhQUFhLFVBSVo7O0FBQ0QsUUFBTSxVQUNGLG9FQUVVQSxJQUFJLENBQUpBLFNBQWMsTUFBTUEsSUFBSSxDQUFKQSxpQkFBcEJBLEdBQW9CQSxDQUFwQkEsR0FGVixxSEFESixLQUFNLENBQU47QUFPSDs7QUM1RUQsSUFBTUMsVUFBVSxHQUFoQjs7QUFFQSxTQUFnQkMsU0FBaEIsR0FBZ0JBO0FBQ1osTUFBSSxzQkFBSixhQUF1QztBQUNuQztBQUNIOztBQUNELE1BQUksa0JBQUosYUFBbUM7QUFDL0I7QUFDSDs7QUFDRCxNQUFJLGtCQUFKLGFBQW1DO0FBQy9CO0FBQ0g7O0FBQ0QsTUFBSSxnQkFBSixhQUFpQztBQUM3QjtBQUNIOztBQUNEO0FBQ0g7O0FDaEJNLElBQU1DLE1BQU0sR0FBR0MsTUFBTSxDQUFyQjtBQUNBLElBQU1DLGFBQWEsR0FBR0QsTUFBTSxDQUE1QjtBQUNBLElBQU1FLGNBQWMsR0FBR0YsTUFBTSxDQUE3QjtBQUNBLElBQU1HLGVBQWUsR0FBR0gsTUFBTSxDQUE5QjtBQUVBLElBQU1JLFdBQVcsR0FBakI7QUFDUEosTUFBTSxDQUFOQTtBQUVPLElBQU1LLFlBQVksR0FBbEI7QUFDUEwsTUFBTSxDQUFOQTtBQU9BLElBQU1NLFFBQVEsR0FBRyxpQkFBakI7QUFDQSxJQUFNQyxpQkFBaUIsZ0JBQUdQLE1BQU0sQ0FBaEMsUUFBMEJBLEVBQTFCOztBQUVBLFNBQWdCUSxhQUFoQixHQUFnQkE7QUFDWixNQUFJLENBQUosVUFBZTtBQUNYZCxPQUFHLENBQ0MscUJBREpBLHFCQUFHLENBQUhBO0FBS0g7QUFDSjs7QUFFRCxTQUFnQmUseUJBQWhCLENBQTBDQyxHQUExQyxFQUEwQ0E7QUFDdEMsTUFBSSxLQUFKLEVBQTBDLEVBS3pDO0FBQ0o7O0FBRUQsU0FBZ0JDLFNBQWhCLEdBQWdCQTtBQUNaLFNBQU8sRUFBRUMsV0FBVyxDQUFwQjtBQUNIO0FBRUQ7Ozs7O0FBR0EsU0FBZ0JDLElBQWhCLENBQXFCQyxJQUFyQixFQUFxQkE7QUFDakIsTUFBSUMsT0FBTyxHQUFYO0FBQ0EsU0FBTztBQUNILGlCQUFhO0FBQ2JBLFdBQU8sR0FBUEE7QUFDQSxXQUFRRCxJQUFZLENBQVpBLFlBQVIsU0FBUUEsQ0FBUjtBQUhKO0FBS0g7O0FBRU0sSUFBTUUsSUFBSSxHQUFHLFNBQVBBLElBQU8sSUFBYjs7QUFFUCxTQUFnQkMsVUFBaEIsQ0FBMkJDLEVBQTNCLEVBQTJCQTtBQUN2QixTQUFPLGNBQVA7QUFDSDs7QUFFRCxTQUlnQkMsV0FKaEIsQ0FJNEJDLEtBSjVCLEVBSTRCQTtBQUN4QixNQUFNQyxDQUFDLEdBQUcsT0FBVjs7QUFDQTtBQUNJO0FBQ0E7QUFDQTtBQUNJO0FBSlI7O0FBTUE7QUFDSDs7QUFFRCxTQUFnQkMsUUFBaEIsQ0FBeUJGLEtBQXpCLEVBQXlCQTtBQUNyQixTQUFPQSxLQUFLLEtBQUxBLFFBQWtCLGlCQUF6QjtBQUNIOztBQUVELFNBQWdCRyxhQUFoQixDQUE4QkgsS0FBOUIsRUFBOEJBOzs7QUFDMUIsTUFBSSxDQUFDRSxRQUFRLENBQWIsS0FBYSxDQUFiLEVBQXNCO0FBQ3RCLE1BQU1FLEtBQUssR0FBR3hCLE1BQU0sQ0FBTkEsZUFBZCxLQUFjQSxDQUFkO0FBQ0EsTUFBSXdCLEtBQUssSUFBVCxNQUFtQjtBQUNuQixTQUFPLDRCQUFLLENBQUwsbUVBQVA7QUFDSCxDLENBQUE7OztBQUdELFNBQWdCQyxXQUFoQixDQUE0QkMsR0FBNUIsRUFBNEJBO0FBQ3hCLE1BQU1DLFdBQVcsR0FBR0QsR0FBSCxRQUFHQSxHQUFILE1BQUdBLE1BQUcsQ0FBdkI7QUFDQSxNQUFJLENBQUosYUFBa0I7QUFDbEIsTUFBSSx3QkFBd0JDLFdBQVcsQ0FBbkMsUUFBNEMsd0JBQXdCQSxXQUFXLENBQW5GLGFBQ0k7QUFDSjtBQUNIOztBQUVELFNBQWdCQyxhQUFoQixDQUE4QkMsTUFBOUIsRUFBMkNDLFFBQTNDLEVBQWtFVixLQUFsRSxFQUFrRUE7QUFDOURsQixnQkFBYyxtQkFBbUI7QUFDN0I2QixjQUFVLEVBRG1CO0FBRTdCQyxZQUFRLEVBRnFCO0FBRzdCQyxnQkFBWSxFQUhpQjtBQUk3QmIsU0FBSyxFQUFMQTtBQUo2QixHQUFuQixDQUFkbEI7QUFNSDs7QUFFRCxTQUFnQmdDLGtCQUFoQixDQUFtQ0wsTUFBbkMsRUFBZ0RDLFFBQWhELEVBQXVFVixLQUF2RSxFQUF1RUE7QUFDbkVsQixnQkFBYyxtQkFBbUI7QUFDN0I2QixjQUFVLEVBRG1CO0FBRTdCQyxZQUFRLEVBRnFCO0FBRzdCQyxnQkFBWSxFQUhpQjtBQUk3QmIsU0FBSyxFQUFMQTtBQUo2QixHQUFuQixDQUFkbEI7QUFNSDs7QUFFRCxTQUFnQmlDLHlCQUFoQixDQUNJQyxJQURKLEVBRUlDLFFBRkosRUFFSUE7QUFFQSxNQUFNUCxRQUFRLEdBQUcsV0FBakI7QUFDQU8sVUFBUSxDQUFSQTtBQUNBLFNBQU87QUFDSCxXQUFPZixRQUFRLENBQVJBLENBQVEsQ0FBUkEsSUFBZWdCLENBQUMsQ0FBREEsUUFBQyxDQUFEQSxLQUF0QjtBQURKO0FBR0g7O0FBRUQsU0FBZ0JDLFFBQWhCLENBQXlCQyxLQUF6QixFQUF5QkE7QUFDckIsU0FBT0EsS0FBSyxZQUFaO0FBQ0g7O0FBRUQsU0FBZ0JDLFFBQWhCLENBQXlCRCxLQUF6QixFQUF5QkE7QUFDckIsU0FBT0EsS0FBSyxZQUFaO0FBQ0g7O0FBRUQsSUFBTUUsd0JBQXdCLEdBQUcsT0FBTzFDLE1BQU0sQ0FBYiwwQkFBakM7QUFFQTs7OztBQUdBLFNBQWdCMkMsa0JBQWhCLENBQW1DZCxNQUFuQyxFQUFtQ0E7QUFDL0IsTUFBTWUsSUFBSSxHQUFHNUMsTUFBTSxDQUFOQSxLQUFiLE1BQWFBLENBQWIsQ0FEK0I2QixDQUMvQjs7QUFFQSxNQUFJLENBQUosMEJBQStCO0FBQy9CLE1BQU1nQixPQUFPLEdBQUc3QyxNQUFNLENBQU5BLHNCQUFoQixNQUFnQkEsQ0FBaEI7QUFDQSxNQUFJLENBQUM2QyxPQUFPLENBQVosUUFBcUI7QUFDckIseUJBQW9CLE9BQU8sQ0FBUCxPQUFlLGFBQUM7QUFBQSxXQUFJMUMsZUFBZSxDQUFmQSxrQ0FBSixDQUFJQSxDQUFKO0FBQXBDLEdBQW9CLENBQXBCO0FBQ0gsQyxDQUFBO0FBR0Q7OztBQUNPLElBQU0yQyxPQUFPLEdBQ2hCLGtDQUFrQ0MsT0FBTyxDQUF6QyxVQUNNQSxPQUFPLENBRGIsVUFFTUwsd0JBQXdCLEdBQ3hCLGVBQUc7QUFBQSxTQUFJMUMsTUFBTSxDQUFOQSxnQ0FBdUNBLE1BQU0sQ0FBTkEsc0JBQTNDLEdBQTJDQSxDQUF2Q0EsQ0FBSjtBQURxQjtBQUV4QjtBQUEyQkEsTUFBTSxDQUxwQzs7QUFPUCxTQUFnQmdELFlBQWhCLENBQTZCMUQsR0FBN0IsRUFBNkJBO0FBQ3pCLE1BQUksZUFBSixVQUE2QjtBQUM3QixNQUFJLGVBQUosVUFBNkIsT0FBT0EsR0FBRyxDQUFWLFFBQU9BLEVBQVA7QUFDN0IsU0FBTyxnQkFBUCxRQUFPLEVBQVA7QUFDSDs7QUFFRCxTQUFnQjJELFdBQWhCLENBQTRCN0IsS0FBNUIsRUFBNEJBO0FBQ3hCLFNBQU9BLEtBQUssS0FBTEEsY0FBd0IsNEJBQTRCLEtBQTVCLFFBQS9CO0FBQ0g7O0FBRUQsU0FBZ0I4QixPQUFoQixDQUF3QkMsTUFBeEIsRUFBd0NDLElBQXhDLEVBQXdDQTtBQUNwQyxTQUFPakQsZUFBZSxDQUFmQSw0QkFBUCxJQUFPQSxDQUFQO0FBQ0gsQyxDQUFBOzs7QUFHTSxJQUFNa0QseUJBQXlCLEdBQ2xDckQsTUFBTSxDQUFOQSw2QkFDQTtBQUNJO0FBQ0EsTUFBTXNELEdBQUcsR0FBVCxHQUZKLENBRUk7O0FBRUFSLFNBQU8sQ0FBUEEsTUFBTyxDQUFQQSxTQUF3QixlQUFHO0FBQ3ZCUSxPQUFHLENBQUhBLEdBQUcsQ0FBSEEsR0FBV3JELGFBQWEsU0FBeEJxRCxHQUF3QixDQUF4QkE7QUFESlI7QUFHQTtBQVREOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0tBLElBQU1TLHVCQUF1QixnQkFBR0MsTUFBTSxDQUF0Qyx5QkFBc0MsQ0FBdEM7QUFFUDs7Ozs7O0FBS0EsU0FBZ0JDLHlCQUFoQixDQUEwQ0MsVUFBMUMsRUFBMENBO0FBQ3RDO0FBQ0lDLG1CQUFlLG1CQUFmQSxVQUFlLENBQWZBO0FBQ0g7O0FBQ0QsU0FBTzNELE1BQU0sQ0FBTkEsa0JBQVAsVUFBT0EsQ0FBUDtBQUNIO0FBRUQ7Ozs7OztBQUlBLFNBQWdCMkQsZUFBaEIsQ0FBZ0NDLFNBQWhDLEVBQWdEdEUsR0FBaEQsRUFBa0VvRSxVQUFsRSxFQUFrRUE7QUFDOUQsTUFBSSxDQUFDUixPQUFPLFlBQVosdUJBQVksQ0FBWixFQUFrRDtBQUM5Q3RCLGlCQUFhLGtEQUVOZ0MsU0FBUyxDQUZoQmhDLHVCQUVnQixDQUZILEVBQWJBO0FBSUgsR0FONkQ4QixDQU03RDs7O0FBRUQsTUFBSSxLQUFKLEVBQTRGLGtCQVI5QkEsQ0FjN0Q7OztBQUVERyxvQkFBa0Isd0JBQWxCQSxHQUFrQixDQUFsQkEsQ0FoQjhESCxDQWdCOURHOztBQUdBLE1BQUksQ0FBQ0MsVUFBVSxDQUFmLFVBQWUsQ0FBZixFQUE2QjtBQUN6QkYsYUFBUyxDQUFUQSx1QkFBUyxDQUFUQTtBQUNIO0FBQ0o7O0FBRUQ7QUFDSSxNQUFJLEtBQUosRUFBNEYsa0VBVTNGO0FBQ0o7QUFFRDs7Ozs7QUFHQSxTQUFnQkcsd0JBQWhCLENBQXlDWixNQUF6QyxFQUF5Q0E7QUFDckMsTUFBSSxDQUFDRCxPQUFPLFNBQVosdUJBQVksQ0FBWixFQUErQztBQUMzQyxRQUFJLEtBQUosRUFBaUQsRUFETjs7O0FBTzNDdEIsaUJBQWEsK0NBQXVDdUIsTUFBTSxDQUExRHZCLHVCQUEwRCxDQUE3QyxFQUFiQTtBQUNIOztBQUNELFNBQU91QixNQUFNLENBQWIsdUJBQWEsQ0FBYjtBQUNIOztJQ3hEWWEsS0FBSyxnQkFBR1IsTUFBTSxDQUFwQixxQkFBb0IsQzs7QUFPM0IsSUFBYVMsSUFBYjtBQUNvQzs7QUFPaEM7Ozs7QUFJQTtRQUFtQkMsZ0IsRUFBQUE7QUFBQUEsY0FBUSxTQUFVLFNBQVYsR0FBa0MsTUFBMUNBOzs7U0FBQUEsSyxHQUFBQSxNO1NBWG5CQyx1QixHQUEwQixLO1NBQzFCQyxnQixHQUFtQixLO1NBQ25CQyxVLEdBQWEsUztTQUViQyxVLEdBQWEsQztTQUNiQyxlLEdBQWtCLEM7U0FDbEJDLG9CLEdBQXVCQyxpQkFBaUIsQ0FBQ0MsYTtTQVFsQ0MsSyxHQUFBQSxNO1NBRUFDLE0sR0FBQUEsTTtBQUxZVjtBQVp2Qjs7O0FBQUE7O0FBQUEsZ0JBbUJXVztBQUNILFFBQUksS0FBSixPQUFnQjtBQUNaLHlCQUFtQixvQkFBUTtBQUFBLGVBQUlDLFFBQUo7QUFBM0I7QUFDSDtBQXRCVDs7QUFBQSxpQkF5QldDO0FBQ0gsUUFBSSxLQUFKLFFBQWlCO0FBQ2IsMEJBQW9CLG9CQUFRO0FBQUEsZUFBSUQsUUFBSjtBQUE1QjtBQUNIO0FBQ0o7QUFFRDs7OztBQS9CSjs7QUFBQSwwQkFtQ1dFO0FBQ0gsV0FBT0EsY0FBYyxDQUFyQixJQUFxQixDQUFyQjtBQUNIO0FBRUQ7OztBQXZDSjs7QUFBQSx5QkEwQ1dDO0FBQ0hDLGNBQVU7QUFDVkMsb0JBQWdCLENBQWhCQSxJQUFnQixDQUFoQkE7QUFDQUMsWUFBUTtBQTdDaEI7O0FBQUEsb0JBZ0RJQztBQUNJLFdBQU8sS0FBUDtBQWpEUjs7QUFBQTtBQUFBOztBQXFETyxJQUFNQyxNQUFNLGdCQUFHbkQseUJBQXlCLFNBQXhDLElBQXdDLENBQXhDOztBQUVQLFNBQWdCb0QsVUFBaEIsQ0FDSW5ELElBREosRUFFSW9ELHVCQUZKLEVBR0lDLHlCQUhKLEVBR0lBO01BREFELGtDLEVBQUFBO0FBQUFBLDhCQUFzQ3hFLElBQXRDd0U7OztNQUNBQyxvQyxFQUFBQTtBQUFBQSxnQ0FBd0N6RSxJQUF4Q3lFOzs7QUFFQSxNQUFNQyxJQUFJLEdBQUcsU0FBYixJQUFhLENBQWIsQ0FGQUQsQ0FFQTs7QUFFQSxNQUFJRCx1QkFBdUIsS0FBM0IsTUFBc0M7QUFDbENHLG9CQUFnQixPQUFoQkEsdUJBQWdCLENBQWhCQTtBQUNIOztBQUVELE1BQUlGLHlCQUF5QixLQUE3QixNQUF3QztBQUNwQ0csc0JBQWtCLE9BQWxCQSx5QkFBa0IsQ0FBbEJBO0FBQ0g7O0FBQ0Q7QUFDSDs7QUN2RkQ7QUFDSSxTQUFPQyxDQUFDLEtBQVI7QUFDSDs7QUFFRDtBQUNJLFNBQU9DLFNBQVMsSUFBaEIsQ0FBZ0IsQ0FBaEI7QUFDSDs7QUFFRDtBQUNJLFNBQU9BLFNBQVMsT0FBaEIsQ0FBZ0IsQ0FBaEI7QUFDSDs7QUFFRDtBQUNJLFNBQU85RixNQUFNLENBQU5BLE1BQVAsQ0FBT0EsQ0FBUDtBQUNIOztBQUVELElBQWErRixRQUFRLEdBQUc7QUFDcEJDLFVBQVEsRUFEWTtBQUVwQkMsWUFBVSxFQUZVO0FBR3BCLGFBSG9CO0FBSXBCQyxTQUFPLEVBQUVDO0FBSlcsQ0FBeEI7O1NDSmdCQyxZLENBQWFDLEMsRUFBR0MsQyxFQUFHbEUsSSxFQUFBQTtBQUMvQjtBQUNBLE1BQUltRSxZQUFZLENBQWhCLENBQWdCLENBQWhCLEVBQXFCLFNBRlVuRSxDQUVWOztBQUdyQixNQUFJb0UsS0FBSyxDQUFMQSxRQUFKLENBQUlBLENBQUosRUFBc0IsT0FBTyxVQUFVLENBQVYsU0FBb0I7QUFBRXBFLFFBQUksRUFBSkE7QUFBRixHQUFwQixDQUFQO0FBQ3RCLE1BQUliLGFBQWEsQ0FBakIsQ0FBaUIsQ0FBakIsRUFBc0IsT0FBTyxVQUFVLENBQVYscUJBQWdDO0FBQUVhLFFBQUksRUFBSkE7QUFBRixHQUFoQyxDQUFQO0FBQ3RCLE1BQUlHLFFBQVEsQ0FBWixDQUFZLENBQVosRUFBaUIsT0FBTyxVQUFVLENBQVYsT0FBa0I7QUFBRUgsUUFBSSxFQUFKQTtBQUFGLEdBQWxCLENBQVA7QUFDakIsTUFBSUssUUFBUSxDQUFaLENBQVksQ0FBWixFQUFpQixPQUFPLFVBQVUsQ0FBVixPQUFrQjtBQUFFTCxRQUFJLEVBQUpBO0FBQUYsR0FBbEIsQ0FBUDtBQUVqQjtBQUNIOztBQUVELFNBQWdCcUUsZUFBaEIsQ0FBZ0NKLENBQWhDLEVBQW1DQyxDQUFuQyxFQUFzQ2xFLElBQXRDLEVBQXNDQTtBQUNsQyxNQUFJaUUsQ0FBQyxLQUFEQSxhQUFtQkEsQ0FBQyxLQUF4QixNQUFtQztBQUNuQyxNQUFJSyxrQkFBa0IsQ0FBbEJBLENBQWtCLENBQWxCQSxJQUF5QkMsaUJBQWlCLENBQTFDRCxDQUEwQyxDQUExQ0EsSUFBaURFLGVBQWUsQ0FBaEVGLENBQWdFLENBQWhFQSxJQUF1RUcsZUFBZSxDQUExRixDQUEwRixDQUExRixFQUNJO0FBQ0osTUFBSUwsS0FBSyxDQUFMQSxRQUFKLENBQUlBLENBQUosRUFBc0IsT0FBTyxVQUFVLENBQVYsU0FBb0I7QUFBRXBFLFFBQUksRUFBTjtBQUFRMEUsUUFBSSxFQUFFO0FBQWQsR0FBcEIsQ0FBUDtBQUN0QixNQUFJdkYsYUFBYSxDQUFqQixDQUFpQixDQUFqQixFQUFzQixPQUFPLFVBQVUsQ0FBVixxQkFBZ0M7QUFBRWEsUUFBSSxFQUFOO0FBQVEwRSxRQUFJLEVBQUU7QUFBZCxHQUFoQyxDQUFQO0FBQ3RCLE1BQUl2RSxRQUFRLENBQVosQ0FBWSxDQUFaLEVBQWlCLE9BQU8sVUFBVSxDQUFWLE9BQWtCO0FBQUVILFFBQUksRUFBTjtBQUFRMEUsUUFBSSxFQUFFO0FBQWQsR0FBbEIsQ0FBUDtBQUNqQixNQUFJckUsUUFBUSxDQUFaLENBQVksQ0FBWixFQUFpQixPQUFPLFVBQVUsQ0FBVixPQUFrQjtBQUFFTCxRQUFJLEVBQU47QUFBUTBFLFFBQUksRUFBRTtBQUFkLEdBQWxCLENBQVA7QUFFakIsYUFDSXBIO0FBR1A7O0FBRUQsU0FBZ0JxSCxpQkFBaEIsQ0FBa0NDLFFBQWxDLEVBQWtDQTtBQUM5QjtBQUNBO0FBQ0g7O0FBRUQsU0FBZ0JDLGlCQUFoQixDQUFrQ1osQ0FBbEMsRUFBcUNhLFFBQXJDLEVBQXFDQTtBQUNqQyxNQUFJLEtBQUosRUFDSXhIO0FBQ0osTUFBSW9HLFNBQVMsSUFBYixRQUFhLENBQWIsRUFBNEI7QUFDNUI7QUFDSDs7QUNoREQsSUFBTXFCLFFBQVEsR0FBZDtBQUVBLElBQWFDLFFBQVEsZ0JBQW1DM0QseUJBQXlCLENBQUM7QUFDOUU0RCxpQkFBZSxFQUQrRDtBQUU5RUMsT0FBSyxFQUZ5RTtBQUc5RUMsU0FBTyxFQUFQQTtBQUg4RSxDQUFELENBQWpGOztBQU1BLFNBQWdCekQsVUFBaEIsQ0FBMkJKLFVBQTNCLEVBQTJCQTtBQUN2QixTQUFPQSxVQUFVLENBQVZBLG9CQUFQO0FBQ0g7O0FBRUQ7QUFDSTtBQUNBLE1BQUksS0FBSixFQUFtQyxFQUZ2QyxDQU9LOzs7QUFFRCxNQUFJLEtBQUosRUFBd0QsRUFLdkQ7QUFDSjs7QUFFRDtBQUNJaEUsS0FBRyxPQUFLLEtBQUwsa0JBQUhBLDBDQUFHLENBQUhBO0FBQ0g7O1NDeEJlOEgsc0IsQ0FBdUJwRixJLEVBQWNxRixPLEVBQUFBO0FBQ2pELFNBQU87QUFDSEosbUJBQWUsRUFEWjtBQUVISyxZQUFRLEVBRkw7QUFHSEosU0FBSyxFQUhGO0FBSUhDLFdBQU8sRUFBUEE7QUFKRyxHQUFQO0FBTUg7O0FBRUQ7OztBQUNJLE1BQUlJLFNBQVMsR0FBYjtBQUNBLE1BQUlDLE1BQU0sR0FBR0MsR0FBRyxDQUFoQjtBQUNBLE1BQUlDLEtBQUssNkNBQUcsS0FBSCw2QkFBRyxlQUFILHdDQUFUOztBQUNBLFNBQU9GLE1BQU0sSUFBSUEsTUFBTSxLQUF2QixpQkFBNkM7QUFDekMsUUFBTUcsVUFBVSxHQUFHOUgsYUFBYSxTQUFoQyxHQUFnQyxDQUFoQzs7QUFDQSxvQkFBZ0I7QUFDWjtBQUNBO0FBQ0E7QUFDQSxVQUFJMkgsTUFBTSxLQUFLQyxHQUFHLENBQWRELFdBQUosT0FBcUM7QUFDakMsWUFBTUksZ0JBQWdCLEdBQUdDLHNCQUFzQixpQkFBL0MsVUFBK0MsQ0FBL0M7QUFDQSxZQUFNQyxxQkFBcUIsR0FBR0wsR0FBRyxDQUFIQSxxQkFBOUIsZ0JBQThCQSxDQUE5Qjs7QUFDQSxZQUFJLENBQUosdUJBQTRCO0FBQ3hCO0FBQ0E7QUFDSDs7QUFDREYsaUJBQVMsR0FQd0IsSUFPakNBLENBUGlDOztBQVNqQyxtQkFBVztBQUNQO0FBQ0g7QUFmTzs7O0FBa0JaLFVBQUlDLE1BQU0sS0FBS0MsR0FBRyxDQUFsQixTQUE0QjtBQUN4QixZQUFJTSxRQUFRLENBQUNKLFVBQVUsQ0FBdkIsS0FBWSxDQUFaLEVBQWdDO0FBQzVCO0FBQ0E7QUFDQUosbUJBQVMsR0FBVEE7QUFDQTtBQUNIOztBQUNELFlBQU1LLGlCQUFnQixHQUFHQyxzQkFBc0IsNkJBQS9DLEtBQStDLENBQS9DOztBQUNBL0gsc0JBQWMsY0FBZEEsaUJBQWMsQ0FBZEE7QUFDQXlILGlCQUFTLEdBQVRBO0FBQ0g7QUFDSjs7QUFDREMsVUFBTSxHQUFHNUgsTUFBTSxDQUFOQSxlQUFUNEgsTUFBUzVILENBQVQ0SDtBQUNIOztBQUNELGlCQUFlO0FBQ1hRLDJCQUF1QixZQUF2QkEsR0FBdUIsQ0FBdkJBO0FBREosU0FFTyxJQUFJLDJCQUFDUCxHQUFHLENBQUhBLFFBQUQsdUJBQUNBLENBQUQscUJBQUNBLHNCQUFMLEdBQUtBLENBQUQsQ0FBSixFQUFrRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FuSSxPQUFHLElBQUksS0FBSixpQkFBNkJtSSxHQUFHLENBQWhDLEtBQTZCQSxHQUE3QixHQUE2QkEsR0FBYXZJLEdBQUcsQ0FBaERJLFFBQTZDSixFQUExQyxDQUFISTtBQUNIO0FBQ0o7O0FBRUQ7QUFNSSxNQUFNc0ksZ0JBQWdCLEdBQUdDLHNCQUFzQixpQkFBL0MsVUFBK0MsQ0FBL0M7QUFDQSxTQUFPSixHQUFHLENBQUhBLHVDQUFQLFNBQU9BLENBQVA7QUFDSDs7QUFFRDtNQUVNUixzQztNQUVBakcsbUI7O0FBRUYsTUFBSSxLQUFKLEVBQW1DLEVBS2xDO0FBQ0o7O0FBRUQ7QUFBQTs7O01BTUlpSCwwQixFQUFBQTtBQUFBQSxzQkFBMkJ6SCxXQUFXLENBQUN5SCxlQUF2Q0E7OztBQUVBQyx3QkFBc0IsdUJBQXRCQSxVQUFzQixDQUF0QkE7TUFDTWxILFFBQVUyRyxXQUFWM0csSzs7QUFDTiw4QkFBSXNDLFVBQVUsQ0FBZCw2QkFBSUEscUJBQUosT0FBZ0M7QUFBQTs7QUFDNUJ0QyxTQUFLLEdBQUdBLEtBQUssQ0FBTEEsb0JBQVd5RyxHQUFHLENBQWR6RyxnQ0FBeUJ5RyxHQUFHLENBQXBDekcsT0FBUUEsQ0FBUkE7QUFDSDs7QUFDRCxTQUFPO0FBQ0hBLFNBQUssRUFBRW1ILFlBQVksbURBQ2Y3RSxVQUFVLENBREssNkJBQ2ZBLHNCQURlLHdDQUNjcEUsR0FBRyxDQURqQixRQUNjQSxFQURkLDREQUdmb0UsVUFBVSxDQUhLLDZCQUdmQSxzQkFIZSwrQ0FEaEIsS0FDZ0IsQ0FEaEI7QUFNSDtBQUNBO0FBQ0F6QixnQkFBWSxFQUFFb0csZUFBZSxHQUFHUixHQUFHLENBQU4saUJBUjFCO0FBU0g7QUFDQTlGLGNBQVUsRUFWUDtBQVdIO0FBQ0E7QUFDQUMsWUFBUSxFQUFFcUcsZUFBZSxXQUFXO0FBYmpDLEdBQVA7QUFlSDs7U0MvR2VHLG9CLENBQXFCcEcsSSxFQUFjcUYsTyxFQUFBQTtBQUMvQyxTQUFPO0FBQ0hKLG1CQUFlLEVBRFo7QUFFSEssWUFBUSxFQUZMO0FBR0hKLFNBQUssRUFIRjtBQUlIQyxXQUFPLEVBQVBBO0FBSkcsR0FBUDtBQU1IOztBQUVEOzs7QUFDSSxNQUFJSSxTQUFTLEdBQWI7QUFDQSxNQUFJQyxNQUFNLEdBQUdDLEdBQUcsQ0FBaEI7O0FBQ0EsU0FBT0QsTUFBTSxJQUFJQSxNQUFNLEtBQXZCLGlCQUE2QztBQUN6QyxRQUFNRyxVQUFVLEdBQUc5SCxhQUFhLFNBQWhDLEdBQWdDLENBQWhDOztBQUNBLG9CQUFnQjtBQUNaLFVBQUkySCxNQUFNLEtBQUtDLEdBQUcsQ0FBbEIsU0FBNEI7QUFDeEI7QUFDQSxZQUFJWSxNQUFNLENBQUNWLFVBQVUsQ0FBckIsS0FBVSxDQUFWLEVBQThCO0FBQzFCO0FBQ0E7QUFDQUosbUJBQVMsR0FBVEE7QUFDQTtBQUNIOztBQUNELFlBQU1lLGNBQWMsR0FBR0Msb0JBQW9CLDZCQUEzQyxLQUEyQyxDQUEzQztBQUNBekksc0JBQWMsY0FBZEEsY0FBYyxDQUFkQTtBQVRKLGFBVU87QUFDSCxZQUFNd0ksZUFBYyxHQUFHQyxvQkFBb0IsaUJBQTNDLFVBQTJDLENBQTNDOztBQUNBLFlBQU1ULHFCQUFxQixHQUFHTCxHQUFHLENBQUhBLHFCQUE5QixlQUE4QkEsQ0FBOUI7O0FBQ0EsWUFBSSxDQUFKLHVCQUE0QjtBQUN4QjtBQUNBO0FBQ0g7QUFDSjs7QUFDREYsZUFBUyxHQUFUQTtBQUNIOztBQUNEQyxVQUFNLEdBQUc1SCxNQUFNLENBQU5BLGVBQVQ0SCxNQUFTNUgsQ0FBVDRIO0FBQ0g7O0FBQ0QsaUJBQWU7QUFDWFEsMkJBQXVCLFlBQXZCQSxHQUF1QixDQUF2QkE7QUFESixTQUVPLElBQUksMkJBQUNQLEdBQUcsQ0FBSEEsUUFBRCx1QkFBQ0EsQ0FBRCxxQkFBQ0Esc0JBQUwsR0FBS0EsQ0FBRCxDQUFKLEVBQWtEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQW5JLE9BQUcsSUFBSSxLQUFKLGlCQUE2Qm1JLEdBQUcsQ0FBaEMsS0FBNkJBLEdBQTdCLEdBQTZCQSxHQUFhdkksR0FBRyxDQUFoREksUUFBNkNKLEVBQTFDLENBQUhJO0FBQ0g7QUFDSjs7QUFFRDtBQU1JLE1BQU1nSixjQUFjLEdBQUdDLG9CQUFvQixpQkFBM0MsVUFBMkMsQ0FBM0M7QUFDQSxTQUFPZCxHQUFHLENBQUhBLHFDQUFQLFNBQU9BLENBQVA7QUFDSDs7QUFFRDtNQUVNUixzQztNQUVBakcsbUI7O0FBRUYsTUFBSSxLQUFKLEVBQW1DLEVBS2xDO0FBQ0o7O0FBRUQ7QUFBQTtNQU1JaUgsMEIsRUFBQUE7QUFBQUEsc0JBQTJCekgsV0FBVyxDQUFDeUgsZUFBdkNBOzs7QUFFQU8sc0JBQW9CLHVCQUFwQkEsVUFBb0IsQ0FBcEJBO0FBQ0EsU0FBTztBQUNIeEgsU0FBSyxFQUFFeUgsSUFBSSxDQUFDZCxVQUFVLENBRG5CLEtBQ1EsQ0FEUjtBQUVIO0FBQ0E7QUFDQTlGLGdCQUFZLEVBQUVvRyxlQUFlLEdBQUdSLEdBQUcsQ0FBTixpQkFKMUI7QUFLSDtBQUNBOUYsY0FBVSxFQU5QO0FBT0g7QUFDQTtBQUNBQyxZQUFRLEVBQUVxRyxlQUFlLFdBQVc7QUFUakMsR0FBUDtBQVdIOztTQ2xHZVMsd0IsQ0FBeUIxRyxJLEVBQWNxRixPLEVBQUFBO0FBQ25ELFNBQU87QUFDSEosbUJBQWUsRUFEWjtBQUVISyxZQUFRLEVBRkw7QUFHSEosU0FBSyxFQUhGO0FBSUhDLFdBQU8sRUFBUEE7QUFKRyxHQUFQO0FBTUg7O0FBRUQ7OztBQUNJLE1BQUlLLE1BQU0sR0FBR0MsR0FBRyxDQUFoQjs7QUFDQSxTQUFPRCxNQUFNLElBQUlBLE1BQU0sS0FBdkIsaUJBQTZDO0FBQ3pDLFFBQU1HLFVBQVUsR0FBRzlILGFBQWEsU0FBaEMsR0FBZ0MsQ0FBaEM7O0FBQ0Esb0JBQWdCO0FBQ1o4SSw4QkFBd0IsaUJBQXhCQSxVQUF3QixDQUF4QkE7QUFDQSxVQUFNYixxQkFBcUIsR0FBRyxHQUFHLENBQUgsMENBQ3ZCLEtBRHVCO0FBRTFCYyxXQUFHLEVBQUVqQixVQUFVLENBRlc7QUFHMUJrQixXQUFHLEVBQUVsQixVQUFVLENBQUNrQjtBQUhVLFNBQTlCOztBQUtBLFVBQUksQ0FBSix1QkFBNEI7QUFDeEI7QUFDQTtBQUNIOztBQUNEYiw2QkFBdUIsWUFBdkJBLEdBQXVCLENBQXZCQTtBQUNBO0FBQ0g7O0FBQ0RSLFVBQU0sR0FBRzVILE1BQU0sQ0FBTkEsZUFBVDRILE1BQVM1SCxDQUFUNEg7QUFDSDs7QUFDRCxNQUFJLDJCQUFDQyxHQUFHLENBQUhBLFFBQUQsdUJBQUNBLENBQUQscUJBQUNBLHNCQUFMLEdBQUtBLENBQUQsQ0FBSixFQUFrRDtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FuSSxPQUFHLElBQUksS0FBSixpQkFBNkJtSSxHQUFHLENBQWhDLEtBQTZCQSxHQUE3QixHQUE2QkEsR0FBYXZJLEdBQUcsQ0FBaERJLFFBQTZDSixFQUExQyxDQUFISTtBQUNIO0FBQ0o7O0FBRUQ7QUFNSXFKLDBCQUF3QixpQkFBeEJBLFVBQXdCLENBQXhCQTtBQUNBLFNBQU8sR0FBRyxDQUFILDBDQUdJLEtBSEo7QUFJQ0MsT0FBRyxFQUFFakIsVUFBVSxDQUpoQjtBQUtDa0IsT0FBRyxFQUFFbEIsVUFBVSxDQUFDa0I7QUFMakIsTUFBUCxTQUFPLENBQVA7QUFTSDs7QUFFRDtNQUVNNUIsc0M7TUFFQTJCLGU7O0FBRUYsTUFBSSxLQUFKLEVBQXFCLEVBS3BCO0FBQ0o7O1NDcEVlRSwwQixDQUEyQjlHLEksRUFBY3FGLE8sRUFBQUE7QUFDckQsU0FBTztBQUNISixtQkFBZSxFQURaO0FBRUhLLFlBQVEsRUFGTDtBQUdISixTQUFLLEVBSEY7QUFJSEMsV0FBTyxFQUFQQTtBQUpHLEdBQVA7QUFNSDs7QUFFRDs7O0FBQ0ksTUFBSUssTUFBTSxHQUFHQyxHQUFHLENBQWhCLFFBREosQ0FDSTtBQUVBOztBQUNBLFNBQU9ELE1BQU0sSUFBSUEsTUFBTSxLQUF2QixpQkFBNkM7QUFDekMsUUFBTUcsVUFBVSxHQUFHOUgsYUFBYSxTQUFoQyxHQUFnQyxDQUFoQzs7QUFDQSxvQkFBZ0I7QUFBQTs7QUFDWmtKLGdDQUEwQixpQkFBMUJBLFVBQTBCLENBQTFCQTtBQUNBLFVBQU1qQixxQkFBcUIsR0FBR0wsR0FBRyxDQUFIQSwrQkFFMUJFLFVBQVUsQ0FGZ0JGLGtEQUcxQixLQUgwQkEsNkJBRzFCLGVBSDBCQSw0Q0FBOUIsWUFBOEJBLENBQTlCOztBQUtBLFVBQUksQ0FBSix1QkFBNEI7QUFDeEI7QUFDQTtBQUNIOztBQUNETyw2QkFBdUIsWUFBdkJBLEdBQXVCLENBQXZCQTtBQUNBO0FBQ0g7O0FBQ0RSLFVBQU0sR0FBRzVILE1BQU0sQ0FBTkEsZUFBVDRILE1BQVM1SCxDQUFUNEg7QUFDSDs7QUFDRCxNQUFJLDJCQUFDQyxHQUFHLENBQUhBLFFBQUQsdUJBQUNBLENBQUQscUJBQUNBLHNCQUFMLEdBQUtBLENBQUQsQ0FBSixFQUFrRDtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FuSSxPQUFHLElBQUksS0FBSixpQkFBNkJtSSxHQUFHLENBQWhDLEtBQTZCQSxHQUE3QixHQUE2QkEsR0FBYXZJLEdBQUcsQ0FBaERJLFFBQTZDSixFQUExQyxDQUFISTtBQUNIO0FBQ0o7O0FBRUQ7OztBQU1JeUosNEJBQTBCLGlCQUExQkEsVUFBMEIsQ0FBMUJBO0FBQ0EsU0FBT3RCLEdBQUcsQ0FBSEEsK0JBRUhFLFVBQVUsQ0FGUEYsb0RBR0gsS0FIR0EsNkJBR0gsZ0JBSEdBLDJEQUFQLFNBQU9BLENBQVA7QUFNSDs7QUFFRDtNQUVNUixzQzs7QUFJRixNQUFJLEtBQUosRUFBeUMsRUFLeEM7QUFDSixDLENDL0JEOzs7QUFDTyxJQUFNK0IsOEJBQThCLEdBQTRCO0FBQ25FdEMsTUFBSSxFQUQrRDtBQUVuRTFFLE1BQUksRUFGK0Q7QUFHbkVpSCxrQkFBZ0IsRUFIbUQ7QUFJbkVDLE9BQUssRUFBRTtBQUo0RCxDQUFoRTtBQU1QdEosTUFBTSxDQUFOQTs7QUFFQSxTQUFnQnVKLHlCQUFoQixDQUEwQy9HLEtBQTFDLEVBQTBDQTtBQUN0QyxTQUFPQSxLQUFLLElBQVo7QUFDSDs7QUFFRCxJQUFNZ0gsb0JBQW9CLGdCQUFHTiwwQkFBMEIsQ0FBdkQsWUFBdUQsQ0FBdkQ7QUFDQSxJQUFNTyx1QkFBdUIsZ0JBQUdQLDBCQUEwQixtQkFBbUI7QUFDekVRLFVBQVEsRUFBRTNDO0FBRCtELENBQW5CLENBQTFEO0FBR0EsSUFBTTRDLDJCQUEyQixnQkFBR1QsMEJBQTBCLHVCQUF1QjtBQUNqRlEsVUFBUSxFQUFFakQ7QUFEdUUsQ0FBdkIsQ0FBOUQ7QUFHQSxJQUFNbUQsMEJBQTBCLGdCQUFHViwwQkFBMEIsc0JBQXNCO0FBQy9FUSxVQUFRLEVBQUV6QztBQURxRSxDQUF0QixDQUE3RDtBQUdBLElBQU00Qyw2QkFBNkIsZ0JBQUdwRyx5QkFBeUIsQ0FBL0Qsb0JBQStELENBQS9EOztBQUVBLFNBQWdCcUcsc0JBQWhCLENBQXVDckMsT0FBdkMsRUFBdUNBO0FBQ25DLFNBQU9BLE9BQU8sQ0FBUEEsK0JBRURBLE9BQU8sQ0FBUEEscUNBRUFzQyx5QkFBeUIsQ0FBQ3RDLE9BQU8sQ0FKdkMsZ0JBSStCLENBSi9CO0FBS0g7O0FBRUQsU0FBZ0J1Qyx3QkFBaEIsQ0FDSXZDLE9BREosRUFDSUE7QUFFQSxTQUFPQSxPQUFPLEdBQ1JBLE9BQU8sQ0FBUEEsdUNBRUlBLE9BQU8sQ0FBUEEsMkNBRUFBLE9BQU8sQ0FMSCxtQkFBZDtBQU9IOztBQUVELFNBQWdCc0MseUJBQWhCLENBQTBDckcsVUFBMUMsRUFBMENBOzs7QUFDdEMsU0FBTyw4RUFBNkJBLFVBQVUsQ0FBdkMsNkJBQTZCQSxxQkFBN0IsNENBQVA7QUFDSDtBQUVEOzs7Ozs7QUFJQTtBQUNJO0FBQ0EsTUFBSXZDLFdBQVcsQ0FBZixJQUFlLENBQWYsRUFBdUI7QUFDbkJ3QyxtQkFBZSxVQUFmQSxvQkFBZSxDQUFmQTtBQUNBO0FBQ0gsR0FMTCxDQUtLOzs7QUFHRCxNQUFJNEMsWUFBWSxDQUFoQixDQUFnQixDQUFoQixFQUFxQixTQVJ6QixDQVF5Qjs7QUFHckIsTUFBSWhGLGFBQWEsQ0FBakIsQ0FBaUIsQ0FBakIsRUFBc0IsT0FBTzBJLFVBQVUsQ0FBVkEsZ0JBQVAsSUFBT0EsQ0FBUCxDQVgxQixDQVcwQjs7QUFHdEIsTUFBSXpELEtBQUssQ0FBTEEsUUFBSixDQUFJQSxDQUFKLEVBQXNCLE9BQU95RCxVQUFVLENBQVZBLFNBQVAsSUFBT0EsQ0FBUCxDQWQxQixDQWMwQjs7QUFHdEIsTUFBSTFILFFBQVEsQ0FBWixDQUFZLENBQVosRUFBaUIsT0FBTzBILFVBQVUsQ0FBVkEsT0FBUCxJQUFPQSxDQUFQLENBakJyQixDQWlCcUI7O0FBR2pCLE1BQUl4SCxRQUFRLENBQVosQ0FBWSxDQUFaLEVBQWlCLE9BQU93SCxVQUFVLENBQVZBLE9BQVAsSUFBT0EsQ0FBUCxDQXBCckIsQ0FvQnFCOztBQUdqQixNQUFJLHlCQUF5QjVELENBQUMsS0FBOUIsTUFBeUMsU0F2QjdDLENBdUI2Qzs7QUFHekMsU0FBTzRELFVBQVUsQ0FBVkEsT0FBUCxJQUFPQSxDQUFQO0FBQ0g7O0FBQ0RqSyxNQUFNLENBQU5BO0FBd0NBLElBQU1rSyxtQkFBbUIsR0FBdUI7QUFDNUNDLEtBRDRDO0FBRXhDLFFBQU1DLENBQUMsR0FBR2IseUJBQXlCLENBQW5DLE9BQW1DLENBQW5DO0FBQ0EsV0FBTywyQkFBMkJPLHNCQUFzQixDQUFqRCxDQUFpRCxDQUFqRCxFQUFzRE0sQ0FBQyxDQUF2RCxZQUFvRUEsQ0FBQyxDQUE1RSxNQUFPLENBQVA7QUFId0M7QUFLNUNDLE9BTDRDO0FBTXhDLFFBQU1ELENBQUMsR0FBR2IseUJBQXlCLENBQW5DLE9BQW1DLENBQW5DO0FBQ0EsV0FBTyxDQUFDM0ksV0FBVyxDQUFYQSx3QkFBb0N3SixDQUFDLENBQURBLFVBQXBDeEosNEJBQUQsc0NBRXFDa0osc0JBQXNCLENBRjNELENBRTJELENBRjNELEVBRWdFTSxDQUFDLENBRnhFLElBQU8sQ0FBUDtBQVB3QztBQVc1Q0UsS0FYNEM7QUFleEMsUUFBTUYsQ0FBQyxHQUFHYix5QkFBeUIsQ0FBbkMsT0FBbUMsQ0FBbkM7QUFDQSxXQUFPLGlDQUF1Q08sc0JBQXNCLENBQTdELENBQTZELENBQTdELEVBQWtFTSxDQUFDLENBQTFFLElBQU8sQ0FBUDtBQWhCd0M7QUFrQjVDbkIsS0FsQjRDO0FBc0J4QyxRQUFNbUIsQ0FBQyxHQUFHYix5QkFBeUIsQ0FBbkMsT0FBbUMsQ0FBbkM7QUFDQSxXQUFPLGlDQUFvQ08sc0JBQXNCLENBQTFELENBQTBELENBQTFELEVBQStETSxDQUFDLENBQXZFLElBQU8sQ0FBUDtBQXZCd0M7QUF5QjVDdkksUUF6QjRDO0FBOEJ4QyxXQUFPMEksZ0JBQWdCLENBQ25CM0osV0FBVyxDQUFYQSx3QkFBb0MsUUFBTyxJQUFQLHVCQUFPLENBQVAsV0FBcENBLFFBQ000SixrQkFBa0IsS0FEeEI1SixPQUN3QixDQUR4QkEsR0FFTTZKLHlCQUF5QixLQUhaLE9BR1ksQ0FIWixTQUF2QixVQUF1QixDQUF2QjtBQTlCd0M7QUFzQzVDQyxLQUFHLGVBQUVqSCx5QkFBeUIsQ0F0Q2MsdUJBc0NkLENBdENjO0FBdUM1Q3lDLFNBQU8sZUFBRXpDLHlCQUF5QixDQXZDVSwyQkF1Q1YsQ0F2Q1U7QUF3QzVDcUQsTUFBSSxFQXhDd0M7QUF5QzVDNkQsUUFBTSxlQUFFbEgseUJBQXlCO0FBekNXLENBQWhELEMsQ0FBQTs7QUE2Q0EsSUFBV3dHLFVBQVUsZ0JBQXVCbEssTUFBTSxtQkFBM0MsbUJBQTJDLENBQWxEO0FDdk1PLElBQU02SyxRQUFRLEdBQWQ7QUFDQSxJQUFNQyxlQUFlLEdBQXJCO0FBV1AsSUFBTUMsa0JBQWtCLGdCQUFHaEMsd0JBQXdCLENBQW5ELFFBQW1ELENBQW5EO0FBQ0EsSUFBTWlDLHdCQUF3QixnQkFBR2pDLHdCQUF3QixrQkFBa0I7QUFDdkVrQyxRQUFNLEVBQUVqRixRQUFRLENBQUNFO0FBRHNELENBQWxCLENBQXpEO0FBSUE7Ozs7O0FBSUEsSUFBYWdGLFFBQVEsR0FBcUI7QUFDdEMsTUFBSTlKLFdBQVcsQ0FBZixJQUFlLENBQWYsRUFBdUI7QUFDbkI7QUFDQSxXQUFPd0MsZUFBZSxhQUF0QixrQkFBc0IsQ0FBdEI7QUFDSDs7QUFDRCxNQUFJcEMsYUFBYSxDQUFqQixJQUFpQixDQUFqQixFQUF5QjtBQUNyQjtBQUNBLFdBQU9rQyx5QkFBeUIsQ0FBQ3FGLHdCQUF3QixXQUF6RCxJQUF5RCxDQUF6QixDQUFoQztBQUNILEdBUnFDLENBUXJDOzs7QUFHRCxhQUFhLEVBTVo7O0FBQ0QsTUFBTW9DLElBQUksR0FBK0IzSixhQUFhLENBQWJBLElBQWEsQ0FBYkEsVUFBekM7QUFDQTJKLE1BQUksQ0FBSkE7QUFDQUEsTUFBSSxDQUFKQSxhQUFJLENBQUpBLE9BQWNDLElBQUksQ0FBSkEsUUFBZEQ7QUFBOEI7O0FBRTlCLFNBQU8sa0JBQVAsSUFBTyxDQUFQO0FBdEJHLENBQVA7O0FBeUJBbEwsTUFBTSxDQUFOQTtBQUVBaUwsUUFBUSxDQUFSQSxzQkFBa0J4SCx5QkFBeUIsQ0FBM0N3SCx3QkFBMkMsQ0FBM0NBOzsyQ0MzQ0E7OztBQUNBLElBQUlHLGVBQWUsR0FBbkI7QUFDQSxJQUFJQyxZQUFZLEdBQWhCO0FBQ0EsSUFBTUMsMEJBQTBCLDJEQUFHckwsYUFBYSxDQUFDLGFBQUQsR0FBaEIsTUFBZ0IsQ0FBaEIscUJBQUdBLGVBQUgsZ0RBQWhDLE0sQ0FBQTs7QUFHQSxJQUFNc0wsaUJBQWlCLEdBQXVCO0FBQzFDbkssT0FBSyxFQURxQztBQUUxQ2EsY0FBWSxFQUY4QjtBQUcxQ0QsVUFBUSxFQUhrQztBQUkxQ0QsWUFBVSxFQUFFO0FBSjhCLENBQTlDOztBQU9BLFNBQWdCd0csWUFBaEIsQ0FDSWlELFVBREosRUFFSXRLLEVBRkosRUFHSXVLLFVBSEosRUFJSWYsR0FKSixFQUlJQTtNQURBZSxxQixFQUFBQTtBQUFBQSxpQkFBc0IsS0FBdEJBOzs7QUFHQSxhQUFhLEVBSVo7O0FBQ0Q7QUFDSSxXQUFPQyxhQUFhLDZCQUE2QmhCLEdBQUcsSUFBaEMsTUFBcEIsU0FBb0IsQ0FBcEI7QUFDSDs7QUFDRHBILEtBQUcsQ0FBSEE7O0FBQ0Esa0NBQWdDO0FBQzVCaUkscUJBQWlCLENBQWpCQTtBQUNBdkwsVUFBTSxDQUFOQTtBQUNIOztBQUNEO0FBQ0g7O0FBRUQsU0FBZ0IwTCxhQUFoQixDQUNJRixVQURKLEVBRUlHLGtCQUZKLEVBR0l6SyxFQUhKLEVBSUkwSyxLQUpKLEVBS0loTSxJQUxKLEVBS0lBO0FBRUEsTUFBTWlNLE9BQU8sR0FBR0MsWUFBWSx3Q0FBNUIsSUFBNEIsQ0FBNUI7O0FBQ0EsTUFBSTtBQUNBLFdBQU81SyxFQUFFLENBQUZBLGFBQVAsSUFBT0EsQ0FBUDtBQURKLElBRUUsWUFBWTtBQUNWMkssV0FBTyxDQUFQQTtBQUNBO0FBSkosWUFLVTtBQUNORSxjQUFVLENBQVZBLE9BQVUsQ0FBVkE7QUFDSDtBQUNKOztBQWNELFNBQWdCRCxZQUFoQixDQUNJTixVQURKLEVBRUlHLGtCQUZKLEVBRUlBO0FBQ0FDLEtBSEosRUFJSWhNLElBSkosRUFJSUE7QUFFQSxNQUFNb00sVUFBVSxHQUFHLFVBQTZCLEtBQWhEO0FBQ0EsTUFBSUMsVUFBVSxHQUFkOztBQUNBLE1BQUksS0FBSixFQUEyQixzQkFTMUI7O0FBQ0QsTUFBTUMsZUFBZSxHQUFHdEwsV0FBVyxDQUFuQztBQUNBLE1BQU11TCxXQUFXLEdBQUcsdUJBQXVCLENBQTNDO0FBQ0FqSCxZQUFVO0FBQ1YsTUFBSWtILHNCQUFzQixHQUFHeEwsV0FBVyxDQUF4QyxrQkFqQkFoQixDQWlCQTs7QUFDQSxtQkFBaUI7QUFDYnlNLGtCQUFjO0FBQ2RELDBCQUFzQixHQUFHRSxzQkFBc0IsQ0FBL0NGLElBQStDLENBQS9DQTtBQUNIOztBQUNELE1BQU1HLG9CQUFvQixHQUFHQyxvQkFBb0IsQ0FBakQsSUFBaUQsQ0FBakQ7QUFDQSxNQUFNWCxPQUFPLEdBQUc7QUFDWlksZ0JBQVksRUFEQTtBQUVaUCxtQkFBZSxFQUZIO0FBR1pFLDBCQUFzQixFQUhWO0FBSVpHLHdCQUFvQixFQUpSO0FBS1pQLGNBQVUsRUFMRTtBQU1aQyxjQUFVLEVBTkU7QUFPWlMsYUFBUyxFQUFFckIsWUFQQztBQVFac0IsbUJBQWUsRUFBRXZCO0FBUkwsR0FBaEI7QUFVQUEsaUJBQWUsR0FBR1MsT0FBTyxDQUF6QlQ7QUFDQTtBQUNIOztBQUVELFNBQWdCVyxVQUFoQixDQUEyQkYsT0FBM0IsRUFBMkJBO0FBQ3ZCLE1BQUlULGVBQWUsS0FBS1MsT0FBTyxDQUEvQixXQUEyQztBQUN2Q25NLE9BQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNIOztBQUNEMEwsaUJBQWUsR0FBR1MsT0FBTyxDQUF6QlQ7O0FBRUEsTUFBSVMsT0FBTyxDQUFQQSxXQUFKLFdBQWtDO0FBQzlCakwsZUFBVyxDQUFYQTtBQUNIOztBQUNEZ00sc0JBQW9CLENBQUNmLE9BQU8sQ0FBNUJlLHNCQUFvQixDQUFwQkE7QUFDQUMsb0JBQWtCLENBQUNoQixPQUFPLENBQTFCZ0Isb0JBQWtCLENBQWxCQTtBQUNBekgsVUFBUTtBQUNSLE1BQUl5RyxPQUFPLENBQVgsY0FBMEJpQixZQUFZLENBQUNqQixPQUFPLENBQXBCaUIsZUFBWSxDQUFaQTs7QUFDMUIsTUFBSSxLQUFKLEVBQW1DLEVBRWxDOztBQUNEbE0sYUFBVyxDQUFYQTtBQUNIOztBQUVELFNBQWdCbU0saUJBQWhCLENBQXFDQSxpQkFBckMsRUFBaUVqTSxJQUFqRSxFQUFpRUE7QUFDN0QsTUFBTWtNLElBQUksR0FBR1Ysc0JBQXNCLENBQW5DLGlCQUFtQyxDQUFuQzs7QUFDQSxNQUFJO0FBQ0EsV0FBT3hMLElBQVA7QUFESixZQUVVO0FBQ044TCx3QkFBb0IsQ0FBcEJBLElBQW9CLENBQXBCQTtBQUNIO0FBQ0o7O0FBRUQsU0FBZ0JOLHNCQUFoQixDQUF1Q1MsaUJBQXZDLEVBQXVDQTtBQUNuQyxNQUFNQyxJQUFJLEdBQUdwTSxXQUFXLENBQXhCO0FBQ0FBLGFBQVcsQ0FBWEE7QUFDQTtBQUNIOztBQUVELFNBQWdCZ00sb0JBQWhCLENBQXFDSSxJQUFyQyxFQUFxQ0E7QUFDakNwTSxhQUFXLENBQVhBO0FBQ0g7Ozs7QUN2R0QsSUFBTXFNLE1BQU0sR0FBWjtzQkE4SEt6SixNQUFNLENBQUNQLFc7O0FBNUhaLElBQWFpSyxlQUFiO0FBQUE7O0FBU0k7OztRQUdXaEosZ0IsRUFBQUE7QUFBQUEsY0FBUSxTQUFVLFNBQVYsR0FBNkMsaUJBQXJEQTs7O1FBQ1BpSixvQixFQUFBQTtBQUFBQSxrQkFBWSxJQUFaQTs7O1FBQ1FuQyxpQixFQUFBQTtBQUFBQSxlQUErQmpGLFFBQVEsV0FBdkNpRjs7O0FBRVI7VUFMTyxRLEdBQUEsTTtVQUNBOUcsSyxHQUFBQSxNO1VBRUM4RyxNLEdBQUFBLE07VUFYWm9DLG9CLEdBQXVCLEs7VUFDdkJDLGEsR0FBQUEsTTtVQUNBQyxnQixHQUFBQSxNO1VBQ0FDLE0sR0FBQUEsTTtVQUNBQyxRLEdBQUFBLE07QUFJVztBQUNBdEo7QUFFQzhHO0FBR1IsbUJBQWN0QixRQUFRLG1CQUF0QixLQUFzQixDQUF0Qjs7QUFDQSxRQUFJLEtBQUosRUFBNEMsRUFTM0M7OztBQUNKOztBQTVCTDs7QUFBQSx3QkE4QlkrRDtBQUNKLFFBQUksa0JBQUosV0FBaUMsT0FBTyxjQUFQLEtBQU8sQ0FBUDtBQUNqQztBQWhDUjs7QUFBQSxlQW1DV3hFO0FBQ0gsUUFBTS9CLFFBQVEsR0FBRyxLQUFqQjtBQUNBRixZQUFRLEdBQUcsc0JBQVhBLFFBQVcsQ0FBWEE7O0FBQ0EsUUFBSUEsUUFBUSxLQUFLcEcsV0FBVyxDQUE1QixXQUF3QztBQUNwQyxVQUFNdU0sU0FBUyxHQUFHTyxZQUFsQjs7QUFDQSxVQUFJLEtBQUosRUFBMEIsRUFTekI7O0FBQ0Q7QUFDQSxVQUFJLEtBQUosRUFBMEJDLEVBQVk7QUFDekM7QUFwRFQ7O0FBQUEsNEJBdURZQztBQUNKQyx1Q0FBbUMsQ0FBbkNBLElBQW1DLENBQW5DQTs7QUFDQSxRQUFJQyxlQUFlLENBQW5CLElBQW1CLENBQW5CLEVBQTJCO0FBQ3ZCLFVBQU1DLE1BQU0sR0FBR0MsZUFBZSxPQUE0QjtBQUN0RG5NLGNBQU0sRUFEZ0Q7QUFFdERvTSxZQUFJLEVBRmtEO0FBR3REakgsZ0JBQVEsRUFBUkE7QUFIc0QsT0FBNUIsQ0FBOUI7QUFLQSxVQUFJLENBQUosUUFBYSxPQUFPcEcsV0FBVyxDQUFsQjtBQUNib0csY0FBUSxHQUFHK0csTUFBTSxDQUFqQi9HO0FBQ0gsS0FWRzRHLENBVUg7OztBQUVENUcsWUFBUSxHQUFHLHdCQUF3QixLQUF4QixRQUFxQyxLQUFoREEsS0FBVyxDQUFYQTtBQUNBLFdBQU8sWUFBWSxLQUFaLG9CQUFxQ3BHLFdBQVcsQ0FBaEQsWUFBUDtBQXBFUjs7QUFBQSx3QkF1RUlzTjtBQUNJLFFBQU1oSCxRQUFRLEdBQUcsS0FBakI7QUFDQTtBQUNBOztBQUNBLFFBQUlpSCxZQUFZLENBQWhCLElBQWdCLENBQWhCLEVBQXdCO0FBQ3BCQyxxQkFBZSxPQUFPO0FBQ2xCSCxZQUFJLEVBRGM7QUFFbEJwTSxjQUFNLEVBRlk7QUFHbEJtRixnQkFBUSxFQUhVO0FBSWxCRSxnQkFBUSxFQUFSQTtBQUprQixPQUFQLENBQWZrSDtBQU1IO0FBbEZUOztBQUFBLGVBcUZXcEY7QUFDSDtBQUNBLFdBQU8sa0JBQWtCLEtBQXpCLE1BQU8sQ0FBUDtBQXZGUjs7QUFBQSxzQkEwRklxRjtBQUNJLFdBQU9DLG1CQUFtQixPQUExQixPQUEwQixDQUExQjtBQTNGUjs7QUFBQSxvQkE4RklDO0FBQ0kseUJBQ0ksUUFBUSxDQUFDO0FBQ0xDLG9CQUFjLEVBRFQ7QUFFTEMscUJBQWUsRUFBRSxLQUZaO0FBR0w1TSxZQUFNLEVBSEQ7QUFJTG9NLFVBQUksRUFKQztBQUtMakgsY0FBUSxFQUFFLEtBTEw7QUFNTEUsY0FBUSxFQUFFd0g7QUFOTCxLQUFELENBQVI7QUFRSixXQUFPQyxnQkFBZ0IsT0FBdkIsUUFBdUIsQ0FBdkI7QUF4R1I7O0FBQUEsZUEyR0lDO0FBQ0k7QUFDQSxXQUFPLEtBQVA7QUE3R1I7O0FBQUEsa0JBZ0hJQztBQUNJLFdBQU8sS0FBUCxHQUFPLEVBQVA7QUFqSFI7O0FBQUEsb0JBb0hJeEo7QUFDSSxXQUFVLEtBQVYsS0FBVSxHQUFWLEdBQVUsR0FBYyxLQUF4QixNQUFVLEdBQVY7QUFySFI7O0FBQUEsbUJBd0hJeUo7QUFDSSxXQUFPN0wsV0FBVyxDQUFDLEtBQW5CLEdBQW1CLEVBQUQsQ0FBbEI7QUF6SFI7O0FBQUEsZ0NBNEhJO0FBQ0ksV0FBTyxLQUFQLE9BQU8sRUFBUDtBQTdIUjs7QUFBQTtBQUFBOztBQWlJQSxJQUFhOEwsaUJBQWlCLGdCQUFHNU0seUJBQXlCLG9CQUFuRCxlQUFtRCxDQUExRDs7O0FDbklBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBeVBLcUIsTUFBTSxDQUFDUCxXOztBQXRPWixJQUFhK0wsYUFBYjtBQUVtQztBQUNWO0FBWVM7QUFFVjs7QUFRcEI7Ozs7Ozs7Ozs7OztBQVlBO1NBcENBQyxrQixHQUFxQnhLLGlCQUFpQixDQUFDQyxhO1NBQ3ZDd0ssVSxHQUE0QixFO1NBQzVCQyxhLEdBQWdCLEk7U0FDaEIvSyxnQixHQUFtQixLO1NBQ25CRCx1QixHQUFtQyxLO1NBQ25DRSxVLEdBQWEsUztTQUNiQyxVLEdBQWEsQztTQUNiOEssTSxHQUFTLEM7U0FDVDdLLGUsR0FBa0IsQztTQUNsQkMsb0IsR0FBdUJDLGlCQUFpQixDQUFDNEssVztTQUN6Q0MsaUIsR0FBb0IsQztTQUNWL0IsTSxHQUEwQyx5QjtTQUNwRHJKLEssR0FBQUEsTTtTQUNBcUwsWSxHQUFBQSxNO1NBQ0FDLFksR0FBd0IsSztTQUN4QkMsZ0IsR0FBNEIsSztTQUM1QkMsVSxHQUFBQSxNO1NBQ0FDLE8sR0FBQUEsTTtTQUNBQyxVLEdBQXdCQyxTQUFTLENBQUNDLEk7U0FDbENDLE0sR0FBQUEsTTtTQUNRQyxPLEdBQUFBLE07U0FDQUMsaUIsR0FBQUEsTTtTQUNSQyxVLEdBQUFBLE07U0FzQ092TCxLLEdBQUFBLE07U0FDQUMsTSxHQUFBQSxNO0FBeEJILFFBQUksQ0FBQzZDLE9BQU8sQ0FBWixLQUFrQi9ILEdBQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNsQixzQkFBa0IrSCxPQUFPLENBQXpCO0FBQ0EsaUJBQWFBLE9BQU8sQ0FBUEEsU0FBaUIsU0FBVSxTQUFWLEdBQTlCLGVBQWFBLENBQWI7O0FBQ0EsUUFBSUEsT0FBTyxDQUFYLEtBQWlCO0FBQ2IscUJBQWVjLFlBQVksQ0FDdkIsU0FBVSxTQUFWLEdBRHVCLHdCQUV2QmQsT0FBTyxDQUZYLEdBQTJCLENBQTNCO0FBSUg7O0FBQ0QsbUJBQ0lBLE9BQU8sQ0FBUEEsV0FDRUEsT0FBZSxDQUFmQSxxQkFBc0NBLE9BQWUsQ0FBckRBLFNBQ0kxQixRQUFRLENBRFowQixhQUVJMUIsUUFBUSxDQUpsQixTQUlrQixDQUhkMEIsQ0FESjtBQUtBLGtCQUFjQSxPQUFPLENBQXJCO0FBQ0EsNkJBQXlCLENBQUMsQ0FBQ0EsT0FBTyxDQUFsQztBQUNBLHNCQUFrQixDQUFDLENBQUNBLE9BQU8sQ0FBM0I7QUFDSDs7QUF2REw7O0FBQUEsMEJBeURJMEk7QUFDSUMseUJBQXFCLENBQXJCQSxJQUFxQixDQUFyQkE7QUExRFI7O0FBQUEsZ0JBZ0VXdkw7QUFDSCxRQUFJLEtBQUosT0FBZ0I7QUFDWix5QkFBbUIsb0JBQVE7QUFBQSxlQUFJQyxRQUFKO0FBQTNCO0FBQ0g7QUFuRVQ7O0FBQUEsaUJBc0VXQztBQUNILFFBQUksS0FBSixRQUFpQjtBQUNiLDBCQUFvQixvQkFBUTtBQUFBLGVBQUlELFFBQUo7QUFBNUI7QUFDSDtBQUNKO0FBRUQ7Ozs7QUE1RUo7O0FBQUEsZUFnRldrRTtBQUNILFFBQUksS0FBSixjQUF1QnRKLEdBQUcsS0FBSyxLQUFMLE9BQWlCLEtBQXBCQSxVQUFHLENBQUhBOztBQUN2QixRQUNJa0IsV0FBVyxDQUFYQTtBQUVBLDZCQUZBQSxLQUdBLENBQUMsS0FKTCxZQUtFO0FBQ0UsVUFBSXlQLGFBQWEsQ0FBakIsSUFBaUIsQ0FBakIsRUFBeUI7QUFDckI7QUFDQW5MLGtCQUZxQjs7QUFHckIsc0JBQWMsbUJBQWQsS0FBYyxDQUFkO0FBQ0FFLGdCQUFRO0FBQ1g7QUFYTCxXQVlPO0FBQ0hKLG9CQUFjLENBQWRBLElBQWMsQ0FBZEE7O0FBQ0EsVUFBSXFMLGFBQWEsQ0FBakIsSUFBaUIsQ0FBakIsRUFBeUI7QUFDckIsWUFBSUMsbUJBQW1CLEdBQUcxUCxXQUFXLENBQXJDO0FBQ0EsWUFBSSxtQkFBbUIsQ0FBdkIscUJBQTZDQSxXQUFXLENBQVhBO0FBQzdDLFlBQUksS0FBSixlQUFJLEVBQUosRUFBNEIyUCx3QkFBd0IsQ0FBeEJBLElBQXdCLENBQXhCQTtBQUM1QjNQLG1CQUFXLENBQVhBO0FBQ0g7QUFDSjs7QUFDRCxRQUFNNFAsTUFBTSxHQUFHLEtBQWY7QUFFQSxRQUFJQyxpQkFBaUIsQ0FBckIsTUFBcUIsQ0FBckIsRUFBK0IsTUFBTUQsTUFBTSxDQUFaO0FBQy9CO0FBMUdSOztBQUFBLGVBNkdXdkg7QUFDSCxRQUFJLEtBQUosU0FBa0I7QUFDZCxVQUFJLEtBQUosa0JBQTJCdkosR0FBRyxLQUFLLEtBQVJBLEtBQUcsQ0FBSEE7QUFDM0I7O0FBQ0EsVUFBSTtBQUNBLDBCQUFrQixLQUFsQjtBQURKLGdCQUVVO0FBQ047QUFDSDtBQVBMLFdBUU9BLEdBQUcsS0FBSyxLQUFSQSxLQUFHLENBQUhBO0FBdEhmOztBQUFBLDJCQXlISWdSO0FBQ0k7QUFDQSxRQUFNeEosUUFBUSxHQUFHLEtBQWpCO0FBQ0EsUUFBTXlKLFlBQVk7QUFDZDtBQUFnQixnQ0FBNEJsTSxpQkFBaUIsQ0FEakU7QUFFQSxRQUFNdUMsUUFBUSxHQUFHLG1CQUFqQixJQUFpQixDQUFqQjs7QUFFQSxRQUFJLEtBQUosRUFBK0IsRUFTOUI7O0FBRUQsUUFBTTRKLE9BQU8sR0FDVEQsWUFBWSxJQUNaRixpQkFBaUIsQ0FEakJFLFFBQ2lCLENBRGpCQSxJQUVBRixpQkFBaUIsQ0FGakJFLFFBRWlCLENBRmpCQSxJQUdBLENBQUMsdUJBSkwsUUFJSyxDQUpMOztBQU1BLGlCQUFhO0FBQ1Q7QUFDSDs7QUFFRDtBQXJKUjs7QUFBQSx5QkF3SklFO0FBQ0ksNkJBREpBLENBQ0k7O0FBRUEsUUFBTTdELElBQUksR0FBR1Ysc0JBQXNCLENBQW5DLEtBQW1DLENBQW5DO0FBQ0E7O0FBQ0EsZUFBVztBQUNQaEosU0FBRyxHQUFHd04sb0JBQW9CLE9BQU8sS0FBUCxZQUF3QixLQUFsRHhOLE1BQTBCLENBQTFCQTtBQURKLFdBRU87QUFDSCxVQUFJMUMsV0FBVyxDQUFYQSwyQkFBSixNQUFpRDtBQUM3QzBDLFdBQUcsR0FBRyxxQkFBcUIsS0FBM0JBLE1BQU0sQ0FBTkE7QUFESixhQUVPO0FBQ0gsWUFBSTtBQUNBQSxhQUFHLEdBQUcscUJBQXFCLEtBQTNCQSxNQUFNLENBQU5BO0FBREosVUFFRSxVQUFVO0FBQ1JBLGFBQUcsR0FBRyxvQkFBTkEsQ0FBTSxDQUFOQTtBQUNIO0FBQ0o7QUFDSjs7QUFDRHNKLHdCQUFvQixDQUFwQkEsSUFBb0IsQ0FBcEJBO0FBQ0E7QUFDQTtBQTVLUjs7QUFBQSxvQkErS0ltRTtBQUNJLFFBQUksQ0FBQyxLQUFMLFlBQXNCO0FBQ2xCQyxvQkFBYyxDQUFkQSxJQUFjLENBQWRBO0FBQ0Esb0JBRmtCLFNBRWxCLENBRmtCO0FBR3JCO0FBbkxUOztBQUFBLG9CQXNMSXpDOzs7QUFDSSxRQUFJMEMsU0FBUyxHQUFiO0FBQ0EsUUFBSUMsU0FBUyxHQUFiO0FBQ0EsV0FBT0MsT0FBTyxDQUFDO0FBQ1g7QUFDQSxVQUFJbkssUUFBUSxHQUFHLEtBQUksQ0FBbkIsR0FBZSxFQUFmOztBQUNBLFVBQUksY0FBSixpQkFBbUM7QUFDL0IsWUFBTW9LLEtBQUssR0FBRy9FLGNBQWQ7QUFDQXZILGdCQUFRLENBQUM7QUFDTDBKLHdCQUFjLEVBRFQ7QUFFTEMseUJBQWUsRUFBRSxLQUFJLENBRmhCO0FBR0xSLGNBQUksRUFIQztBQUlMcE0sZ0JBQU0sRUFKRDtBQUtMbUYsa0JBQVEsRUFMSDtBQU1MRSxrQkFBUSxFQUFFZ0s7QUFOTCxTQUFELENBQVJwTTtBQVFBZ0ksb0JBQVksQ0FBWkEsS0FBWSxDQUFaQTtBQUNIOztBQUNEbUUsZUFBUyxHQUFUQTtBQUNBQyxlQUFTLEdBQVRBO0FBaEJKLEtBQWMsQ0FBZDtBQXpMUjs7QUFBQSxtQ0E2TUlHO0FBQ0ksUUFBSSxJQUFKLEVBQWM7O0FBQ2QsUUFBSSwyQkFBSixNQUFxQztBQUNqQzNSLFNBQUcsNEJBQTBCLEtBQTFCLFFBQUhBLHFDQUFHLENBQUhBO0FBQ0g7O0FBQ0QsUUFBSSxvQkFBb0JtUSxTQUFTLENBQWpDLE1BQXdDO0FBQ3BDeUIsYUFBTyxDQUFQQSx1QkFDcUIsS0FEckJBO0FBR0g7O0FBQ0QsUUFBSTFRLFdBQVcsQ0FBZiwwQkFBMEM7QUFDdEMwUSxhQUFPLENBQVBBLGdDQUM2QixLQUQ3QkE7QUFHSDtBQTNOVDs7QUFBQSxvQkE4TklqTTtBQUNJLFdBQVUsS0FBVixLQUFVLEdBQVYsR0FBVSxHQUFjLGdCQUF4QixRQUF3QixFQUFkLEdBQVY7QUEvTlI7O0FBQUEsbUJBa09JeUo7QUFDSSxXQUFPN0wsV0FBVyxDQUFDLEtBQW5CLEdBQW1CLEVBQUQsQ0FBbEI7QUFuT1I7O0FBQUEsa0NBc09JO0FBQ0ksV0FBTyxLQUFQLE9BQU8sRUFBUDtBQXZPUjs7QUFBQTtBQUFBOztBQTJPTyxJQUFNc08sZUFBZSxnQkFBR3BQLHlCQUF5QixrQkFBakQsYUFBaUQsQ0FBakQ7QUMvU1A7O0FBQUEsV0FBWXNDLGlCQUFaLEVBQVlBO0FBQ1I7QUFDQTtBQUNBQSwrRUFIUUEsQ0FHUkE7QUFFQTtBQUNBOztBQUNBQSwwRUFQUUEsQ0FPUkE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBQSxrRkFkUUEsQ0FjUkE7QUFFQTs7QUFDQUE7QUFqQkosR0FBWUEsaUJBQWlCLEtBQWpCQSxpQkFBaUIsR0FBN0IsRUFBNkIsQ0FBN0I7O0FBb0JBOztBQUFBLFdBQVlvTCxTQUFaLEVBQVlBO0FBQ1JBO0FBQ0FBO0FBQ0FBO0FBSEosR0FBWUEsU0FBUyxLQUFUQSxTQUFTLEdBQXJCLEVBQXFCLENBQXJCOztBQWdDQSxJQUFhMkIsZUFBYixHQUNJO09BQW1CLEssR0FBQSxNO0FBQUEscUJBQW5CLENBQW1CO0FBRHZCOztBQU1BLFNBQWdCZixpQkFBaEIsQ0FBa0NnQixDQUFsQyxFQUFrQ0E7QUFDOUIsU0FBT0EsQ0FBQyxZQUFSO0FBQ0g7QUFFRDs7Ozs7Ozs7Ozs7OztBQVdBLFNBQWdCcEIsYUFBaEIsQ0FBOEJYLFVBQTlCLEVBQThCQTtBQUMxQixVQUFRQSxVQUFVLENBQWxCO0FBQ0ksU0FBS2pMLGlCQUFpQixDQUF0QjtBQUNJOztBQUNKLFNBQUtBLGlCQUFpQixDQUF0QjtBQUNBLFNBQUtBLGlCQUFpQixDQUF0QjtBQUNJOztBQUNKLFNBQUtBLGlCQUFpQixDQUF0QjtBQUF3QztBQUNwQztBQUNBLFlBQU1pTixtQkFBbUIsR0FBR2xGLG9CQUFvQixDQUFoRCxJQUFnRCxDQUFoRDtBQUNBLFlBQU1tRixhQUFhLEdBQUd0RixjQUhjLEVBR3BDLENBSG9DOztBQUlwQyxZQUFNdUYsR0FBRyxHQUFHbEMsVUFBVSxDQUF0QjtBQUFBLFlBQ0ltQyxDQUFDLEdBQUdELEdBQUcsQ0FEWDs7QUFFQSxhQUFLLElBQUlFLENBQUMsR0FBVixHQUFnQkEsQ0FBQyxHQUFqQixHQUF1QkEsQ0FBdkIsSUFBNEI7QUFDeEIsY0FBTXBRLEdBQUcsR0FBR2tRLEdBQUcsQ0FBZixDQUFlLENBQWY7O0FBQ0EsY0FBSUwsZUFBZSxDQUFuQixHQUFtQixDQUFuQixFQUEwQjtBQUN0QixnQkFBSTNRLFdBQVcsQ0FBZix3QkFBd0M7QUFDcENjLGlCQUFHLENBQUhBO0FBREosbUJBRU87QUFDSCxrQkFBSTtBQUNBQSxtQkFBRyxDQUFIQTtBQURKLGdCQUVFLFVBQVU7QUFDUjtBQUNBb0wsNEJBQVksQ0FBWkEsYUFBWSxDQUFaQTtBQUNBRCxrQ0FBa0IsQ0FBbEJBLG1CQUFrQixDQUFsQkE7QUFDQTtBQUNIO0FBWGlCO0FBY3RCO0FBQ0E7OztBQUNBLGdCQUFLNkMsVUFBVSxDQUFWQSx1QkFBMENqTCxpQkFBaUIsQ0FBaEUsUUFBeUU7QUFDckVxSSwwQkFBWSxDQUFaQSxhQUFZLENBQVpBO0FBQ0FELGdDQUFrQixDQUFsQkEsbUJBQWtCLENBQWxCQTtBQUNBO0FBQ0g7QUFDSjtBQUNKOztBQUNEa0Ysa0NBQTBCLENBQTFCQSxVQUEwQixDQUExQkE7QUFDQWpGLG9CQUFZLENBQVpBLGFBQVksQ0FBWkE7QUFDQUQsMEJBQWtCLENBQWxCQSxtQkFBa0IsQ0FBbEJBO0FBQ0E7QUFDSDtBQXpDTDtBQTJDSDs7QUFFRCxTQUFnQm1GLHFCQUFoQixHQUFnQkE7QUFDWixTQUFPcFIsV0FBVyxDQUFYQSx1QkFBUCxLQURZb1IsQ0FDWjtBQUNIOztBQUVELFNBQWdCbkUsbUNBQWhCLENBQW9EbkksSUFBcEQsRUFBb0RBO0FBQ2hELE1BQUksSUFBSixFQUFjO0FBQ1Y7QUFDSDs7QUFDRCxNQUFNdU0sWUFBWSxHQUFHdk0sSUFBSSxDQUFKQSxrQkFBckIsRUFKZ0RBLENBSWhEOztBQUVBLE1BQUksQ0FBQzlFLFdBQVcsQ0FBWixzQkFBbUNxUixZQUFZLElBQUlyUixXQUFXLENBQVhBLG1CQUF2RCxRQUFJLENBQUosRUFDSTBRLE9BQU8sQ0FBUEEsS0FDSSxhQUNLMVEsV0FBVyxDQUFYQSxtSkFETCxtU0FJSThFLElBQUksQ0FMWjRMO0FBT1A7O0FBRUQsU0FBZ0JZLDJCQUFoQixDQUE0Q2pJLFVBQTVDLEVBQTRDQTtBQUN4QyxNQUFJLEtBQUosRUFBdUYsRUFFdEY7QUFDSjtBQUVEOzs7Ozs7O0FBS0EsU0FBZ0I2RyxvQkFBaEIsQ0FBd0NwQixVQUF4QyxFQUFpRXlDLENBQWpFLEVBQTZFQyxPQUE3RSxFQUE2RUE7QUFDekUsTUFBTVYsbUJBQW1CLEdBQUdsRixvQkFBb0IsQ0FBaEQsSUFBZ0QsQ0FBaEQsQ0FEeUU0RixDQUN6RTtBQUVBOztBQUNBTCw0QkFBMEIsQ0FBMUJBLFVBQTBCLENBQTFCQTtBQUNBckMsWUFBVSxDQUFWQSxnQkFBMkIsVUFBVUEsVUFBVSxDQUFWQSxvQkFBckNBLEdBQTJCLENBQTNCQTtBQUNBQSxZQUFVLENBQVZBO0FBQ0FBLFlBQVUsQ0FBVkEsU0FBb0IsRUFBRTlPLFdBQVcsQ0FBakM4TztBQUNBLE1BQU0yQyxZQUFZLEdBQUd6UixXQUFXLENBQWhDO0FBQ0FBLGFBQVcsQ0FBWEE7QUFDQUEsYUFBVyxDQUFYQTtBQUNBOztBQUNBLE1BQUlBLFdBQVcsQ0FBWEEsMkJBQUosTUFBaUQ7QUFDN0M0UCxVQUFNLEdBQUcyQixDQUFDLENBQURBLEtBQVQzQixPQUFTMkIsQ0FBVDNCO0FBREosU0FFTztBQUNILFFBQUk7QUFDQUEsWUFBTSxHQUFHMkIsQ0FBQyxDQUFEQSxLQUFUM0IsT0FBUzJCLENBQVQzQjtBQURKLE1BRUUsVUFBVTtBQUNSQSxZQUFNLEdBQUcsb0JBQVRBLENBQVMsQ0FBVEE7QUFDSDtBQUNKOztBQUNENVAsYUFBVyxDQUFYQTtBQUNBQSxhQUFXLENBQVhBO0FBQ0EwUixrQkFBZ0IsQ0FBaEJBLFVBQWdCLENBQWhCQTtBQUVBQyx3Q0FBc0MsQ0FBdENBLFVBQXNDLENBQXRDQTtBQUNBMUYsb0JBQWtCLENBQWxCQSxtQkFBa0IsQ0FBbEJBO0FBQ0E7QUFDSDs7QUFFRDtBQUNJLE1BQUksSUFBSixFQUFjO0FBRWQsTUFBSTZDLFVBQVUsQ0FBVkEsc0JBQUosR0FBd0M7O0FBRXhDLE1BQUk5TyxXQUFXLENBQVhBLDhCQUEwQzhPLFVBQVUsQ0FBeEQscUJBQThFO0FBQzFFNEIsV0FBTyxDQUFQQSw0QkFDeUI1QixVQUFVLENBRG5DNEI7QUFHSDtBQUNKO0FBRUQ7Ozs7Ozs7QUFLQTtBQUNJO0FBQ0EsTUFBTWtCLGFBQWEsR0FBRzlDLFVBQVUsQ0FBaEM7QUFDQSxNQUFNK0MsU0FBUyxHQUFJL0MsVUFBVSxDQUFWQSxhQUF3QkEsVUFBVSxDQUFyRDtBQUNBLE1BQUlnRCxpQ0FBaUMsR0FBR2pPLGlCQUFpQixDQUF6RCxZQUpKLENBSUk7QUFHQTtBQUNBOztBQUNBLE1BQUlrTyxFQUFFLEdBQU47QUFBQSxNQUNJZCxDQUFDLEdBQUduQyxVQUFVLENBRGxCOztBQUVBLE9BQUssSUFBSW9DLENBQUMsR0FBVixHQUFnQkEsQ0FBQyxHQUFqQixHQUF1QkEsQ0FBdkIsSUFBNEI7QUFDeEIsUUFBTWMsR0FBRyxHQUFHSCxTQUFTLENBQXJCLENBQXFCLENBQXJCOztBQUNBLFFBQUlHLEdBQUcsQ0FBSEEsZUFBSixHQUEwQjtBQUN0QkEsU0FBRyxDQUFIQTtBQUNBLFVBQUlELEVBQUUsS0FBTixHQUFjRixTQUFTLENBQVRBLEVBQVMsQ0FBVEE7QUFDZEUsUUFBRTtBQUxrQjtBQVN4Qjs7O0FBQ0EsUUFBTUMsR0FBMkIsQ0FBM0JBLHFCQUFOLG1DQUEwRjtBQUN0RkYsdUNBQWlDLEdBQUtFLEdBQTJCLENBQWpFRjtBQUNIO0FBQ0o7O0FBQ0RELFdBQVMsQ0FBVEE7QUFFQS9DLFlBQVUsQ0FBVkEscUJBM0JKLENBMkJJQTtBQUVBO0FBQ0E7QUFDQTs7QUFDQW1DLEdBQUMsR0FBR1csYUFBYSxDQUFqQlg7O0FBQ0EsU0FBT0EsQ0FBUCxJQUFZO0FBQ1IsUUFBTWUsSUFBRyxHQUFHSixhQUFhLENBQXpCLENBQXlCLENBQXpCOztBQUNBLFFBQUlJLElBQUcsQ0FBSEEsZUFBSixHQUEwQjtBQUN0QkMsb0JBQWMsT0FBZEEsVUFBYyxDQUFkQTtBQUNIOztBQUNERCxRQUFHLENBQUhBO0FBQ0gsR0F2Q0wsQ0F1Q0s7QUFHRDtBQUNBOzs7QUFDQSxTQUFPRCxFQUFQLElBQWE7QUFDVCxRQUFNQyxLQUFHLEdBQUdILFNBQVMsQ0FBckIsRUFBcUIsQ0FBckI7O0FBQ0EsUUFBSUcsS0FBRyxDQUFIQSxlQUFKLEdBQTBCO0FBQ3RCQSxXQUFHLENBQUhBO0FBQ0FFLGlCQUFXLFFBQVhBLFVBQVcsQ0FBWEE7QUFDSDtBQUNKLEdBbERMLENBa0RLO0FBR0Q7OztBQUNBLE1BQUlKLGlDQUFpQyxLQUFLak8saUJBQWlCLENBQTNELGFBQXlFO0FBQ3JFaUwsY0FBVSxDQUFWQTtBQUNBQSxjQUFVLENBQVZBO0FBQ0g7QUFDSjs7QUFFRCxTQUFnQnNCLGNBQWhCLENBQStCdEIsVUFBL0IsRUFBK0JBO0FBQzNCO0FBQ0EsTUFBTWtDLEdBQUcsR0FBR2xDLFVBQVUsQ0FBdEI7QUFDQUEsWUFBVSxDQUFWQTtBQUNBLE1BQUlvQyxDQUFDLEdBQUdGLEdBQUcsQ0FBWDs7QUFDQSxTQUFPRSxDQUFQO0FBQVllLGtCQUFjLENBQUNqQixHQUFHLENBQUosQ0FBSSxDQUFKLEVBQWRpQixVQUFjLENBQWRBO0FBQVo7O0FBRUFuRCxZQUFVLENBQVZBLHFCQUFnQ2pMLGlCQUFpQixDQUFqRGlMO0FBQ0g7O0FBRUQsU0FBZ0JxRCxTQUFoQixDQUE2QkMsTUFBN0IsRUFBNkJBO0FBQ3pCLE1BQU1oRyxJQUFJLEdBQUdYLGNBQWI7O0FBQ0EsTUFBSTtBQUNBLFdBQU8yRyxNQUFQO0FBREosWUFFVTtBQUNObEcsZ0JBQVksQ0FBWkEsSUFBWSxDQUFaQTtBQUNIO0FBQ0o7O0FBRUQsU0FBZ0JULGNBQWhCLEdBQWdCQTtBQUNaLE1BQU1XLElBQUksR0FBR3BNLFdBQVcsQ0FBeEI7QUFDQUEsYUFBVyxDQUFYQTtBQUNBO0FBQ0g7O0FBRUQsU0FBZ0JrTSxZQUFoQixDQUE2QkUsSUFBN0IsRUFBNkJBO0FBQ3pCcE0sYUFBVyxDQUFYQTtBQUNIOztBQUVELFNBQWdCNEwsb0JBQWhCLENBQXFDeUcsZUFBckMsRUFBcUNBO0FBQ2pDLE1BQU1qRyxJQUFJLEdBQUdwTSxXQUFXLENBQXhCO0FBQ0FBLGFBQVcsQ0FBWEE7QUFDQTtBQUNIOztBQUVELFNBQWdCaU0sa0JBQWhCLENBQW1DRyxJQUFuQyxFQUFtQ0E7QUFDL0JwTSxhQUFXLENBQVhBO0FBQ0g7QUFFRDs7Ozs7O0FBSUEsU0FBZ0JtUiwwQkFBaEIsQ0FBMkNyQyxVQUEzQyxFQUEyQ0E7QUFDdkMsTUFBSUEsVUFBVSxDQUFWQSx1QkFBa0NqTCxpQkFBaUIsQ0FBdkQsYUFBcUU7QUFDckVpTCxZQUFVLENBQVZBLHFCQUFnQ2pMLGlCQUFpQixDQUFqRGlMO0FBRUEsTUFBTWtDLEdBQUcsR0FBR2xDLFVBQVUsQ0FBdEI7QUFDQSxNQUFJb0MsQ0FBQyxHQUFHRixHQUFHLENBQVg7O0FBQ0EsU0FBT0UsQ0FBUDtBQUFZRixPQUFHLENBQUhBLENBQUcsQ0FBSEEsd0JBQThCbk4saUJBQWlCLENBQS9DbU47QUFBWjtBQUNIO0FDMVREOzs7OztBQUdBLElBQU1zQixjQUFjLEdBQTBCLDBNQUE5QyxZQUE4QyxDQUE5Qzs7QUFnQkEsSUFBYUMsV0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFvSUEsSUFBSUMsbUJBQW1CLEdBQXZCO0FBQ0EsSUFBSUMsYUFBYSxHQUFqQjs7QUFFTyxJQUFJelMsV0FBVyxnQkFBaUI7QUFDbkMsTUFBSTBTLE1BQU0sZ0JBQUd4VCxTQUFiO0FBQ0EsTUFBSXdULE1BQU0sQ0FBTkEsMkJBQWtDLENBQUNBLE1BQU0sQ0FBN0MsZUFBNkRGLG1CQUFtQixHQUFuQkE7QUFDN0QsTUFBSUUsTUFBTSxDQUFOQSxpQkFBd0JBLE1BQU0sQ0FBTkEsMEJBQWlDLGtCQUE3RCxTQUNJRixtQkFBbUIsR0FBbkJBOztBQUVKLE1BQUksQ0FBSixxQkFBMEI7QUFDdEJHLGNBQVUsQ0FBQztBQUNQLFVBQUksQ0FBSixlQUFvQjtBQUNoQjdULFdBQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNIO0FBSEssT0FBVjZULENBQVUsQ0FBVkE7QUFLQSxXQUFPLElBQVAsV0FBTyxFQUFQO0FBTkosU0FPTyxJQUFJRCxNQUFNLENBQVYsZUFBMEI7QUFDN0JBLFVBQU0sQ0FBTkE7QUFDQSxRQUFJLENBQUNBLE1BQU0sQ0FBTkEsY0FBTCxXQUFxQ0EsTUFBTSxDQUFOQSwwQkFGUixFQUVRQSxDQUZSOztBQUc3QixXQUFPQSxNQUFNLENBQWI7QUFIRyxTQUlBO0FBQ0hBLFVBQU0sQ0FBTkE7QUFDQSxXQUFRQSxNQUFNLENBQU5BLDZCQUF1QixJQUEvQixXQUErQixFQUEvQjtBQUNIO0FBcEJFLENBQWdDLEVBQWhDOztBQXVCUCxTQUFnQkUsa0JBQWhCLEdBQWdCQTtBQUNaLE1BQ0k1UyxXQUFXLENBQVhBLDJCQUNBQSxXQUFXLENBRFhBLFdBRUFBLFdBQVcsQ0FIZixvQkFLSWxCLEdBQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNKMlQsZUFBYSxHQUFiQTs7QUFDQSwyQkFBeUI7QUFDckIsUUFBSUMsTUFBTSxHQUFHeFQsU0FBYjtBQUNBLFFBQUksRUFBRXdULE1BQU0sQ0FBUix3QkFBSixHQUF3Q0EsTUFBTSxDQUFOQTtBQUN4QzFTLGVBQVcsR0FBRyxJQUFkQSxXQUFjLEVBQWRBO0FBQ0g7QUFDSjs7QUFFRCxTQUFnQjZTLGNBQWhCLEdBQWdCQTtBQUNaO0FBQ0g7QUFFRDs7Ozs7O0FBSUEsU0FBZ0JDLGdCQUFoQixHQUFnQkE7QUFDWixNQUFNQyxjQUFjLEdBQUcsSUFBdkIsV0FBdUIsRUFBdkI7O0FBQ0EsT0FBSyxJQUFMO0FBQ0ksUUFBSVQsY0FBYyxDQUFkQSxpQkFBdUMsQ0FBM0MsR0FBK0N0UyxXQUFXLENBQVhBLEdBQVcsQ0FBWEEsR0FBbUIrUyxjQUFjLENBQWpDL1MsR0FBaUMsQ0FBakNBO0FBRG5EOztBQUVBQSxhQUFXLENBQVhBLG9CQUFnQyxDQUFDQSxXQUFXLENBQTVDQTtBQUNIOztTQ3hLZXFSLFksQ0FBYWhJLFUsRUFBQUE7QUFDekIsU0FBT0EsVUFBVSxDQUFWQSxjQUF5QkEsVUFBVSxDQUFWQSxrQkFBaEM7QUFDSDs7QUFFRCxTQUFnQjJKLFlBQWhCLENBQTZCM0osVUFBN0IsRUFBNkJBO0FBQ3pCLFNBQU9BLFVBQVUsQ0FBakI7QUFDSCxDLENBQUE7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBZ0I2SSxXQUFoQixDQUE0QjdJLFVBQTVCLEVBQXFENEosSUFBckQsRUFBcURBO0FBQ2pEO0FBQ0E7QUFDQTtBQUVBNUosWUFBVSxDQUFWQTtBQUNBLE1BQUlBLFVBQVUsQ0FBVkEsdUJBQWtDNEosSUFBSSxDQUExQyxvQkFDSTVKLFVBQVUsQ0FBVkEsdUJBQWtDNEosSUFBSSxDQUF0QzVKLG1CQVA2QzRKLENBTzdDNUo7QUFHSjtBQUNIOztBQUVELFNBQWdCNEksY0FBaEIsQ0FBK0I1SSxVQUEvQixFQUF3RDRKLElBQXhELEVBQXdEQTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTVKLFlBQVUsQ0FBVkE7O0FBQ0EsTUFBSUEsVUFBVSxDQUFWQSxvQkFBSixHQUFzQztBQUNsQztBQUNBNkoseUJBQXFCLENBQXJCQSxVQUFxQixDQUFyQkE7QUFDSCxHQVJtREQsQ0FRbkQ7QUFFRDs7QUFDSDs7QUFFRCxTQUFnQkMscUJBQWhCLENBQXNDN0osVUFBdEMsRUFBc0NBO0FBQ2xDLE1BQUlBLFVBQVUsQ0FBVkEsNEJBQUosT0FBa0Q7QUFDOUM7QUFDQUEsY0FBVSxDQUFWQTtBQUNBckosZUFBVyxDQUFYQTtBQUNIO0FBQ0o7QUFFRDs7Ozs7OztBQUtBLFNBQWdCc0UsVUFBaEIsR0FBZ0JBO0FBQ1p0RSxhQUFXLENBQVhBO0FBQ0g7O0FBRUQsU0FBZ0J3RSxRQUFoQixHQUFnQkE7QUFDWixNQUFJLEVBQUV4RSxXQUFXLENBQWIsWUFBSixHQUFpQztBQUM3Qm1ULGdCQUQ2Qjs7QUFHN0IsUUFBTUMsSUFBSSxHQUFHcFQsV0FBVyxDQUF4Qjs7QUFDQSxTQUFLLElBQUlrUixDQUFDLEdBQVYsR0FBZ0JBLENBQUMsR0FBR2tDLElBQUksQ0FBeEIsUUFBaUNsQyxDQUFqQyxJQUFzQztBQUNsQyxVQUFNN0gsVUFBVSxHQUFHK0osSUFBSSxDQUF2QixDQUF1QixDQUF2QjtBQUNBL0osZ0JBQVUsQ0FBVkE7O0FBQ0EsVUFBSUEsVUFBVSxDQUFWQSxvQkFBSixHQUFzQztBQUNsQyxZQUFJQSxVQUFVLENBQWQsa0JBQWlDO0FBQzdCO0FBQ0FBLG9CQUFVLENBQVZBO0FBQ0FBLG9CQUFVLENBQVZBO0FBQ0g7O0FBQ0QsWUFBSUEsVUFBVSxZQUFkLGVBQXlDO0FBQ3JDO0FBQ0E7QUFDQUEsb0JBQVUsQ0FBVkE7QUFDSDtBQUNKO0FBQ0o7O0FBQ0RySixlQUFXLENBQVhBO0FBQ0g7QUFDSjs7QUFFRCxTQUFnQm9FLGNBQWhCLENBQStCaUYsVUFBL0IsRUFBK0JBO0FBQzNCaUksNkJBQTJCLENBQTNCQSxVQUEyQixDQUEzQkE7QUFFQSxNQUFNeEMsVUFBVSxHQUFHOU8sV0FBVyxDQUE5Qjs7QUFDQSxNQUFJOE8sVUFBVSxLQUFkLE1BQXlCO0FBQ3JCOzs7OztBQUtBLFFBQUlBLFVBQVUsQ0FBVkEsV0FBc0J6RixVQUFVLENBQXBDLGlCQUFzRDtBQUNsREEsZ0JBQVUsQ0FBVkEsa0JBQTZCeUYsVUFBVSxDQURXLE1BQ2xEekYsQ0FEa0Q7O0FBR2xEeUYsZ0JBQVUsQ0FBVkEsY0FBMEJBLFVBQVUsQ0FBcENBLGlCQUEwQkEsRUFBMUJBOztBQUNBLFVBQUksQ0FBQ3pGLFVBQVUsQ0FBWCxvQkFBZ0NySixXQUFXLENBQS9DLGlCQUFpRTtBQUM3RHFKLGtCQUFVLENBQVZBO0FBQ0FBLGtCQUFVLENBQVZBO0FBQ0g7QUFDSjs7QUFDRDtBQWZKLFNBZ0JPLElBQUlBLFVBQVUsQ0FBVkEseUJBQW9DckosV0FBVyxDQUFYQSxVQUF4QyxHQUFpRTtBQUNwRWtULHlCQUFxQixDQUFyQkEsVUFBcUIsQ0FBckJBO0FBQ0g7O0FBRUQ7QUFDSCxDLENBQUE7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUFRQTs7O0FBQ0EsU0FBZ0IzTyxnQkFBaEIsQ0FBaUM4RSxVQUFqQyxFQUFpQ0E7QUFDN0I7QUFDQSxNQUFJQSxVQUFVLENBQVZBLHlCQUFvQ3hGLGlCQUFpQixDQUF6RCxRQUFrRTtBQUNsRXdGLFlBQVUsQ0FBVkEsdUJBQWtDeEYsaUJBQWlCLENBQW5Ed0YsT0FINkJBLENBRzdCQTs7QUFHQUEsWUFBVSxDQUFWQSxtQkFBOEIsYUFBQztBQUMzQixRQUFJZ0ssQ0FBQyxDQUFEQSx1QkFBeUJ4UCxpQkFBaUIsQ0FBOUMsYUFBNEQ7QUFDeEQsVUFBSSxLQUFKLEVBQWdELEVBRS9DOztBQUNEd1AsT0FBQyxDQUFEQTtBQUNIOztBQUNEQSxLQUFDLENBQURBLHFCQUF1QnhQLGlCQUFpQixDQUF4Q3dQO0FBUEpoSyxLQU42QkEsQ0FNN0JBO0FBVUgsQyxDQUFBOzs7QUFHRCxTQUFnQnNHLHdCQUFoQixDQUF5Q3RHLFVBQXpDLEVBQXlDQTtBQUNyQztBQUNBLE1BQUlBLFVBQVUsQ0FBVkEseUJBQW9DeEYsaUJBQWlCLENBQXpELFFBQWtFO0FBQ2xFd0YsWUFBVSxDQUFWQSx1QkFBa0N4RixpQkFBaUIsQ0FBbkR3RjtBQUVBQSxZQUFVLENBQVZBLG1CQUE4QixhQUFDO0FBQzNCLFFBQUlnSyxDQUFDLENBQURBLHVCQUF5QnhQLGlCQUFpQixDQUE5QyxpQkFDSXdQLENBQUMsQ0FBREEscUJBQXVCeFAsaUJBQWlCLENBRDVDLE1BQ0l3UCxDQURKLEtBRUssSUFDREEsQ0FBQyxDQUFEQSx1QkFBeUJ4UCxpQkFBaUIsQ0FEekM7QUFBQSxNQUdEd0YsVUFBVSxDQUFWQSx1QkFBa0N4RixpQkFBaUIsQ0FBbkR3RjtBQU5SQSxLQUxxQ0EsQ0FLckNBO0FBU0gsQyxDQUFBOzs7QUFHRCxTQUFnQm1HLHFCQUFoQixDQUFzQ25HLFVBQXRDLEVBQXNDQTtBQUNsQztBQUNBLE1BQUlBLFVBQVUsQ0FBVkEseUJBQW9DeEYsaUJBQWlCLENBQXpELGFBQXVFO0FBQ3ZFd0YsWUFBVSxDQUFWQSx1QkFBa0N4RixpQkFBaUIsQ0FBbkR3RjtBQUVBQSxZQUFVLENBQVZBLG1CQUE4QixhQUFDO0FBQzNCLFFBQUlnSyxDQUFDLENBQURBLHVCQUF5QnhQLGlCQUFpQixDQUE5QyxhQUE0RDtBQUN4RHdQLE9BQUMsQ0FBREEscUJBQXVCeFAsaUJBQWlCLENBQXhDd1A7O0FBQ0EsVUFBSSxLQUFKLEVBQWdELEVBRS9DOztBQUNEQSxPQUFDLENBQURBO0FBQ0g7QUFQTGhLLEtBTGtDQSxDQUtsQ0E7QUFVSDs7QUFFRDtBQUNJcUgsU0FBTyxDQUFQQSx1QkFDcUI1QixVQUFVLENBRC9CNEIsbURBQzhFckgsVUFBVSxDQUR4RnFIOztBQUdBLE1BQUk1QixVQUFVLENBQVZBLGVBQTBCRyxTQUFTLENBQXZDLE9BQStDO0FBQzNDLFFBQU1xRSxLQUFLLEdBQVg7QUFDQUMsZ0JBQVksQ0FBQ0MsaUJBQWlCLENBQWxCLFVBQWtCLENBQWxCLFNBRitCLENBRS9CLENBQVpELENBRjJDOztBQUszQyw4Q0FHR3pFLFVBQVUsQ0FIYix3RUFLZ0RBLFVBQVUsQ0FMMUQsb0NBSzBGekYsVUFBVSxDQUxwRyxxUEFTTnlGLFVBQVUsWUFBVkEsZ0JBQXNDQSxVQUFVLENBQVZBLHdDQUF0Q0EsR0FBc0NBLENBQXRDQSxHQVRNLDREQWFOd0UsS0FBSyxDQUFMQSxLQWJNLElBYU5BLENBYk07QUFnQkg7QUFDSjs7QUFFRDtBQUNJLE1BQUlBLEtBQUssQ0FBTEEsVUFBSixNQUEwQjtBQUN0QkEsU0FBSyxDQUFMQTtBQUNBO0FBQ0g7O0FBQ0RBLE9BQUssQ0FBTEEsVUFBYyxzQkFBZEEsSUFBYyxDQUFkQSxHQUE0Q0csSUFBSSxDQUFoREgsTUFMSixDQUtJQTs7QUFDQSxNQUFJRyxJQUFJLENBQVIsY0FBdUIsSUFBSSxDQUFKLHFCQUEwQixpQkFBSztBQUFBLFdBQUlGLFlBQVksZUFBZUcsS0FBSyxHQUFwQyxDQUFnQixDQUFoQjtBQUEvQjtBQUMxQjs7SUMzTllDLFFBQWI7QUFDbUM7QUFZL0I7UUFDV3JRLGdCLEVBQUFBO0FBQUFBLGNBQWdCLFNBQVUsU0FBVixHQUFzQyxVQUF0REE7OztRQUdBc1EsOEIsRUFBQUE7QUFBQUEsNEJBQXNCLEtBQXRCQTs7O1NBSEF0USxLLEdBQUFBLE07U0FDQyxhLEdBQUEsTTtTQUNBLGEsR0FBQSxNO1NBQ0RzUSxtQixHQUFBQSxNO1NBaEJYdEYsVSxHQUE0QixFO1NBQzVCQyxhLEdBQStCLEU7U0FDL0JGLGtCLEdBQXFCeEssaUJBQWlCLENBQUNDLGE7U0FDdkNKLFUsR0FBYSxDO1NBQ2I4SyxNLEdBQVMsQztTQUNURSxpQixHQUFvQixDO1NBQ3BCbUYsVyxHQUFjLEs7U0FDZEMsWSxHQUFlLEs7U0FDZkMsZSxHQUFrQixLO1NBQ2xCQyxVLEdBQWEsSztTQUNiaEYsVSxHQUF3QkMsU0FBUyxDQUFDQyxJO0FBR3ZCNUw7QUFDQztBQUNBO0FBQ0RzUTtBQUNQOztBQWxCUjs7QUFBQSwwQkFvQklyRTtBQUNJO0FBckJSOztBQUFBLHFCQXdCSTBFO0FBQ0ksUUFBSSxDQUFDLEtBQUwsY0FBd0I7QUFDcEI7QUFDQWpVLGlCQUFXLENBQVhBO0FBQ0FtVCxrQkFBWTtBQUNmO0FBN0JUOztBQUFBLHVCQWdDSWU7QUFDSSxXQUFPLEtBQVA7QUFDSDtBQUVEOzs7QUFwQ0o7O0FBQUEsd0JBdUNJQztBQUNJLFFBQUksQ0FBQyxLQUFMLGFBQXVCO0FBQ25CN1AsZ0JBQVU7QUFDVjtBQUNBLFVBQU04SCxJQUFJLEdBQUdwTSxXQUFXLENBQXhCO0FBQ0FBLGlCQUFXLENBQVhBOztBQUNBLFVBQUl5UCxhQUFhLENBQWpCLElBQWlCLENBQWpCLEVBQXlCO0FBQ3JCOztBQUVBLFlBQUk7QUFDQTs7QUFDQSxjQUFJLEtBQUosRUFBdUQsRUFNdEQ7QUFSTCxVQVNFLFVBQVU7QUFDUjtBQUNIO0FBQ0o7O0FBQ0R6UCxpQkFBVyxDQUFYQTtBQUNBd0UsY0FBUTtBQUNYO0FBL0RUOztBQUFBLGlCQWtFSTRQO0FBQ0ksUUFBSSxLQUFKLGFBQXNCO0FBQUE7QUFHckI7O0FBQ0Q5UCxjQUFVO0FBQ1YsUUFBTStQLE1BQU0sR0FBR3ZILFlBQWY7QUFDQTs7QUFDQSxRQUFJLEtBQUosRUFBdUIsRUFNdEI7O0FBQ0Q7QUFDQSxRQUFNd0gsWUFBWSxHQUFHdFUsV0FBVyxDQUFoQyxnQkFoQkpvVSxDQWdCSTs7QUFDQXBVLGVBQVcsQ0FBWEE7QUFDQSxRQUFNNFAsTUFBTSxHQUFHTSxvQkFBb0IsV0FBbkMsU0FBbUMsQ0FBbkM7QUFDQWxRLGVBQVcsQ0FBWEE7QUFDQTtBQUNBOztBQUNBLFFBQUksS0FBSixhQUFzQjtBQUNsQjtBQUNBb1Esb0JBQWMsQ0FBZEEsSUFBYyxDQUFkQTtBQUNIOztBQUNELFFBQUlQLGlCQUFpQixDQUFyQixNQUFxQixDQUFyQixFQUErQixrQ0FBa0NELE1BQU0sQ0FBeEM7O0FBQy9CLFFBQUksS0FBSixFQUF1QixFQUl0Qjs7QUFDRHBMLFlBQVE7QUFsR2hCOztBQUFBLHdDQXFHSStQOzs7QUFDSSxRQUFJLEtBQUosZUFBd0I7QUFDcEI7QUFDQTtBQUNIOztBQUVELFFBQUl2VSxXQUFXLENBQWYsd0JBQXdDO0FBRXhDLFFBQU13VSxPQUFPLEdBQUcsMkRBQWhCOztBQUdBLFFBQUksQ0FBQ3hVLFdBQVcsQ0FBaEIsd0JBQXlDO0FBQ3JDMFEsYUFBTyxDQUFQQTtBQUNBO0FBRkosV0FHTyxXQUFhQSxFQWR4QjZELENBY3dCN0Q7OztBQUVwQixRQUFJLEtBQUosRUFBK0IsRUFPOUI7O0FBRUQxUSxlQUFXLENBQVhBLG9DQUFnRCxhQUFDO0FBQUEsYUFBSXVSLENBQUMsUUFBTCxLQUFLLENBQUw7QUFBakR2UjtBQTlIUjs7QUFBQSxtQkFpSUl5VTtBQUNJLFFBQUksQ0FBQyxLQUFMLGFBQXVCO0FBQ25COztBQUNBLFVBQUksQ0FBQyxLQUFMLFlBQXNCO0FBQ2xCO0FBQ0FuUSxrQkFBVTtBQUNWOEwsc0JBQWMsQ0FBZEEsSUFBYyxDQUFkQTtBQUNBNUwsZ0JBQVE7QUFDWDtBQUNKO0FBMUlUOztBQUFBLHdCQTZJSWtRO0FBQ0ksUUFBTUMsQ0FBQyxHQUFHLGtCQUFWLElBQVUsQ0FBVjtBQUNBQSxLQUFDLENBQURBLEtBQUMsQ0FBREE7QUFDQTtBQWhKUjs7QUFBQSxvQkFtSklsUTtBQUNJLHlCQUFtQixLQUFuQjtBQXBKUjs7QUFBQSxpQkF1SkltUTtRQUFNQywwQixFQUFBQTtBQUFBQSx3QkFBMkIsS0FBM0JBOzs7QUFDRkQsU0FBSyxPQUFMQSxlQUFLLENBQUxBO0FBeEpSOztBQUFBO0FBQUEsRzs7QUE0SkEsU0FBZ0JFLGVBQWhCLENBQWdDQyxPQUFoQyxFQUFnQ0E7QUFDNUIvVSxhQUFXLENBQVhBO0FBQ0EsU0FBTztBQUNILFFBQU1nVixHQUFHLEdBQUdoVixXQUFXLENBQVhBLG9DQUFaLE9BQVlBLENBQVo7QUFDQSxRQUFJZ1YsR0FBRyxJQUFQLEdBQWNoVixXQUFXLENBQVhBO0FBRmxCO0FBSUg7QUFFRDs7Ozs7OztBQUtBLElBQU1pVix1QkFBdUIsR0FBN0I7O0FBRUEsSUFBSUMsaUJBQWlCLEdBQTZCLDhCQUFDO0FBQUEsU0FBSTNELENBQUo7QUFBbkQ7O0FBRUEsU0FBZ0I0QixZQUFoQixHQUFnQkE7QUFDWjtBQUNBLE1BQUluVCxXQUFXLENBQVhBLGVBQTJCQSxXQUFXLENBQTFDLG9CQUErRDtBQUMvRGtWLG1CQUFpQixDQUFqQkEsa0JBQWlCLENBQWpCQTtBQUNIOztBQUVEO0FBQ0lsVixhQUFXLENBQVhBO0FBQ0EsTUFBTW1WLFlBQVksR0FBR25WLFdBQVcsQ0FBaEM7QUFDQSxNQUFJb1YsVUFBVSxHQUFkLEVBSEosQ0FHSTtBQUdBO0FBQ0E7O0FBQ0EsU0FBT0QsWUFBWSxDQUFaQSxTQUFQLEdBQWdDO0FBQzVCLFFBQUksaUJBQUoseUJBQThDO0FBQzFDekUsYUFBTyxDQUFQQSxNQUNJLFNBQ00sU0FETixrQ0FHbUN5RSxZQUFZLENBSm5EekUsQ0FJbUQsQ0FKbkRBO0FBTUF5RSxrQkFBWSxDQUFaQSxPQVAwQyxDQU8xQ0EsRUFQMEM7QUFRN0M7O0FBQ0QsUUFBSUUsa0JBQWtCLEdBQUdGLFlBQVksQ0FBWkEsT0FBekIsQ0FBeUJBLENBQXpCOztBQUNBLFNBQUssSUFBSWpFLENBQUMsR0FBTCxHQUFXRCxDQUFDLEdBQUdvRSxrQkFBa0IsQ0FBdEMsUUFBK0NuRSxDQUFDLEdBQWhELEdBQXNEQSxDQUF0RDtBQUNJbUUsd0JBQWtCLENBQWxCQSxDQUFrQixDQUFsQkE7QUFESjtBQUVIOztBQUNEclYsYUFBVyxDQUFYQTtBQUNIOztBQUVNLElBQU1zVixVQUFVLGdCQUFHL1QseUJBQXlCLGFBQTVDLFFBQTRDLENBQTVDOztBQUVQLFNBQWdCZ1Usb0JBQWhCLENBQXFDalYsRUFBckMsRUFBcUNBO0FBQ2pDLE1BQU1rVixhQUFhLEdBQW5COztBQUNBTixtQkFBaUIsR0FBRyw4QkFBQztBQUFBLFdBQUk1VSxFQUFFLENBQUM7QUFBQSxhQUFNa1YsYUFBYSxDQUFuQixDQUFtQixDQUFuQjtBQUFQLEtBQU0sQ0FBTjtBQUFyQk47QUFDSDs7U0MvUGVwSSxZLEdBQUFBO0FBQ1osU0FBTyxVQUFXLEtBQWxCO0FBQ0g7O0FBa0JELFNBQWdCMkksU0FBaEIsQ0FBMEJDLEtBQTFCLEVBQTBCQTtBQUN0QixNQUFJLElBQUosRUFBYyxPQURRQSxDQUNSOztBQUNkLE1BQUksQ0FBQzFWLFdBQVcsQ0FBWEEsYUFBTCxRQUFzQztBQUN0QyxNQUFNMlYsU0FBUyxHQUFHM1YsV0FBVyxDQUE3Qjs7QUFDQSxPQUFLLElBQUlrUixDQUFDLEdBQUwsR0FBV0QsQ0FBQyxHQUFHMEUsU0FBUyxDQUE3QixRQUFzQ3pFLENBQUMsR0FBdkMsR0FBNkNBLENBQTdDO0FBQWtEeUUsYUFBUyxDQUFUQSxDQUFTLENBQVRBO0FBQWxEO0FBQ0g7O0FBRUQsU0FBZ0JDLGNBQWhCLENBQStCRixLQUEvQixFQUErQkE7QUFDM0IsTUFBSSxJQUFKLEVBQWM7O0FBQ2QsTUFBTXZJLE1BQU07QUFBZXlJLGtCQUFjLEVBQUU7QUFBL0IsSUFBWjs7QUFDQUgsV0FBUyxDQUFUQSxNQUFTLENBQVRBO0FBQ0g7O0FBRUQsSUFBTUksU0FBUyxHQUFhO0FBQUV4SSxNQUFJLEVBQU47QUFBc0JOLGNBQVksRUFBRTtBQUFwQyxDQUE1Qjs7QUFFQSxTQUFnQkEsWUFBaEIsQ0FBNkJJLE1BQTdCLEVBQTZCQTtBQUN6QixNQUFJLElBQUosRUFBYztBQUNkLGNBQVksU0FBUztBQUFjRSxRQUFJLEVBQWxCO0FBQWtDTixnQkFBWSxFQUFFO0FBQWhELEtBQVQsQ0FBWixLQUNLMEksU0FBUyxDQUFUQSxTQUFTLENBQVRBO0FBQ1I7O0FBRUQsU0FBZ0JLLEdBQWhCLENBQW9CNVIsUUFBcEIsRUFBb0JBO0FBQ2hCLE1BQUksSUFBSixFQUFjO0FBQ1Z3TSxXQUFPLENBQVBBO0FBQ0EsV0FBTyxhQUFQO0FBRkosU0FHTyxFQUtOO0FBQ0o7O0FDN0NNLElBQU1xRixNQUFNLEdBQVo7QUFDQSxJQUFNQyxZQUFZLEdBQWxCO0FBQ0EsSUFBTUMsVUFBVSxHQUFoQjtBQUNBLElBQU1DLGdCQUFnQixHQUF0QjtBQUVQLElBQU1DLG1CQUFtQixHQUF6QjtBQUVBLElBQU1DLGdCQUFnQixnQkFBR3hQLHNCQUFzQixDQUEvQyxNQUErQyxDQUEvQztBQUNBLElBQU15UCxxQkFBcUIsZ0JBQUd6UCxzQkFBc0IsZUFBZTtBQUMvRE0sT0FBSyxFQUFFO0FBRHdELENBQWYsQ0FBcEQ7QUFHQSxJQUFNb1Asb0JBQW9CLGdCQUFHMVAsc0JBQXNCLGFBQWE7QUFDNURpRSxZQUFVLEVBQUU7QUFEZ0QsQ0FBYixDQUFuRDtBQUdBLElBQU0wTCx5QkFBeUIsZ0JBQUczUCxzQkFBc0IsbUJBQW1CO0FBQ3ZFaUUsWUFBVSxFQUQ2RDtBQUV2RTNELE9BQUssRUFBRTtBQUZnRSxDQUFuQixDQUF4RDs7QUFrQkE7QUFDSSxNQUFNeEUsR0FBRyxHQUFtQjtBQUN4QjtBQUNBLFFBQUlyQyxVQUFVLENBQWQsSUFBYyxDQUFkLEVBQ0ksT0FBT3NILFlBQVksQ0FBQzRDLElBQUksQ0FBSkEsUUFBRCwyQkFBbkIsVUFBbUIsQ0FBbkIsQ0FIb0IsQ0FHcEI7O0FBRUosUUFBSWxLLFVBQVUsQ0FBZCxJQUFjLENBQWQsRUFBc0IsT0FBT3NILFlBQVksYUFBbkIsVUFBbUIsQ0FBbkIsQ0FMRSxDQUtGOztBQUV0QixRQUFJcEgsV0FBVyxDQUFmLElBQWUsQ0FBZixFQUF1QjtBQUNuQixhQUFPd0MsZUFBZSxhQUFhOEgsVUFBVSwwQkFBN0MsZ0JBQXNCLENBQXRCO0FBQ0gsS0FUdUIsQ0FTdkI7OztBQUVELFFBQUl0SyxXQUFXLENBQWYsSUFBZSxDQUFmLEVBQXVCO0FBQ25CLGFBQU9zQyx5QkFBeUIsQ0FDNUIrRCxzQkFBc0IsQ0FBQ2lFLFVBQVUsZ0JBQVgsUUFBbUM7QUFDckRySixZQUFJLEVBRGlEO0FBRXJEcUosa0JBQVUsRUFBVkE7QUFGcUQsT0FBbkMsQ0FETSxDQUFoQztBQU1IOztBQUVELGVBQWEvTDtBQXBCakI7O0FBc0JBO0FBQ0g7O0FBRUQsSUFBYXNULE1BQU0sZ0JBQW1Cb0UsbUJBQW1CLENBQWxELEtBQWtELENBQXpEO0FBQ0FwWCxNQUFNLENBQU5BO0FBQ0EsSUFBYXlMLFVBQVUsZ0JBQW1CMkwsbUJBQW1CLENBQXRELElBQXNELENBQTdEO0FBQ0FwWCxNQUFNLENBQU5BO0FBRUFnVCxNQUFNLENBQU5BLHFCQUFldlAseUJBQXlCLENBQXhDdVAscUJBQXdDLENBQXhDQTtBQUNBdkgsVUFBVSxDQUFWQSxxQkFBbUJoSSx5QkFBeUIsQ0FBNUNnSSx5QkFBNEMsQ0FBNUNBOztBQUVBLFNBQWdCNEwsV0FBaEIsQ0FBK0JuVyxFQUEvQixFQUErQkE7QUFDM0IsU0FBT3dLLGFBQWEsQ0FBQ3hLLEVBQUUsQ0FBRkEsUUFBRCxzQ0FBcEIsU0FBb0IsQ0FBcEI7QUFDSDs7QUFFRCxTQUFnQmlILFFBQWhCLENBQXlCM0YsS0FBekIsRUFBeUJBO0FBQ3JCLFNBQU92QixVQUFVLENBQVZBLEtBQVUsQ0FBVkEsSUFBcUJ1QixLQUFLLENBQUxBLGlCQUE1QjtBQUNIO0FDdkREOzs7Ozs7OztBQU1BLFNBQWdCMk8sT0FBaEIsQ0FDSW1HLElBREosRUFFSXBNLElBRkosRUFFSUE7OztNQUFBQSxlLEVBQUFBO0FBQUFBLFdBQXdCN0ssWUFBeEI2Szs7O0FBRUEsYUFBYSxFQUdaOztBQUVELE1BQU05SSxJQUFJLG1EQUNOOEksTUFETSw2QkFDUyxTQUFXb00sU0FBWCxHQURuQjtBQUVBLE1BQU1DLE9BQU8sR0FBRyxDQUFDck0sSUFBSSxDQUFMLGFBQW1CLENBQUNBLElBQUksQ0FBeEM7QUFDQTs7QUFFQSxlQUFhO0FBQ1Q7QUFDQXNNLFlBQVEsR0FBRyxtQkFFUDtBQUNJO0FBSEcsT0FLUHRNLElBQUksQ0FMRyxTQU1QQSxJQUFJLENBTlJzTSxrQkFBVyxDQUFYQTtBQUZKLFNBVU87QUFDSCxRQUFNQyxTQUFTLEdBQUdDLDBCQUEwQixDQUR6QyxJQUN5QyxDQUE1QyxDQURHOztBQUdILFFBQUk1QyxXQUFXLEdBQWY7QUFFQTBDLFlBQVEsR0FBRyxtQkFFUDtBQUNJLFVBQUksQ0FBSixhQUFrQjtBQUNkMUMsbUJBQVcsR0FBWEE7QUFDQTJDLGlCQUFTLENBQUM7QUFDTjNDLHFCQUFXLEdBQVhBO0FBQ0EsY0FBSSxDQUFDMEMsUUFBUSxDQUFiLGFBQTJCQSxRQUFRLENBQVJBO0FBRi9CQyxTQUFTLENBQVRBO0FBSUg7QUFURSxPQVdQdk0sSUFBSSxDQVhHLFNBWVBBLElBQUksQ0FaUnNNLGtCQUFXLENBQVhBO0FBY0g7O0FBRUQ7QUFDSUYsUUFBSSxDQUFKQSxRQUFJLENBQUpBO0FBQ0g7O0FBRURFLFVBQVEsQ0FBUkE7QUFDQSxTQUFPQSxRQUFRLENBQWYsWUFBT0EsRUFBUDtBQUNIOztBQU9ELElBQU1HLEdBQUcsR0FBRyxTQUFOQSxHQUFNO0FBQUEsU0FBZXhGLENBQWY7QUFBWjs7QUFFQTtBQUNJLFNBQU9qSCxJQUFJLENBQUpBLFlBQ0RBLElBQUksQ0FESEEsWUFFRCxJQUFJLENBQUosUUFDQTtBQUFBLFdBQWVxSSxVQUFVLElBQUlySSxJQUFJLENBQWpDLEtBQXlCLENBQXpCO0FBREEsTUFGTjtBQUtIOztBQUVELFNBQWdCc00sUUFBaEIsQ0FDSUksVUFESixFQUVJQyxNQUZKLEVBR0kzTSxJQUhKLEVBR0lBOzs7TUFBQUEsZSxFQUFBQTtBQUFBQSxXQUF5QjdLLFlBQXpCNks7OztBQUVBLGFBQWEsRUFJWjs7QUFDRCxNQUFNOUksSUFBSSxrQkFBRzhJLElBQUksQ0FBUCw4QkFBaUIsU0FBVSxTQUFWLEdBQTNCO0FBQ0EsTUFBTTRNLFlBQVksR0FBRzlFLE1BQU0sT0FFdkI5SCxJQUFJLENBQUpBLFVBQWU2TSxnQkFBZ0IsQ0FBQzdNLElBQUksQ0FBTCxTQUEvQkEsTUFBK0IsQ0FBL0JBLEdBRkosTUFBMkIsQ0FBM0I7QUFJQSxNQUFNcU0sT0FBTyxHQUFHLENBQUNyTSxJQUFJLENBQUwsYUFBbUIsQ0FBQ0EsSUFBSSxDQUF4QztBQUNBLE1BQU11TSxTQUFTLEdBQUdDLDBCQUEwQixDQUE1QyxJQUE0QyxDQUE1QztBQUVBLE1BQUl6RyxTQUFTLEdBQWI7QUFDQSxNQUFJNkQsV0FBVyxHQUFmO0FBQ0E7QUFDQSxNQUFJNU4sUUFBUSxHQUFaLFVBbEJBZ0UsQ0FrQkE7O0FBRUEsTUFBTUYsTUFBTSxHQUFJRSxJQUFZLENBQVpBLG9CQUNWbkYsUUFBUSxDQURFbUYsYUFFVkEsSUFBSSxDQUFKQSxVQUFlbkYsUUFBUSxDQUY3QixTQUU2QixDQUY3QjtBQUlBLE1BQU13UCxDQUFDLEdBQUcsbUJBRU47QUFDSSxRQUFJdEUsU0FBUyxJQUFiLFNBQTBCO0FBQ3RCK0csb0JBQWM7QUFEbEIsV0FFTyxJQUFJLENBQUosYUFBa0I7QUFDckJsRCxpQkFBVyxHQUFYQTtBQUNBMkMsZUFBVSxDQUFWQSxjQUFVLENBQVZBO0FBQ0g7QUFSQyxLQVVOdk0sSUFBSSxDQVZFLFNBV05BLElBQUksQ0FYUixrQkFBVSxDQUFWOztBQWNBO0FBQ0k0SixlQUFXLEdBQVhBO0FBQ0EsUUFBSVMsQ0FBQyxDQUFMLGFBQW1CO0FBQ25CLFFBQUkzRSxPQUFPLEdBQVg7QUFDQTJFLEtBQUMsQ0FBREEsTUFBUTtBQUNKLFVBQU0wQyxTQUFTLEdBQUdsTCxpQkFBaUIsUUFBUTtBQUFBLGVBQU02SyxVQUFVLENBQWhCLENBQWdCLENBQWhCO0FBQTNDLE9BQW1DLENBQW5DO0FBQ0FoSCxhQUFPLEdBQUdLLFNBQVMsSUFBSSxDQUFDakcsTUFBTSxRQUE5QjRGLFNBQThCLENBQTlCQTtBQUNBMUosY0FBUSxHQUFSQTtBQUNBOUYsV0FBSyxHQUFMQTtBQUpKbVU7QUFNQSxRQUFJdEUsU0FBUyxJQUFJL0YsSUFBSSxDQUFyQixpQkFBd0M0TSxZQUFZLGtCQUFwRCxDQUFvRCxDQUFaQSxDQUF4QyxLQUNLLElBQUksY0FBSixTQUEyQkEsWUFBWSxrQkFBWkEsQ0FBWSxDQUFaQTtBQUNoQzdHLGFBQVMsR0FBVEE7QUFDSDs7QUFFRHNFLEdBQUMsQ0FBREE7QUFDQSxTQUFPQSxDQUFDLENBQVIsWUFBT0EsRUFBUDtBQUNIOztBQUVEO0FBQ0ksU0FBTztBQUNILFFBQUk7QUFDQSxhQUFPMkMsTUFBTSxDQUFOQSxZQUFQLFNBQU9BLENBQVA7QUFESixNQUVFLFVBQVU7QUFDUkMsa0JBQVksQ0FBWkE7QUFDSDtBQUxMO0FBT0g7O0FDL0pELElBQU1DLGtCQUFrQixHQUF4QjtBQUNBLElBQU1DLG9CQUFvQixHQUExQjs7QUFpQkEsU0FBZ0IxUyxnQkFBaEIsQ0FBaUNuRCxLQUFqQyxFQUF3QzhWLElBQXhDLEVBQThDQyxJQUE5QyxFQUE4Q0E7QUFDMUMsU0FBT0MsYUFBYSxrQ0FBcEIsSUFBb0IsQ0FBcEI7QUFDSDs7QUFpQkQsU0FBZ0I1UyxrQkFBaEIsQ0FBbUNwRCxLQUFuQyxFQUEwQzhWLElBQTFDLEVBQWdEQyxJQUFoRCxFQUFnREE7QUFDNUMsU0FBT0MsYUFBYSxvQ0FBcEIsSUFBb0IsQ0FBcEI7QUFDSDs7QUFFRDtBQUNJLE1BQU05UyxJQUFJLEdBQ04sNkJBQTZCK1MsT0FBTyxRQUFwQyxJQUFvQyxDQUFwQyxHQUFxREEsT0FBTyxDQURoRSxLQUNnRSxDQURoRTtBQUVBLE1BQU1DLEVBQUUsR0FBR3pYLFVBQVUsQ0FBVkEsSUFBVSxDQUFWQSxVQUFYO0FBQ0EsTUFBTTBYLFlBQVksR0FBTUMsSUFBTixHQUFsQjs7QUFFQSxNQUFJbFQsSUFBSSxDQUFSLFlBQVEsQ0FBUixFQUF3QjtBQUNwQkEsUUFBSSxDQUFKQSxZQUFJLENBQUpBO0FBREosU0FFTztBQUNIQSxRQUFJLENBQUpBLFlBQUksQ0FBSkEsR0FBcUIsUUFBZ0IsQ0FBckNBLEVBQXFDLENBQWhCLENBQXJCQTtBQUNIOztBQUVELFNBQU87QUFDSCxRQUFNbVQsYUFBYSxHQUFHblQsSUFBSSxDQUExQixZQUEwQixDQUExQjs7QUFDQSx1QkFBbUI7QUFDZm1ULG1CQUFhLENBQWJBLFFBQWEsQ0FBYkE7O0FBQ0EsVUFBSUEsYUFBYSxDQUFiQSxTQUFKLEdBQThCO0FBQzFCLGVBQU9uVCxJQUFJLENBQVgsWUFBVyxDQUFYO0FBQ0g7QUFDSjtBQVBMO0FBU0g7O0FDeEVELElBQU1vVCxLQUFLLEdBQVg7QUFDQSxJQUFNQyxNQUFNLEdBQVo7QUFDQSxJQUFNQyxRQUFRLEdBQWQsVyxDQUFBOztBQUdBLFNBQWdCQyxTQUFoQixDQUEwQnhSLE9BQTFCLEVBQTBCQTtBQWlCdEIsTUFBSUEsT0FBTyxDQUFQQSx1QkFBSixNQUF5QztBQUNyQytMLHNCQUFrQjtBQUNyQjs7TUFDTzBGLGFBQStCelIsUUFBL0J5UixVO01BQVlDLGlCQUFtQjFSLFFBQW5CMFIsYzs7QUFDcEIsTUFBSUQsVUFBVSxLQUFkLFdBQThCO0FBQzFCdFksZUFBVyxDQUFYQSxhQUNJc1ksVUFBVSxLQUFWQSxnQkFFTUEsVUFBVSxLQUFWQSxnQkFFQSxpQkFMVnRZO0FBTUg7O0FBQ0QsTUFBSXNZLFVBQVUsS0FBZCxlQUFrQ3RZLFdBQVcsQ0FBWEE7O0FBQ2xDLE1BQUl1WSxjQUFjLEtBQWxCLFdBQWtDO0FBQzlCLFFBQU1DLEVBQUUsR0FBR0QsY0FBYyxLQUFkQSxrQkFBcUNBLGNBQWMsS0FBOUQ7QUFDQXZZLGVBQVcsQ0FBWEE7QUFDQUEsZUFBVyxDQUFYQSxvQkFBZ0N3WSxFQUFFLEtBQUZBLFFBQWVBLEVBQUUsS0FBakJBLGlCQUFoQ3hZO0FBQ0g7O0FBQ0EsZ0pBTVMsZUFBRztBQUNULFFBQUl0QixHQUFHLElBQVAsU0FBb0JzQixXQUFXLENBQVhBLEdBQVcsQ0FBWEEsR0FBbUIsQ0FBQyxDQUFDNkcsT0FBTyxDQUE1QjdHLEdBQTRCLENBQTVCQTtBQVB2QjtBQVNEQSxhQUFXLENBQVhBLGtCQUE4QixDQUFDQSxXQUFXLENBQTFDQTs7QUFDQSxNQUFJLEtBQUosRUFBNEQsRUFJM0Q7O0FBQ0QsTUFBSTZHLE9BQU8sQ0FBWCxtQkFBK0I7QUFDM0IwTyx3QkFBb0IsQ0FBQzFPLE9BQU8sQ0FBNUIwTyxpQkFBb0IsQ0FBcEJBO0FBQ0g7QUFDSjs7U0M1Q2U1TCxnQixDQUNacEgsTSxFQUNBa1csVSxFQUNBQyxXLEVBQ0E3UixPLEVBQUFBO0FBRUEsYUFBYSxFQUZiQSxDQVlDOzs7QUFFRCxNQUFNOFIsV0FBVyxHQUFHbFcseUJBQXlCLENBQTdDLFVBQTZDLENBQTdDO0FBRUEsTUFBTXdFLEdBQUcsR0FBbUMyQyxrQkFBa0IsU0FBbEJBLE9BQWtCLENBQWxCQSxDQUE1QyxLQUE0Q0EsQ0FBNUM7QUFDQXRGLFlBQVU7O0FBQ1YsTUFBSTtBQUNBcEMsV0FBTyxDQUFQQSxXQUFPLENBQVBBLFNBQTZCLGVBQUc7QUFDNUIrRSxTQUFHLENBQUhBLGFBRUkwUixXQUFXLENBRmYxUixHQUVlLENBRmZBO0FBSUksNEJBQXNCdkksR0FBRyxJQUFIQSxjQUFxQmdhLFdBQVcsQ0FBaENoYSxHQUFnQyxDQUFoQ0EsR0FKMUJ1STtBQURKL0U7QUFESixZQVNVO0FBQ05zQyxZQUFRO0FBQ1g7O0FBQ0Q7QUFDSDs7U0N2Q2VnUCxpQixDQUFrQjVSLEssRUFBWWhELFEsRUFBQUE7QUFDMUMsU0FBT2dhLG9CQUFvQixDQUFDZixPQUFPLFFBQW5DLFFBQW1DLENBQVIsQ0FBM0I7QUFDSDs7QUFFRDtBQUNJLE1BQU1qSSxNQUFNLEdBQW9CO0FBQzVCcE8sUUFBSSxFQUFFeVIsSUFBSSxDQUFDM1A7QUFEaUIsR0FBaEM7QUFHQSxNQUFJMlAsSUFBSSxDQUFKQSxjQUFtQkEsSUFBSSxDQUFKQSxvQkFBdkIsR0FDSXJELE1BQU0sQ0FBTkEsZUFBc0JpSixNQUFNLENBQUM1RixJQUFJLENBQVg0RixVQUFNLENBQU5BLEtBQXRCakosb0JBQXNCaUosQ0FBdEJqSjtBQUNKO0FBQ0g7O0FBRUQsU0FBZ0JrSixlQUFoQixDQUFnQ2xYLEtBQWhDLEVBQTRDaEQsUUFBNUMsRUFBNENBO0FBQ3hDLFNBQU9tYSxrQkFBa0IsQ0FBQ2xCLE9BQU8sUUFBakMsUUFBaUMsQ0FBUixDQUF6QjtBQUNIOztBQUVEO0FBQ0ksTUFBTWpJLE1BQU0sR0FBa0I7QUFDMUJwTyxRQUFJLEVBQUV5UixJQUFJLENBQUMzUDtBQURlLEdBQTlCO0FBR0EsTUFBSStOLFlBQVksQ0FBaEIsSUFBZ0IsQ0FBaEIsRUFDSXpCLE1BQU0sQ0FBTkEsWUFBbUJoSyxLQUFLLENBQUxBLEtBQWdCb04sWUFBWSxDQUE1QnBOLElBQTRCLENBQTVCQSxNQUFuQmdLLGtCQUFtQmhLLENBQW5CZ0s7QUFDSjtBQUNIOztBQUVEO0FBQ0ksU0FBT2hLLEtBQUssQ0FBTEEsS0FBVyxRQUFsQixJQUFrQixDQUFYQSxDQUFQO0FBQ0g7O0FDM0JELElBQUlvVCxXQUFXLEdBQWY7O0FBRUEsU0FBZ0JDLHFCQUFoQixHQUFnQkE7QUFDWjtBQUNIOztBQUNEQSxxQkFBcUIsQ0FBckJBLHlCQUFrQzdaLE1BQU0sQ0FBTkEsT0FBYzhaLEtBQUssQ0FBckRELFNBQWtDN1osQ0FBbEM2Wjs7QUFFQSxTQUFnQkUsdUJBQWhCLENBQXdDcGEsS0FBeEMsRUFBd0NBO0FBQ3BDLFNBQU9BLEtBQUssWUFBWjtBQUNIOztBQVVELElBQU1xYSxjQUFjLGdCQUFHeFIsb0JBQW9CLENBQTNDLE1BQTJDLENBQTNDO0FBRUEsSUFBYUssSUFBSSxnQkFBUyxNQUFNLENBQU4sT0FDdEI7QUFDSTtBQUNBLE1BQUkxSCxXQUFXLENBQWYsSUFBZSxDQUFmLEVBQXVCO0FBQ25CLFdBQU93QyxlQUFlLGFBQXRCLGNBQXNCLENBQXRCO0FBQ0gsR0FKTCxDQUlLOzs7QUFFRCxNQUFJLEtBQUosRUFDSWpFO0FBQ0osTUFBTXVhLFNBQVMsR0FBZjtBQUNBLE1BQU03WCxJQUFJLEdBQUc2WCxTQUFTLENBQVRBLFFBQWIsaUJBVEosQ0FTSTs7QUFHQSxNQUFNM1csR0FBRyxHQUFHLFNBQU5BLEdBQU07QUFDUixRQUFNNFcsR0FBRyxHQUFUO0FBQ0EsUUFBTXRhLElBQUksR0FBVjtBQUNBLFFBQU11YSxLQUFLLEdBQUcsRUFBZDtBQUNBLFFBQU1DLEdBQUcsR0FBR3BILE1BQU0sQ0FBSTVRLElBQUosZUFBSUEsR0FBSixLQUFJQSxHQUFKLFdBQU40USxTQUFNLENBQU5BLFlBQVosSUFBWUEsQ0FBWjtBQUNBO0FBQ0EsUUFBSXFILGNBQWMsR0FBbEI7QUFFQSxRQUFNQyxPQUFPLEdBQUcsWUFBWTtBQUN4QixVQUFJQyxNQUFNLEdBQVY7QUFDQUMsY0FBUSxHQUFSQTs7QUFFQTtBQUNJSCxzQkFBYyxHQUFkQTtBQUNBOztBQUNBLFlBQUk7QUFDQUksYUFBRyxHQUFHekgsTUFBTSxDQUNMNVEsSUFESyxlQUNMQSxHQURLLEtBQ0xBLEdBREssV0FDTEEsR0FBa0NtWSxNQUQ3QixJQUVSSCxHQUFHLENBRkRwSCxJQUFNLENBQU5BLFdBQU55SCxHQUFNekgsQ0FBTnlIO0FBREosVUFLRSxVQUFVO0FBQ1IsaUJBQU9DLE1BQU0sQ0FBYixDQUFhLENBQWI7QUFDSDs7QUFFREMsWUFBSSxDQUFKQSxHQUFJLENBQUpBO0FBQ0g7O0FBRUQ7QUFDSU4sc0JBQWMsR0FBZEE7QUFDQTs7QUFDQSxZQUFJO0FBQ0FJLGFBQUcsR0FBR3pILE1BQU0sQ0FDTDVRLElBREssZUFDTEEsR0FESyxLQUNMQSxHQURLLFdBQ0xBLEdBQWtDbVksTUFEN0IsSUFFUkgsR0FBRyxDQUZEcEgsT0FFQyxDQUZLLENBQU5BLFdBQU55SCxHQUFNekgsQ0FBTnlIO0FBREosVUFLRSxVQUFVO0FBQ1IsaUJBQU9DLE1BQU0sQ0FBYixDQUFhLENBQWI7QUFDSDs7QUFDREMsWUFBSSxDQUFKQSxHQUFJLENBQUpBO0FBQ0g7O0FBRUQ7QUFDSSxZQUFJMVosVUFBVSxDQUFDd1osR0FBRCxRQUFDQSxHQUFELE1BQUNBLE1BQUcsQ0FBbEIsSUFBYyxDQUFkLEVBQTJCO0FBQ3ZCO0FBQ0FBLGFBQUcsQ0FBSEE7QUFDQTtBQUNIOztBQUNELFlBQUlBLEdBQUcsQ0FBUCxNQUFjLE9BQU9HLE9BQU8sQ0FBQ0gsR0FBRyxDQUFsQixLQUFjLENBQWQ7QUFDZEosc0JBQWMsR0FBR1EsT0FBTyxDQUFQQSxRQUFnQkosR0FBRyxDQUFwQ0osS0FBaUJRLENBQWpCUjtBQUNBLGVBQU9BLGNBQWUsQ0FBZkEsa0JBQVAsVUFBT0EsQ0FBUDtBQUNIOztBQUVEUyxpQkFBVyxDQUFYQSxTQUFXLENBQVhBLENBNUN3QixDQTRDeEJBO0FBNUNKLEtBQWdCLENBQWhCO0FBK0NBUixXQUFPLENBQVBBLFNBQWlCdEgsTUFBTSxDQUFJNVEsSUFBSixlQUFJQSxHQUFKLEtBQUlBLEdBQUosYUFBdUM7QUFDMUQsVUFBSTtBQUNBLDRCQUFvQjJZLGFBQWEsQ0FEakMsY0FDaUMsQ0FBYkEsQ0FEcEI7O0FBR0EsWUFBTXpYLElBQUcsR0FBRzhXLEdBQUcsQ0FBSEEsUUFBRyxDQUFIQSxDQUhaLFNBR1lBLENBQVosQ0FIQTs7O0FBS0EsWUFBTVksY0FBYyxHQUFHSCxPQUFPLENBQVBBLFFBQWdCdlgsSUFBRyxDQUExQyxLQUF1QnVYLENBQXZCO0FBQ0FHLHNCQUFjLENBQWRBO0FBQ0FELHFCQUFhLENBUGIsY0FPYSxDQUFiQSxDQVBBO0FBUUE7O0FBQ0FQLGdCQUFRLENBQUMsSUFBVEEscUJBQVMsRUFBRCxDQUFSQTtBQVRKLFFBVUUsVUFBVTtBQUNSQSxnQkFBUSxDQURBLENBQ0EsQ0FBUkEsQ0FEUTtBQUVYO0FBYkxGLEtBQXVCLENBQXZCQTtBQWVBO0FBdEVKOztBQXdFQWhYLEtBQUcsQ0FBSEE7QUFDQTtBQXRGa0IsR0FBbkIsY0FBbUIsQ0FBMUI7O0FBMkZBO0FBQ0ksTUFBSXJDLFVBQVUsQ0FBQ3FaLE9BQU8sQ0FBdEIsTUFBYyxDQUFkLEVBQWdDQSxPQUFPLENBQVBBO0FBQ25DOztBQUVELFNBQWdCVyxVQUFoQixDQUNJekssTUFESixFQUNJQTtBQU1BLGdCQU5BQSxDQU1BO0FBQ0g7O0FBRUQsU0FBZ0IvSCxNQUFoQixDQUF1QnZILEVBQXZCLEVBQXVCQTtBQUNuQixTQUFPLEdBQUUsSUFBRixrQkFBRSxDQUFGLGdCQUFQO0FBQ0g7O1NDekdlZ2EsYyxDQUFlMVksSyxFQUFPMlksYSxFQUFnQnhGLE8sRUFBQUE7QUFDbEQ7O0FBQ0EsTUFBSS9PLGVBQWUsQ0FBZkEsS0FBZSxDQUFmQSxJQUEwQkQsaUJBQWlCLENBQTNDQyxLQUEyQyxDQUEzQ0EsSUFBc0RtSSxpQkFBaUIsQ0FBM0UsS0FBMkUsQ0FBM0UsRUFBb0Y7QUFDaEY1TCxVQUFNLEdBQUdpWSxpQkFBaUIsQ0FBMUJqWSxLQUEwQixDQUExQkE7QUFESixTQUVPLElBQUl1RCxrQkFBa0IsQ0FBdEIsS0FBc0IsQ0FBdEIsRUFBK0I7QUFDbEMsUUFBSSxLQUFKLEVBQ0k7QUFHSnZELFVBQU0sR0FBR2lZLGlCQUFpQixRQUExQmpZLGFBQTBCLENBQTFCQTtBQUxHLFNBTUEsV0FBYSxFQUVuQjs7QUFDRCxNQUFJLEtBQUosRUFDSTtBQUNKQSxRQUFNLENBQU5BLFdBQWtCLHNEQUFsQkE7QUFDQSxTQUFPO0FBQ0hBLFVBQU0sQ0FBTkE7QUFESjtBQUdIOztTQ1hla1ksUyxDQUFVN1ksSyxFQUFPMlksYSxFQUFnQnhGLE8sRUFBQUE7QUFDN0MsTUFBSTFVLFVBQVUsQ0FBZCxPQUFjLENBQWQsRUFBeUIsT0FBT3FhLGlCQUFpQix1QkFBakQsT0FBaUQsQ0FBeEIsQ0FBekIsS0FDSyxPQUFPQyxzQkFBc0IsUUFBN0IsYUFBNkIsQ0FBN0I7QUFDUjs7QUFFRDtBQUNJLFNBQU9ILGlCQUFpQixDQUFqQkEsS0FBaUIsQ0FBakJBLFlBQVAsT0FBT0EsQ0FBUDtBQUNIOztBQUVEO0FBQ0ksU0FBT0EsaUJBQWlCLFFBQWpCQSxRQUFpQixDQUFqQkEsWUFBUCxPQUFPQSxDQUFQO0FBQ0g7O1NDckRlSSxXLENBQVlwYSxLLEVBQU81QixRLEVBQUFBO0FBQy9CLE1BQUlBLFFBQVEsS0FBWixXQUE0QjtBQUN4QixRQUFJa0gsa0JBQWtCLENBQWxCQSxLQUFrQixDQUFsQkEsS0FBSixPQUF5QztBQUN6QyxRQUFJLENBQUN0RixLQUFLLENBQUxBLEtBQUssQ0FBTEEsYUFBTCxRQUFLQSxDQUFMLEVBQXlDO0FBQ3pDLFFBQU1zRSxJQUFJLEdBQUcrUyxPQUFPLFFBQXBCLFFBQW9CLENBQXBCO0FBQ0EsV0FBT2xILGVBQWUsQ0FBdEIsSUFBc0IsQ0FBdEI7QUFDSDs7QUFDRCxTQUFPQSxlQUFlLENBQXRCLEtBQXNCLENBQXRCO0FBQ0g7O0FBRUQsU0FBZ0JrSyxVQUFoQixDQUEyQnJhLEtBQTNCLEVBQTJCQTtBQUN2QixNQUFJLEtBQUosRUFDSTtBQUdKLFNBQU9vYSxXQUFXLENBQWxCLEtBQWtCLENBQWxCO0FBQ0g7O0FBRUQsU0FBZ0JFLGNBQWhCLENBQStCdGEsS0FBL0IsRUFBMkNVLFFBQTNDLEVBQTJDQTtBQUN2QyxNQUFJLEtBQUosRUFDSTtBQUNKLFNBQU8wWixXQUFXLFFBQWxCLFFBQWtCLENBQWxCO0FBQ0g7O0FDWkQ7QUFDSSxNQUFJLENBQUosT0FBWTs7QUFDWixNQUFJaGMsUUFBUSxLQUFaLFdBQTRCO0FBQ3hCLFFBQUksS0FBSixFQUNJOztBQUdKLFFBQUlrSCxrQkFBa0IsQ0FBdEIsS0FBc0IsQ0FBdEIsRUFBK0I7QUFDM0IsYUFBT3RGLEtBQUssQ0FBTEEsS0FBSyxDQUFMQSxhQUFQLFFBQU9BLENBQVA7QUFDSDs7QUFDRDtBQUNILEdBWEwsQ0FXSzs7O0FBRUQsU0FDSXNGLGtCQUFrQixDQUFsQkEsS0FBa0IsQ0FBbEJBLElBQ0EsQ0FBQyxDQUFDdEYsS0FBSyxDQURQc0YsS0FDTyxDQURQQSxJQUVBcEIsTUFBTSxDQUZOb0IsS0FFTSxDQUZOQSxJQUdBd1AsVUFBVSxDQUhWeFAsS0FHVSxDQUhWQSxJQUlBNkssZUFBZSxDQUxuQixLQUttQixDQUxuQjtBQU9IOztBQUVELFNBQWdCaEwsWUFBaEIsQ0FBNkJuRixLQUE3QixFQUE2QkE7QUFDekIsTUFBSSxLQUFKLEVBQ0kxQjtBQUdKLFNBQU9pYyxhQUFhLENBQXBCLEtBQW9CLENBQXBCO0FBQ0g7O0FBRUQsU0FBZ0JDLGdCQUFoQixDQUFpQ3hhLEtBQWpDLEVBQTZDVSxRQUE3QyxFQUE2Q0E7QUFDekMsTUFBSSxLQUFKLEVBQXVDO0FBQ3ZDLFNBQU82WixhQUFhLFFBQXBCLFFBQW9CLENBQXBCO0FBQ0g7O1NDekJlL1ksSSxDQUFLbEIsRyxFQUFBQTtBQUNqQixNQUFJZ0Ysa0JBQWtCLENBQXRCLEdBQXNCLENBQXRCLEVBQTZCO0FBQ3pCLFdBQVVoRixHQUFtQyxDQUFuQ0EsS0FBbUMsQ0FBbkNBLENBQVYsS0FBVUEsRUFBVjtBQUdIOztBQUNELE1BQUlrRixlQUFlLENBQWZBLEdBQWUsQ0FBZkEsSUFBd0JDLGVBQWUsQ0FBM0MsR0FBMkMsQ0FBM0MsRUFBa0Q7QUFDOUMsV0FBT0wsS0FBSyxDQUFMQSxLQUFXOUUsR0FBRyxDQUFyQixJQUFrQkEsRUFBWDhFLENBQVA7QUFDSDs7QUFDRCxNQUFJRyxpQkFBaUIsQ0FBckIsR0FBcUIsQ0FBckIsRUFBNEI7QUFDeEIsV0FBTyxHQUFHLENBQUgsSUFBUTtBQUFBO0FBQWYsS0FBTyxDQUFQO0FBQ0g7O0FBQ0RqSCxLQUFHLENBQUhBLENBQUcsQ0FBSEE7QUFDSDs7QUFNRCxTQUFnQm1jLE1BQWhCLENBQXVCbmEsR0FBdkIsRUFBdUJBO0FBQ25CLE1BQUlnRixrQkFBa0IsQ0FBdEIsR0FBc0IsQ0FBdEIsRUFBNkI7QUFDekIsV0FBTyxJQUFJLENBQUosR0FBSSxDQUFKLEtBQWMsZUFBRztBQUFBLGFBQUloRixHQUFHLENBQVAsR0FBTyxDQUFQO0FBQXhCLEtBQU8sQ0FBUDtBQUNIOztBQUNELE1BQUlrRixlQUFlLENBQW5CLEdBQW1CLENBQW5CLEVBQTBCO0FBQ3RCLFdBQU8sSUFBSSxDQUFKLEdBQUksQ0FBSixLQUFjLGVBQUc7QUFBQSxhQUFJbEYsR0FBRyxDQUFIQSxJQUFKLEdBQUlBLENBQUo7QUFBeEIsS0FBTyxDQUFQO0FBQ0g7O0FBQ0QsTUFBSW1GLGVBQWUsQ0FBbkIsR0FBbUIsQ0FBbkIsRUFBMEI7QUFDdEIsV0FBT0wsS0FBSyxDQUFMQSxLQUFXOUUsR0FBRyxDQUFyQixNQUFrQkEsRUFBWDhFLENBQVA7QUFDSDs7QUFDRCxNQUFJRyxpQkFBaUIsQ0FBckIsR0FBcUIsQ0FBckIsRUFBNEI7QUFDeEIsV0FBT2pGLEdBQUcsQ0FBVixLQUFPQSxFQUFQO0FBQ0g7O0FBQ0RoQyxLQUFHLENBQUhBLENBQUcsQ0FBSEE7QUFDSDs7QUFRRCxTQUFnQm9jLE9BQWhCLENBQXdCcGEsR0FBeEIsRUFBd0JBO0FBQ3BCLE1BQUlnRixrQkFBa0IsQ0FBdEIsR0FBc0IsQ0FBdEIsRUFBNkI7QUFDekIsV0FBTyxJQUFJLENBQUosR0FBSSxDQUFKLEtBQWMsZUFBRztBQUFBLGFBQUksTUFBTWhGLEdBQUcsQ0FBYixHQUFhLENBQVQsQ0FBSjtBQUF4QixLQUFPLENBQVA7QUFDSDs7QUFDRCxNQUFJa0YsZUFBZSxDQUFuQixHQUFtQixDQUFuQixFQUEwQjtBQUN0QixXQUFPLElBQUksQ0FBSixHQUFJLENBQUosS0FBYyxlQUFHO0FBQUEsYUFBSSxNQUFNbEYsR0FBRyxDQUFIQSxJQUFWLEdBQVVBLENBQU4sQ0FBSjtBQUF4QixLQUFPLENBQVA7QUFDSDs7QUFDRCxNQUFJbUYsZUFBZSxDQUFuQixHQUFtQixDQUFuQixFQUEwQjtBQUN0QixXQUFPTCxLQUFLLENBQUxBLEtBQVc5RSxHQUFHLENBQXJCLE9BQWtCQSxFQUFYOEUsQ0FBUDtBQUNIOztBQUNELE1BQUlHLGlCQUFpQixDQUFyQixHQUFxQixDQUFyQixFQUE0QjtBQUN4QixXQUFPLEdBQUcsQ0FBSCxJQUFRO0FBQUEsYUFBZ0IsUUFBaEIsR0FBZ0IsQ0FBaEI7QUFBZixLQUFPLENBQVA7QUFDSDs7QUFDRGpILEtBQUcsQ0FBSEEsQ0FBRyxDQUFIQTtBQUNIOztBQVFELFNBQWdCdUosR0FBaEIsQ0FBb0J2SCxHQUFwQixFQUE4QnBDLEdBQTlCLEVBQXdDOEIsS0FBeEMsRUFBd0NBO0FBQ3BDLE1BQUkyYSxTQUFTLENBQVRBLGdCQUEwQixDQUFDbFYsZUFBZSxDQUE5QyxHQUE4QyxDQUE5QyxFQUFxRDtBQUNqRDNCLGNBQVU7QUFDVixRQUFNMlcsT0FBTSxHQUFaOztBQUNBLFFBQUk7QUFDQSxXQUFLLElBQUw7QUFBd0I1UyxXQUFHLFlBQVc0UyxPQUFNLENBQXBCNVMsSUFBb0IsQ0FBakIsQ0FBSEE7QUFBeEI7QUFESixjQUVVO0FBQ043RCxjQUFRO0FBQ1g7O0FBQ0Q7QUFDSDs7QUFDRCxNQUFJc0Isa0JBQWtCLENBQXRCLEdBQXNCLENBQXRCLEVBQTZCO0FBQ3RCaEYsT0FBbUMsQ0FBbkNBLEtBQW1DLENBQW5DQTtBQURQLFNBRU8sSUFBSWtGLGVBQWUsQ0FBbkIsR0FBbUIsQ0FBbkIsRUFBMEI7QUFDN0JsRixPQUFHLENBQUhBO0FBREcsU0FFQSxJQUFJbUYsZUFBZSxDQUFuQixHQUFtQixDQUFuQixFQUEwQjtBQUM3Qm5GLE9BQUcsQ0FBSEE7QUFERyxTQUVBLElBQUlpRixpQkFBaUIsQ0FBckIsR0FBcUIsQ0FBckIsRUFBNEI7QUFDL0IsUUFBSSxlQUFKLFVBQTZCckgsR0FBRyxHQUFHMGMsUUFBUSxNQUFkMWMsRUFBYyxDQUFkQTtBQUM3QixRQUFJQSxHQUFHLEdBQVAsR0FBYUksR0FBRyw0QkFBSEEsR0FBRyxDQUFIQTtBQUNid0YsY0FBVTtBQUNWLFFBQUk1RixHQUFHLElBQUlvQyxHQUFHLENBQWQsUUFBdUJBLEdBQUcsQ0FBSEEsU0FBYXBDLEdBQUcsR0FBaEJvQztBQUN2QkEsT0FBRyxDQUFIQSxHQUFHLENBQUhBO0FBQ0EwRCxZQUFRO0FBTkwsU0FPQTFGLEdBQUcsQ0FBSEEsQ0FBRyxDQUFIQTtBQUNWOztBQU1ELFNBQWdCdWMsTUFBaEIsQ0FBdUJ2YSxHQUF2QixFQUFpQ3BDLEdBQWpDLEVBQWlDQTtBQUM3QixNQUFJb0gsa0JBQWtCLENBQXRCLEdBQXNCLENBQXRCLEVBQTZCO0FBQ3RCaEYsT0FBbUMsQ0FBbkNBLEtBQW1DLENBQW5DQTtBQURQLFNBRU8sSUFBSWtGLGVBQWUsQ0FBbkIsR0FBbUIsQ0FBbkIsRUFBMEI7QUFDN0JsRixPQUFHLENBQUhBLFFBQUcsQ0FBSEE7QUFERyxTQUVBLElBQUltRixlQUFlLENBQW5CLEdBQW1CLENBQW5CLEVBQTBCO0FBQzdCbkYsT0FBRyxDQUFIQSxRQUFHLENBQUhBO0FBREcsU0FFQSxJQUFJaUYsaUJBQWlCLENBQXJCLEdBQXFCLENBQXJCLEVBQTRCO0FBQy9CLFFBQUksZUFBSixVQUE2QnJILEdBQUcsR0FBRzBjLFFBQVEsTUFBZDFjLEVBQWMsQ0FBZEE7QUFDN0JvQyxPQUFHLENBQUhBO0FBRkcsU0FHQTtBQUNIaEMsT0FBRyxDQUFIQSxDQUFHLENBQUhBO0FBQ0g7QUFDSjs7QUFNRCxTQUFnQndjLEdBQWhCLENBQW9CeGEsR0FBcEIsRUFBOEJwQyxHQUE5QixFQUE4QkE7QUFDMUIsTUFBSW9ILGtCQUFrQixDQUF0QixHQUFzQixDQUF0QixFQUE2QjtBQUN6QixXQUFTaEYsR0FBbUMsQ0FBbkNBLEtBQW1DLENBQW5DQSxNQUFULEdBQVNBLENBQVQ7QUFESixTQUVPLElBQUlrRixlQUFlLENBQW5CLEdBQW1CLENBQW5CLEVBQTBCO0FBQzdCLFdBQU9sRixHQUFHLENBQUhBLElBQVAsR0FBT0EsQ0FBUDtBQURHLFNBRUEsSUFBSW1GLGVBQWUsQ0FBbkIsR0FBbUIsQ0FBbkIsRUFBMEI7QUFDN0IsV0FBT25GLEdBQUcsQ0FBSEEsSUFBUCxHQUFPQSxDQUFQO0FBREcsU0FFQSxJQUFJaUYsaUJBQWlCLENBQXJCLEdBQXFCLENBQXJCLEVBQTRCO0FBQy9CLFdBQU9ySCxHQUFHLElBQUhBLEtBQVlBLEdBQUcsR0FBR29DLEdBQUcsQ0FBNUI7QUFDSDs7QUFDRGhDLEtBQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNIOztBQUtELFNBQWdCc0osR0FBaEIsQ0FBb0J0SCxHQUFwQixFQUE4QnBDLEdBQTlCLEVBQThCQTtBQUMxQixNQUFJLENBQUM0YyxHQUFHLE1BQVIsR0FBUSxDQUFSLEVBQW9COztBQUNwQixNQUFJeFYsa0JBQWtCLENBQXRCLEdBQXNCLENBQXRCLEVBQTZCO0FBQ3pCLFdBQVNoRixHQUFtQyxDQUFuQ0EsS0FBbUMsQ0FBbkNBLE1BQVQsR0FBU0EsQ0FBVDtBQURKLFNBRU8sSUFBSWtGLGVBQWUsQ0FBbkIsR0FBbUIsQ0FBbkIsRUFBMEI7QUFDN0IsV0FBT2xGLEdBQUcsQ0FBSEEsSUFBUCxHQUFPQSxDQUFQO0FBREcsU0FFQSxJQUFJaUYsaUJBQWlCLENBQXJCLEdBQXFCLENBQXJCLEVBQTRCO0FBQy9CLFdBQU9qRixHQUFHLENBQVYsR0FBVSxDQUFWO0FBQ0g7O0FBQ0RoQyxLQUFHLENBQUhBLEVBQUcsQ0FBSEE7QUFDSDs7U0MxR2V5YyxPLENBQVEzWixLLEVBQU80WixRLEVBQVdDLFEsRUFBV0MsZSxFQUFBQTtBQUNqRCxNQUFJcmIsVUFBVSxDQUFkLFFBQWMsQ0FBZCxFQUNJLE9BQU9zYix5QkFBeUIsNEJBRHBDLGVBQ29DLENBQWhDLENBREosS0FFSyxPQUFPQyxpQkFBaUIsa0JBQXhCLFFBQXdCLENBQXhCO0FBQ1I7O0FBRUQ7QUFDSSxTQUFPcEIsaUJBQWlCLENBQWpCQSxLQUFpQixDQUFqQkEsb0JBQVAsZUFBT0EsQ0FBUDtBQUNIOztBQUVEO0FBQ0ksU0FBT0EsaUJBQWlCLFFBQWpCQSxRQUFpQixDQUFqQkEsb0JBQVAsZUFBT0EsQ0FBUDtBQUNIOztBQ3RERDtBQUNJOVEsS0FBRyxDQUFIQTtBQUNBO0FBQ0g7O0FBRUQ7QUFDSSxNQUNJMUMsTUFBTSxJQUFOQSxRQUNBLGtCQURBQSxZQUVBQSxNQUFNLFlBRk5BLFFBR0EsQ0FBQ3JCLFlBQVksQ0FKakIsTUFJaUIsQ0FKakIsRUFNSTtBQUVKLE1BQUl3SSxpQkFBaUIsQ0FBckIsTUFBcUIsQ0FBckIsRUFBK0IsT0FBTzBOLFVBQVUsQ0FBQzdVLE1BQU0sQ0FBUCxHQUFDQSxFQUFELEVBQWpCLGFBQWlCLENBQWpCOztBQUMvQixNQUFJOFUsYUFBYSxDQUFiQSxJQUFKLE1BQUlBLENBQUosRUFBK0I7QUFDM0IsV0FBT0EsYUFBYSxDQUFiQSxJQUFQLE1BQU9BLENBQVA7QUFDSDs7QUFDRCxNQUFJL1YsaUJBQWlCLENBQXJCLE1BQXFCLENBQXJCLEVBQStCO0FBQzNCLFFBQU1yRCxHQUFHLEdBQUdxWixLQUFLLHdCQUF3QixVQUFVL1UsTUFBTSxDQUF6RCxNQUF5QyxDQUF4QixDQUFqQjtBQUNBQSxVQUFNLENBQU5BLFFBQWU7QUFDWHRFLFNBQUcsQ0FBSEEsR0FBRyxDQUFIQSxHQUFXbVosVUFBVSxRQUFyQm5aLGFBQXFCLENBQXJCQTtBQURKc0U7QUFHQTtBQUNIOztBQUNELE1BQUlmLGVBQWUsQ0FBbkIsTUFBbUIsQ0FBbkIsRUFBNkI7QUFDekIsUUFBTXZELElBQUcsR0FBR3FaLEtBQUssd0JBQXdCLElBQXpDLEdBQXlDLEVBQXhCLENBQWpCOztBQUNBL1UsVUFBTSxDQUFOQSxRQUFlLGlCQUFLO0FBQ2hCdEUsVUFBRyxDQUFIQSxJQUFRbVosVUFBVSxRQUFsQm5aLGFBQWtCLENBQWxCQTtBQURKc0U7QUFHQTtBQUNIOztBQUNELE1BQUloQixlQUFlLENBQW5CLE1BQW1CLENBQW5CLEVBQTZCO0FBQ3pCLFFBQU10RCxLQUFHLEdBQUdxWixLQUFLLHdCQUF3QixJQUF6QyxHQUF5QyxFQUF4QixDQUFqQjs7QUFDQS9VLFVBQU0sQ0FBTkEsUUFBZTtBQUNYdEUsV0FBRyxDQUFIQSxTQUFhbVosVUFBVSxRQUF2Qm5aLGFBQXVCLENBQXZCQTtBQURKc0U7QUFHQTtBQUxKLFNBTU87QUFDSDtBQUNBaEYsUUFBSSxDQUZELE1BRUMsQ0FBSkEsQ0FGRzs7QUFHSCxRQUFNVSxLQUFHLEdBQUdxWixLQUFLLHdCQUFqQixFQUFpQixDQUFqQjs7QUFDQWhhLHNCQUFrQixDQUFsQkEsTUFBa0IsQ0FBbEJBLFNBQW1DO0FBQy9CVyxXQUFHLENBQUhBLEdBQUcsQ0FBSEEsR0FBV21aLFVBQVUsQ0FBQzdVLE1BQU0sQ0FBUCxHQUFPLENBQVAsRUFBckJ0RSxhQUFxQixDQUFyQkE7QUFESlg7QUFHQTtBQUNIO0FBQ0o7QUFFRDs7Ozs7QUFHQSxTQUFnQmlhLElBQWhCLENBQXdCaFYsTUFBeEIsRUFBbUNILE9BQW5DLEVBQW1DQTtBQUMvQixNQUFJLEtBQUosRUFBd0IvSDtBQUN4QixTQUFPK2MsVUFBVSxTQUFTLElBQTFCLEdBQTBCLEVBQVQsQ0FBakI7QUFDSDs7U0M3RGVqSCxLLEdBQUFBO0FBQ1osTUFBSSxJQUFKLEVBQWM5VixHQUFHLENBQUhBLCtDQUFHLENBQUhBO0FBQ2QsTUFBSStWLGVBQWUsR0FBbkI7O29DQUZxQjdWLHNCLEVBQUFBLFEsRUFBQUEsVyxFQUFBQSxNLEVBQUFBO0FBQUFBOzs7QUFHckIsTUFBSSxPQUFPQSxJQUFJLENBQUNBLElBQUksQ0FBSkEsU0FBWixDQUFXLENBQVgsS0FBSixXQUFnRDZWLGVBQWUsR0FBRzdWLElBQUksQ0FBdEI2VixHQUFrQjdWLEVBQWxCNlY7QUFDaEQsTUFBTS9GLFVBQVUsR0FBR21OLGVBQWUsQ0FBbEMsSUFBa0MsQ0FBbEM7O0FBQ0EsTUFBSSxDQUFKLFlBQWlCO0FBQ2IsV0FBT25kLEdBQUcsQ0FBViwrSUFBVSxDQUFWO0FBR0g7O0FBQ0QsTUFBSWdRLFVBQVUsQ0FBVkEsZUFBMEJHLFNBQVMsQ0FBdkMsTUFBOEM7QUFDMUN5QixXQUFPLENBQVBBLHVCQUE2QjVCLFVBQVUsQ0FBdkM0QjtBQUNIOztBQUNENUIsWUFBVSxDQUFWQSxhQUF3QitGLGVBQWUsR0FBRzVGLFNBQVMsQ0FBWixRQUFxQkEsU0FBUyxDQUFyRUg7QUFDSDs7QUFFRDtBQUNJLFVBQVE5UCxJQUFJLENBQVo7QUFDSTtBQUNJLGFBQU9nQixXQUFXLENBQWxCOztBQUNKO0FBQ0ksYUFBTzZYLE9BQU8sQ0FBQzdZLElBQUksQ0FBbkIsQ0FBbUIsQ0FBTCxDQUFkOztBQUNKO0FBQ0ksYUFBTzZZLE9BQU8sQ0FBQzdZLElBQUksQ0FBTCxDQUFLLENBQUwsRUFBVUEsSUFBSSxDQUE1QixDQUE0QixDQUFkLENBQWQ7QUFOUjtBQVFIO0FDNUJEOzs7Ozs7Ozs7QUFPQSxTQUFnQmtkLFdBQWhCLENBQStCOUosTUFBL0IsRUFBZ0QrSixPQUFoRCxFQUFnREE7TUFBQUEsa0IsRUFBQUE7QUFBQUEsY0FBVXJPLFNBQVZxTzs7O0FBQzVDN1gsWUFBVTs7QUFDVixNQUFJO0FBQ0EsV0FBTzhOLE1BQU0sQ0FBTkEsTUFBUCxPQUFPQSxDQUFQO0FBREosWUFFVTtBQUNONU4sWUFBUTtBQUNYO0FBQ0o7O1NDVWU0WCxJLENBQUtDLFMsRUFBZ0I5UixJLEVBQVltTixJLEVBQUFBO0FBQzdDLE1BQUl5RCxTQUFTLENBQVRBLGdCQUEyQjVRLElBQUksSUFBSSxnQkFBdkMsVUFDSSxPQUFPK1IsV0FBVyxZQUFsQixJQUFrQixDQUFsQjtBQUNKLFNBQU9DLEtBQUssa0JBQWtCN0UsSUFBSSxJQUFsQyxFQUFZLENBQVo7QUFDSDs7QUFFRDtBQUNJOztBQUNBLE1BQUksT0FBT3BOLElBQUksQ0FBWCxZQUFKLFVBQXNDO0FBQ2xDa1MsaUJBQWEsR0FBRzdKLFVBQVUsQ0FBQztBQUN2QixVQUFJLENBQUM4SixRQUFRLENBQVJBLEtBQVEsQ0FBUkEsQ0FBTCxhQUFrQztBQUM5QkEsZ0JBQVE7QUFDUixZQUFNMWQsS0FBSyxHQUFHLFVBQWQsY0FBYyxDQUFkO0FBQ0EsWUFBSXVMLElBQUksQ0FBUixTQUFrQkEsSUFBSSxDQUFKQSxRQUFsQixLQUFrQkEsRUFBbEIsS0FDSztBQUNSO0FBTnFCLE9BT3ZCQSxJQUFJLENBUFBrUyxPQUEwQixDQUExQkE7QUFRSDs7QUFFRGxTLE1BQUksQ0FBSkEsT0FBWSxTQUFVQSxTQUFWLEdBQVpBO0FBQ0EsTUFBTTRNLFlBQVksR0FBR3ZQLFlBQVksQ0FDN0IsU0FBVTJDLFNBQVYsR0FENkIsZUFBakMsTUFBaUMsQ0FBakMsQ0FkSixDQWNJOztBQUtBLE1BQUltUyxRQUFRLEdBQUdsTSxPQUFPLENBQUMsYUFBQztBQUNwQjtBQUNBLFFBQUltTSxJQUFJLEdBQUd2USxpQkFBaUIsUUFBNUIsU0FBNEIsQ0FBNUI7O0FBQ0EsY0FBVTtBQUNOd0ksT0FBQyxDQUFEQTtBQUNBLHlCQUFtQmdJLFlBQVksQ0FBWkEsYUFBWSxDQUFaQTtBQUNuQnpGLGtCQUFZO0FBQ2Y7QUFQaUIsS0FBdEIsSUFBc0IsQ0FBdEI7QUFTQTtBQUNIOztBQUVEO0FBSUksTUFBSSxLQUFKLEVBQ0k7QUFDSjtBQUNBLE1BQU14VSxHQUFHLEdBQUcsWUFBWTtBQUNwQixRQUFJK1osUUFBUSxHQUFHRixLQUFLO0FBQWdDSyxhQUFPLEVBQUU5QztBQUF6QyxPQUFwQjs7QUFDQStDLFVBQU0sR0FBRztBQUNMSixjQUFRO0FBQ1IzQyxZQUFNLENBQU5BLGdCQUFNLENBQU5BO0FBRkorQztBQUZKLEdBQVksQ0FBWjtBQU9FbmEsS0FBVyxDQUFYQTtBQUNGO0FBQ0g7O0FDbEVEO0FBQ0ksU0FBT0gsTUFBTSxDQUFiLEtBQWEsQ0FBYjtBQUNILEMsQ0FBQTtBQUdEOzs7QUFDQSxJQUFNdWEsZ0JBQWdCLEdBQXNCO0FBQ3hDeEIsS0FEd0M7QUFFcEMsUUFBSSxLQUFKLEVBQ0l6YjtBQUdKLFdBQU9rZCxNQUFNLENBQU5BLE1BQU0sQ0FBTkEsTUFBUCxJQUFPQSxDQUFQO0FBTm9DO0FBUXhDM1UsS0FSd0M7QUFTcEMsV0FBTzJVLE1BQU0sQ0FBTkEsTUFBTSxDQUFOQSxNQUFQLElBQU9BLENBQVA7QUFUb0M7QUFXeEMxVSxLQVh3Qzs7O0FBWXBDLFFBQUksQ0FBQzlILFdBQVcsQ0FBaEIsSUFBZ0IsQ0FBaEIsRUFBd0I7O0FBQ3hCLFFBQUksS0FBSixFQUFrRCxFQWJkLENBaUJuQzs7O0FBRUQsMkJBQU93YyxNQUFNLENBQU5BLE1BQU0sQ0FBTkEsbUJBQVAsSUFBT0EsQ0FBUDtBQW5Cb0M7QUFxQnhDQyxnQkFyQndDOzs7QUFzQnBDLGVBQWEsRUFJWjs7QUFDRCxRQUFJLENBQUN6YyxXQUFXLENBQWhCLElBQWdCLENBQWhCLEVBQXdCLGFBM0JZLENBMkJaOztBQUV4Qiw4QkFBT3djLE1BQU0sQ0FBTkEsTUFBTSxDQUFOQSxlQUFQLElBQU9BLENBQVA7QUE3Qm9DO0FBK0J4Q3pkLGdCQS9Cd0M7OztBQW9DcEMsZUFBYSxFQXBDdUIsQ0F3Q25DOzs7QUFFRCxvQ0FBT3lkLE1BQU0sQ0FBTkEsTUFBTSxDQUFOQSx1QkFBUCxVQUFPQSxDQUFQO0FBMUNvQztBQTRDeEM3YSxTQTVDd0M7QUE2Q3BDLFFBQUksS0FBSixFQUNJckM7QUFHSixXQUFPa2QsTUFBTSxDQUFOQSxNQUFNLENBQU5BLENBQVAsUUFBT0EsRUFBUDtBQWpEb0M7QUFtRHhDRSxtQkFuRHdDO0FBb0RwQ25lLE9BQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNIO0FBckR1QyxDQUE1Qzs7QUF3REEsU0FBZ0IrSyx5QkFBaEIsQ0FDSXRILE1BREosRUFFSXNFLE9BRkosRUFFSUE7OztBQUVBakgsZUFBYTtBQUNiMkMsUUFBTSxHQUFHcUgsa0JBQWtCLFNBQTNCckgsT0FBMkIsQ0FBM0JBO0FBQ0EsaUNBQVEsdUJBQU0sQ0FBTixLQUFNLENBQU4sRUFBUix5Q0FBUSxjQUFSLE1BQVEsR0FBeUIsa0JBQWpDLGdCQUFpQyxDQUFqQztBQUNIOztTQzFFZTJLLGUsQ0FBZ0JnUSxhLEVBQUFBO0FBQzVCLFNBQU9BLGFBQWEsQ0FBYkEsK0JBQTZDQSxhQUFhLENBQWJBLHVCQUFwRDtBQUNIOztBQUVELFNBQWdCeFAsbUJBQWhCLENBQ0l3UCxhQURKLEVBRUluSSxPQUZKLEVBRUlBO0FBRUEsTUFBTW9JLFlBQVksR0FBR0QsYUFBYSxDQUFiQSxrQkFBZ0NBLGFBQWEsQ0FBYkEsZ0JBQXJELEVBQXFCQSxDQUFyQjtBQUNBQyxjQUFZLENBQVpBO0FBQ0EsU0FBT2xkLElBQUksQ0FBQztBQUNSLFFBQU0rVSxHQUFHLEdBQUdtSSxZQUFZLENBQVpBLFFBQVosT0FBWUEsQ0FBWjtBQUNBLFFBQUluSSxHQUFHLEtBQUssQ0FBWixHQUFnQm1JLFlBQVksQ0FBWkE7QUFGcEIsR0FBVyxDQUFYO0FBSUg7O0FBRUQsU0FBZ0IvUCxlQUFoQixDQUNJOFAsYUFESixFQUVJL1AsTUFGSixFQUVJQTtBQUVBLE1BQU1xRCxLQUFLLEdBQUcvRSxjQUFkOztBQUNBLE1BQUk7QUFDQTtBQUNBLFFBQU0wUixZQUFZLGFBQVFELGFBQWEsQ0FBYkEsaUJBQTFCLEVBQWtCLENBQWxCOztBQUNBLFNBQUssSUFBSWhNLENBQUMsR0FBTCxHQUFXRCxDQUFDLEdBQUdrTSxZQUFZLENBQWhDLFFBQXlDak0sQ0FBQyxHQUExQyxHQUFnREEsQ0FBaEQsSUFBcUQ7QUFDakQvRCxZQUFNLEdBQUdnUSxZQUFZLENBQVpBLENBQVksQ0FBWkEsQ0FBVGhRLE1BQVNnUSxDQUFUaFE7QUFDQSxVQUFJQSxNQUFNLElBQUksQ0FBRUEsTUFBYyxDQUE5QixNQUFxQ3JPLEdBQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNyQyxVQUFJLENBQUosUUFBYTtBQUNoQjs7QUFDRDtBQVJKLFlBU1U7QUFDTm9OLGdCQUFZLENBQVpBLEtBQVksQ0FBWkE7QUFDSDtBQUNKOztTQ25DZXFCLFksQ0FBYTZQLFUsRUFBQUE7QUFDekIsU0FBT0EsVUFBVSxDQUFWQSxrQ0FBNkNBLFVBQVUsQ0FBVkEsMEJBQXBEO0FBQ0g7O0FBRUQsU0FBZ0JyUCxnQkFBaEIsQ0FBaUNxUCxVQUFqQyxFQUEwRHJJLE9BQTFELEVBQTBEQTtBQUN0RCxNQUFNWSxTQUFTLEdBQUd5SCxVQUFVLENBQVZBLHFCQUFnQ0EsVUFBVSxDQUFWQSxtQkFBbEQsRUFBa0JBLENBQWxCO0FBQ0F6SCxXQUFTLENBQVRBO0FBQ0EsU0FBTzFWLElBQUksQ0FBQztBQUNSLFFBQU0rVSxHQUFHLEdBQUdXLFNBQVMsQ0FBVEEsUUFBWixPQUFZQSxDQUFaO0FBQ0EsUUFBSVgsR0FBRyxLQUFLLENBQVosR0FBZ0JXLFNBQVMsQ0FBVEE7QUFGcEIsR0FBVyxDQUFYO0FBSUg7O0FBRUQsU0FBZ0JuSSxlQUFoQixDQUFtQzRQLFVBQW5DLEVBQTREalEsTUFBNUQsRUFBNERBO0FBQ3hELE1BQU1xRCxLQUFLLEdBQUcvRSxjQUFkO0FBQ0EsTUFBSWtLLFNBQVMsR0FBR3lILFVBQVUsQ0FBMUI7QUFDQSxNQUFJLENBQUosV0FBZ0I7QUFDaEJ6SCxXQUFTLEdBQUdBLFNBQVMsQ0FBckJBLEtBQVlBLEVBQVpBOztBQUNBLE9BQUssSUFBSXpFLENBQUMsR0FBTCxHQUFXRCxDQUFDLEdBQUcwRSxTQUFTLENBQTdCLFFBQXNDekUsQ0FBQyxHQUF2QyxHQUE2Q0EsQ0FBN0MsSUFBa0Q7QUFDOUN5RSxhQUFTLENBQVRBLENBQVMsQ0FBVEE7QUFDSDs7QUFDRHpKLGNBQVksQ0FBWkEsS0FBWSxDQUFaQTtBQUNIOztTQ0hlbVIsYyxDQUNaOWEsTSxFQUNBbVcsVyxFQUNBN1IsTyxFQUFBQTtBQUVBLE1BQU1JLEdBQUcsR0FBbUMyQyxrQkFBa0IsU0FBbEJBLE9BQWtCLENBQWxCQSxDQUE1QyxLQUE0Q0EsQ0FBNUM7QUFDQXRGLFlBQVU7O0FBQ1YsTUFBSTtBQUFBLHNCQUNBOzs7QUFDQSxxRUFBVyxHQUFLbkIsd0JBQXdCLENBRnhDLE1BRXdDLENBQXhDLENBRkE7O0FBS0FqQixXQUFPLENBQVBBLFdBQU8sQ0FBUEEsU0FBNkIsZUFBRztBQUFBLGFBQUkrRSxHQUFHLENBQUhBLFdBQWV5UixXQUFZLENBQS9CLEdBQStCLENBQTNCelIsQ0FBSjtBQUFoQy9FO0FBTEosWUFNVTtBQUNOc0MsWUFBUTtBQUNYOztBQUNEO0FBQ0g7O0FBRUQsU0FBZ0I4WSxrQkFBaEIsQ0FDSS9hLE1BREosRUFFSWdiLFNBRkosRUFHSTFXLE9BSEosRUFHSUE7QUFFQSxhQUFhLEVBRmJBLENBT0M7QUFHRDs7O0FBQ0EsTUFBSWxHLGFBQWEsQ0FBakIsTUFBaUIsQ0FBakIsRUFBMkI7QUFDdkIsV0FBT2dKLGdCQUFnQiw0QkFBdkIsT0FBdUIsQ0FBdkI7QUFDSDs7QUFFRCxNQUFNMUMsR0FBRyxHQUFtQzJDLGtCQUFrQixTQUFsQkEsT0FBa0IsQ0FBbEJBLENBQTVDLEtBQTRDQSxDQUE1QztBQUNBdEYsWUFBVTs7QUFDVixNQUFJO0FBQ0E7QUFDQSxRQUFJL0IsTUFBTSxDQUFWLHlCQUFVLENBQVYsRUFBdUM7QUFDbkNBLFlBQU0sQ0FBTkEseUJBQU0sQ0FBTkEsU0FBMEM7QUFBQSxlQUFnQjBFLEdBQUcsQ0FBSEEsV0FBaEIsS0FBZ0JBLENBQWhCO0FBRFAsT0FDbkMxRSxFQURtQzs7QUFHbkMscUJBQWU7QUFDWEwsZUFBTyxDQUFQQSxTQUFPLENBQVBBLFNBQTJCLGVBQUc7QUFDMUIsY0FBTVksVUFBVSxHQUFHeWEsU0FBUyxDQUE1QixHQUE0QixDQUE1Qjs7QUFDQSxjQUFJemEsVUFBVSxLQUFkLE1BQXlCO0FBQ3JCbUUsZUFBRyxDQUFIQTtBQUNIO0FBSkwvRTtBQU1IO0FBVkwsV0FXTztBQUFBOztBQUNILFVBQU1zYixVQUFVLHVIQUFoQixXQUFnQixDQUFoQjs7QUFDQSxVQUFNQyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxNQUFHO0FBQ1osWUFBSUQsVUFBVSxDQUFkLEdBQWMsQ0FBZCxFQUFxQjtBQUNyQkEsa0JBQVUsQ0FBVkEsR0FBVSxDQUFWQTtBQUNBdlcsV0FBRyxDQUFIQTtBQUdJLDRCQUFvQnZJLEdBQUcsSUFBSEEsWUFBbUI2ZSxTQUFTLENBQTVCN2UsR0FBNEIsQ0FBNUJBLEdBSHhCdUk7QUFISjs7QUFTQSxVQUFJeVcsT0FBTyxHQUFYOztBQUNBLGFBQU9BLE9BQU8sSUFBSUEsT0FBTyxLQUF6QixpQkFBK0M7QUFDM0N4YixlQUFPLENBQVBBLE9BQU8sQ0FBUEE7QUFDQXdiLGVBQU8sR0FBR3RlLE1BQU0sQ0FBTkEsZUFBVnNlLE9BQVV0ZSxDQUFWc2U7QUFDSDtBQUNKO0FBN0JMLFlBOEJVO0FBQ05sWixZQUFRO0FBQ1g7O0FBQ0Q7QUFDSDs7QUNqRUQsSUFBTW1aLE1BQU0sR0FBWjtBQUNPLElBQU1DLE1BQU0sR0FBWjtBQUNBLElBQU1DLGVBQWUsR0FBckIsTSxDQUFBOztBQWdEUCxJQUFNQyxVQUFVLEdBQUc7QUFDZjFWLEtBRGU7QUFFWCxRQUFNbkIsR0FBRyxHQUFrQzFFLE1BQU0sQ0FBakQsS0FBaUQsQ0FBakQ7QUFDQSxRQUFJZixJQUFJLEtBQVIsT0FBb0I7QUFDcEIsUUFBSUEsSUFBSSxLQUFSLFVBQXVCLE9BQU95RixHQUFHLENBQVYsZUFBT0EsRUFBUDs7QUFDdkIsUUFBSSw0QkFBNEIsQ0FBQzhXLEtBQUssQ0FBdEMsSUFBc0MsQ0FBdEMsRUFBcUQ7QUFDakQsYUFBTzlXLEdBQUcsQ0FBSEEsS0FBU21VLFFBQVEsQ0FBeEIsSUFBd0IsQ0FBakJuVSxDQUFQO0FBQ0g7O0FBQ0QsUUFBSTNFLE9BQU8sa0JBQVgsSUFBVyxDQUFYLEVBQW9DO0FBQ2hDLGFBQU8wYixlQUFlLENBQXRCLElBQXNCLENBQXRCO0FBQ0g7O0FBQ0QsV0FBT3piLE1BQU0sQ0FBYixJQUFhLENBQWI7QUFYVztBQWFmOEYsS0FiZTtBQWNYLFFBQU1wQixHQUFHLEdBQWtDMUUsTUFBTSxDQUFqRCxLQUFpRCxDQUFqRDs7QUFDQSxRQUFJZixJQUFJLEtBQVIsVUFBdUI7QUFDbkJ5RixTQUFHLENBQUhBO0FBQ0g7O0FBQ0QsUUFBSSw0QkFBNEI4VyxLQUFLLENBQXJDLElBQXFDLENBQXJDLEVBQTZDO0FBQ3pDeGIsWUFBTSxDQUFOQSxJQUFNLENBQU5BO0FBREosV0FFTztBQUNIO0FBQ0EwRSxTQUFHLENBQUhBLEtBQVNtVSxRQUFRLENBQWpCblUsSUFBaUIsQ0FBakJBO0FBQ0g7O0FBQ0Q7QUF4Qlc7QUEwQmZnVyxtQkExQmU7QUEyQlhuZSxPQUFHLENBQUhBLEVBQUcsQ0FBSEE7QUFDSDtBQTVCYyxDQUFuQjs7QUErQkEsSUFBYW1mLDZCQUFiO0FBR2lDO0FBUTdCO1FBQ0l6YyxlLEVBQUFBO0FBQUFBLGFBQU8sU0FBVSxTQUFWLEdBQTZDLGlCQUFwREE7OztTQUVPLE0sR0FBQSxNO1NBQ0EsVyxHQUFBLE07U0FiWDBjLEssR0FBQUEsTTtTQUNTQyxPLEdBQWlCLEU7U0FDMUIxUixhLEdBQUFBLE07U0FDQUMsZ0IsR0FBQUEsTTtTQUNBMFIsUyxHQUFBQSxNO1NBQ0F4UixRLEdBQUFBLE07U0FDQXlSLE0sR0FBQUEsTTtTQUNBQyxnQixHQUFtQixDO0FBS1I7QUFDQTtBQUVQLGlCQUFhLFNBQWIsSUFBYSxDQUFiOztBQUNBLHFCQUFpQjtBQUFBLGFBQ2J4VixRQUFRLGFBQWEsU0FBVXRILFNBQVYsR0FEUixxQkFDTCxDQURLO0FBQWpCO0FBRUg7O0FBcEJMOztBQUFBLHlCQXNCSStjO0FBQ0ksUUFBSSxrQkFBSixXQUFpQyxPQUFPLGNBQVAsS0FBTyxDQUFQO0FBQ2pDO0FBeEJSOztBQUFBLDBCQTJCSUM7QUFDSSxRQUFJLCtCQUErQnZELE1BQU0sQ0FBTkEsU0FBbkMsR0FDSSxPQUFPQSxNQUFNLENBQU5BLElBQVcsS0FBbEIsUUFBT0EsQ0FBUDtBQUNKO0FBOUJSOztBQUFBLHNCQWlDSXhOO0FBQ0ksV0FBT0MsbUJBQW1CLE9BQTFCLE9BQTBCLENBQTFCO0FBbENSOztBQUFBLG9CQXFDSUM7UUFFSStOLDBCLEVBQUFBO0FBQUFBLHdCQUFrQixLQUFsQkE7OztBQUVBLHlCQUFxQjtBQUNqQnhYLGNBQVEsQ0FBb0I7QUFDeEIwSixzQkFBYyxFQURVO0FBRXhCM00sY0FBTSxFQUFFLEtBRmdCO0FBR3hCNE0sdUJBQWUsRUFBRSxXQUhPO0FBSXhCUixZQUFJLEVBSm9CO0FBS3hCb1IsYUFBSyxFQUxtQjtBQU14QkMsYUFBSyxFQUFFLGFBTmlCLEtBTWpCLEVBTmlCO0FBT3hCQyxrQkFBVSxFQUFFLGFBUFk7QUFReEJDLGVBQU8sRUFSaUI7QUFTeEJDLG9CQUFZLEVBQUU7QUFUVSxPQUFwQixDQUFSM2E7QUFXSDs7QUFDRCxXQUFPNkosZ0JBQWdCLE9BQXZCLFFBQXVCLENBQXZCO0FBdERSOztBQUFBLDJCQXlESStRO0FBQ0k7QUFDQSxXQUFPLGFBQVA7QUEzRFI7O0FBQUEsMkJBOERJQztBQUNJLFFBQUksaUNBQWlDQyxTQUFTLEdBQTlDLEdBQW9EbGdCLEdBQUcsQ0FBQyxtQkFBSkEsU0FBRyxDQUFIQTtBQUNwRCxRQUFJbWdCLGFBQWEsR0FBRyxhQUFwQjtBQUNBLFFBQUlELFNBQVMsS0FBYiwyQkFDSyxJQUFJQSxTQUFTLEdBQWIsZUFBK0I7QUFDaEMsVUFBTUUsUUFBUSxHQUFHLFVBQVVGLFNBQVMsR0FBcEMsYUFBaUIsQ0FBakI7O0FBQ0EsV0FBSyxJQUFJOU4sQ0FBQyxHQUFWLEdBQWdCQSxDQUFDLEdBQUc4TixTQUFTLEdBQTdCLGVBQStDOU4sQ0FBL0M7QUFBb0RnTyxnQkFBUSxDQUFSQSxDQUFRLENBQVJBO0FBRnBCOzs7QUFHaEM7QUFIQyxXQUlFLGlDQUFpQ0QsYUFBYSxHQUE5QztBQXRFZjs7QUFBQSw4QkF5RUlFO0FBQ0ksUUFBSUMsU0FBUyxLQUFLLEtBQWxCLGtCQUF5Q3RnQixHQUFHLENBQUhBLEVBQUcsQ0FBSEE7QUFDekM7QUFDQSxRQUFJLG9CQUFvQnVnQixLQUFLLEdBQTdCLEdBQW1DQyxrQkFBa0IsQ0FBQ0YsU0FBUyxHQUFUQSxRQUFuQkUsQ0FBa0IsQ0FBbEJBO0FBNUUzQzs7QUFBQSw0QkErRUlDOzs7QUFDSXRTLHVDQUFtQyxDQUFDLEtBQXBDQSxLQUFtQyxDQUFuQ0E7QUFDQSxRQUFNdVMsTUFBTSxHQUFHLGFBQWY7QUFFQSxRQUFJZixLQUFLLEtBQVQsV0FBeUJBLEtBQUssR0FBOUIsQ0FBeUJBLENBQXpCLEtBQ0ssSUFBSUEsS0FBSyxHQUFULFFBQW9CQSxLQUFLLEdBQXpCLE1BQW9CQSxDQUFwQixLQUNBLElBQUlBLEtBQUssR0FBVCxHQUFlQSxLQUFLLEdBQUdnQixJQUFJLENBQUpBLE9BQVlELE1BQU0sR0FBMUJmLEtBQVFnQixDQUFSaEI7QUFFcEIsUUFBSXRELFNBQVMsQ0FBVEEsV0FBSixHQUE0QnVFLFdBQVcsR0FBR0YsTUFBTSxHQUFoRCxLQUE0QkUsQ0FBNUIsS0FDSyxJQUFJQSxXQUFXLEtBQVhBLGFBQTZCQSxXQUFXLEtBQTVDLE1BQXVEQSxXQUFXLEdBQWxFLENBQXVEQSxDQUF2RCxLQUNBQSxXQUFXLEdBQUdELElBQUksQ0FBSkEsT0FBWUEsSUFBSSxDQUFKQSxpQkFBc0JELE1BQU0sR0FBdERFLEtBQTBCRCxDQUFaQSxDQUFkQztBQUVMLFFBQUlSLFFBQVEsS0FBWixXQUE0QkEsUUFBUSxHQUFSQTs7QUFFNUIsUUFBSWhTLGVBQWUsQ0FBbkIsSUFBbUIsQ0FBbkIsRUFBMkI7QUFDdkIsVUFBTUMsTUFBTSxHQUFHQyxlQUFlLE9BQXFDO0FBQy9Ebk0sY0FBTSxFQUFFLEtBRHVEO0FBRS9Eb00sWUFBSSxFQUYyRDtBQUcvRG9SLGFBQUssRUFIMEQ7QUFJL0RJLG9CQUFZLEVBSm1EO0FBSy9ESCxhQUFLLEVBQUVRO0FBTHdELE9BQXJDLENBQTlCO0FBT0EsVUFBSSxDQUFKLFFBQWE7QUFDYlEsaUJBQVcsR0FBR3ZTLE1BQU0sQ0FBcEJ1UztBQUNBUixjQUFRLEdBQUcvUixNQUFNLENBQWpCK1I7QUFDSDs7QUFFREEsWUFBUSxHQUNKQSxRQUFRLENBQVJBLDBCQUFtQyxRQUFRLENBQVIsSUFBYSxhQUFDO0FBQUEsYUFBSSxLQUFJLENBQUosYUFBSixTQUFJLENBQUo7QUFEckRBLEtBQ3VDLENBRHZDQTs7QUFFQSxRQUFJLHFDQUFKLGNBQWlDO0FBQzdCLFVBQU1TLFdBQVcsR0FBR1QsUUFBUSxDQUFSQSxTQUFwQjtBQUNBLHNDQUY2QixXQUU3QixFQUY2QjtBQUdoQzs7QUFDRCxRQUFNeGMsR0FBRyxHQUFHLGdEQUFaLFFBQVksQ0FBWjtBQUVBLFFBQUlnZCxXQUFXLEtBQVhBLEtBQXFCUixRQUFRLENBQVJBLFdBQXpCLEdBQ0k7QUFDSixXQUFPLG9CQUFQLEdBQU8sQ0FBUDtBQXBIUjs7QUFBQSxrQ0F1SElVO0FBQ0ksUUFBSVYsUUFBUSxDQUFSQSxTQUFKLGlCQUF1QztBQUFBOztBQUNuQyxhQUFPLHVGQUFQLFFBQU8sRUFBUDtBQURKLFdBRU87QUFDSCxVQUFNeGMsR0FBRyxHQUFHLDBCQUEwQitiLEtBQUssR0FBM0MsV0FBWSxDQUFaO0FBQ0EsVUFBSW9CLFFBQVEsR0FBRyxtQkFBbUJwQixLQUFLLEdBQXZDLFdBQWUsQ0FBZjtBQUNBLDRCQUFzQkEsS0FBSyxHQUFHUyxRQUFRLENBQWhCVCxTQUF0Qjs7QUFDQSxXQUFLLElBQUl2TixDQUFDLEdBQVYsR0FBZ0JBLENBQUMsR0FBR2dPLFFBQVEsQ0FBNUIsUUFBcUNoTyxDQUFyQztBQUEwQyxxQkFBYXVOLEtBQUssR0FBbEIsS0FBMEJTLFFBQVEsQ0FBbEMsQ0FBa0MsQ0FBbEM7QUFBMUM7O0FBQ0EsV0FBSyxJQUFJaE8sRUFBQyxHQUFWLEdBQWdCQSxFQUFDLEdBQUcyTyxRQUFRLENBQTVCLFFBQXFDM08sRUFBckM7QUFDSSxxQkFBYXVOLEtBQUssR0FBR1MsUUFBUSxDQUFoQlQsU0FBYixNQUE0Q29CLFFBQVEsQ0FBcEQsRUFBb0QsQ0FBcEQ7QUFESjs7QUFFQTtBQUNIO0FBbElUOztBQUFBLG1DQXFJSUM7QUFDSSxRQUFNdlQsU0FBUyxHQUFHLENBQUMsS0FBRCxVQUFnQk8sWUFBbEM7QUFDQSxRQUFNdUgsTUFBTSxHQUFHOUcsWUFBWSxDQUEzQixJQUEyQixDQUEzQjtBQUNBLFFBQU1KLE1BQU0sR0FDUixNQUFNLElBQU4sWUFDTztBQUNHUyxvQkFBYyxFQURqQjtBQUVHM00sWUFBTSxFQUFFLEtBRlg7QUFHR29NLFVBQUksRUFIUDtBQUlHUSxxQkFBZSxFQUFFLFdBSnBCO0FBS0c0USxXQUFLLEVBTFI7QUFNR3JZLGNBQVEsRUFOWDtBQU9HRSxjQUFRLEVBQVJBO0FBUEgsS0FEUCxHQURKLEtBSEp3WixDQUdJO0FBY0E7O0FBQ0EsUUFBSSxLQUFKLEVBQTBCbEs7QUFDMUI7QUFDQSxnQkFBWXBJLGVBQWUsT0FBZkEsTUFBZSxDQUFmQTtBQUNaLFFBQUksS0FBSixFQUEwQlQsRUFBWTtBQTFKOUM7O0FBQUEsOEJBNkpJZ1Q7QUFDSSxRQUFNeFQsU0FBUyxHQUFHLENBQUMsS0FBRCxVQUFnQk8sWUFBbEM7QUFDQSxRQUFNdUgsTUFBTSxHQUFHOUcsWUFBWSxDQUEzQixJQUEyQixDQUEzQjtBQUNBLFFBQU1KLE1BQU0sR0FDUixNQUFNLElBQU4sWUFDTztBQUNHUyxvQkFBYyxFQURqQjtBQUVHM00sWUFBTSxFQUFFLEtBRlg7QUFHRzRNLHFCQUFlLEVBQUUsV0FIcEI7QUFJR1IsVUFBSSxFQUpQO0FBS0dvUixXQUFLLEVBTFI7QUFNR0csYUFBTyxFQU5WO0FBT0dGLFdBQUssRUFQUjtBQVFHRyxrQkFBWSxFQUFFRCxPQUFPLENBUnhCO0FBU0dELGdCQUFVLEVBQUVELEtBQUssQ0FBQ2M7QUFUckIsS0FEUCxHQURKO0FBZUEsUUFBSSxLQUFKLEVBQTBCNUo7QUFDMUIsK0JBbkJKbUssQ0FtQkk7O0FBRUEsZ0JBQVl2UyxlQUFlLE9BQWZBLE1BQWUsQ0FBZkE7QUFDWixRQUFJLEtBQUosRUFBMEJULEVBQVk7QUFuTDlDOztBQUFBLGdCQXNMSWlUO0FBQ0ksUUFBSXZCLEtBQUssR0FBRyxhQUFaLFFBQWlDO0FBQzdCO0FBQ0EsYUFBTyxtQkFBbUIsYUFBMUIsS0FBMEIsQ0FBbkIsQ0FBUDtBQUNIOztBQUNEL04sV0FBTyxDQUFQQSxLQUNJLDZHQUV1RixhQUZ2RixTQURKQTtBQTNMUjs7QUFBQSxnQkFrTUl1UDtBQUNJLFFBQU1oRixNQUFNLEdBQUcsS0FBZjs7QUFDQSxRQUFJd0QsS0FBSyxHQUFHeEQsTUFBTSxDQUFsQixRQUEyQjtBQUN2QjtBQUNBaE8seUNBQW1DLENBQUMsS0FBcENBLEtBQW1DLENBQW5DQTtBQUNBLFVBQU0zRyxRQUFRLEdBQUcyVSxNQUFNLENBQXZCLEtBQXVCLENBQXZCOztBQUNBLFVBQUkvTixlQUFlLENBQW5CLElBQW1CLENBQW5CLEVBQTJCO0FBQ3ZCLFlBQU1DLE1BQU0sR0FBR0MsZUFBZSxPQUFxQztBQUMvREMsY0FBSSxFQUQyRDtBQUUvRHBNLGdCQUFNLEVBQUUsS0FGdUQ7QUFHL0R3ZCxlQUFLLEVBSDBEO0FBSS9Eclksa0JBQVEsRUFBUkE7QUFKK0QsU0FBckMsQ0FBOUI7QUFNQSxZQUFJLENBQUosUUFBYTtBQUNiQSxnQkFBUSxHQUFHK0csTUFBTSxDQUFqQi9HO0FBQ0g7O0FBQ0RBLGNBQVEsR0FBRyx5QkFBWEEsUUFBVyxDQUFYQTtBQUNBLFVBQU00SixPQUFPLEdBQUc1SixRQUFRLEtBQXhCOztBQUNBLG1CQUFhO0FBQ1Q2VSxjQUFNLENBQU5BLEtBQU0sQ0FBTkE7QUFDQTtBQUNIO0FBbkJMLFdBb0JPLElBQUl3RCxLQUFLLEtBQUt4RCxNQUFNLENBQXBCLFFBQTZCO0FBQ2hDO0FBQ0Esc0NBQWdDLENBQWhDLFFBQWdDLENBQWhDO0FBRkcsV0FHQTtBQUNIO0FBQ0FuYyxTQUFHLFlBQVltYyxNQUFNLENBQXJCbmMsTUFBRyxDQUFIQTtBQUNIO0FBOU5UOztBQUFBO0FBQUE7O0FBa09BLFNBQWdCb2hCLHFCQUFoQixDQUNJQyxhQURKLEVBRUlyWCxRQUZKLEVBR0l0SCxJQUhKLEVBSUk0ZSxLQUpKLEVBSUlBO01BREE1ZSxlLEVBQUFBO0FBQUFBLFdBQU8sU0FBVSxTQUFWLEdBQTZDLGlCQUFwREE7OztNQUNBNGUsZ0IsRUFBQUE7QUFBQUEsWUFBUSxLQUFSQTs7O0FBRUF4Z0IsZUFBYTtBQUNiLE1BQU1xSCxHQUFHLEdBQUcseURBQVosS0FBWSxDQUFaO0FBQ0EzRixvQkFBa0IsQ0FBQzJGLEdBQUcsQ0FBSixnQkFBbEIzRixHQUFrQixDQUFsQkE7QUFDQSxNQUFNb0gsS0FBSyxHQUFHLFVBQVV6QixHQUFHLENBQWIsU0FBZCxVQUFjLENBQWQ7QUFDQUEsS0FBRyxDQUFIQTs7QUFDQSxNQUFJa1osYUFBYSxJQUFJQSxhQUFhLENBQWxDLFFBQTJDO0FBQ3ZDLFFBQU0vVCxJQUFJLEdBQUdWLHNCQUFzQixDQUFuQyxJQUFtQyxDQUFuQztBQUNBekUsT0FBRyxDQUFIQTtBQUNBK0Usd0JBQW9CLENBQXBCQSxJQUFvQixDQUFwQkE7QUFDSDs7QUFDRDtBQUNILEMsQ0FBQTs7O0FBR00sSUFBSWdTLGVBQWUsR0FBRztBQUN6QnFDLE9BRHlCO0FBRXJCLFdBQU8sWUFBUCxDQUFPLENBQVA7QUFGcUI7QUFLekJDLFNBTHlCO0FBTXJCLFFBQU1yWixHQUFHLEdBQWtDLEtBQTNDLEtBQTJDLENBQTNDO0FBQ0EsV0FBT0EsR0FBRyxDQUFIQSxvQkFBd0JBLEdBQUcsQ0FBSEEsUUFBeEJBLFFBQVAsUUFBT0EsQ0FBUDtBQVBxQjtBQVV6QjtBQUNBZ0gsUUFYeUI7QUFZckIsV0FBTyxLQUFQLEtBQU8sRUFBUDtBQVpxQjs7QUFlekI7Ozs7OztBQU1Bc1MsUUFyQnlCO3NDQXFCc0JyQiw2QyxFQUFBQSxRLEVBQUFBLFcsRUFBQUEsTSxFQUFBQTtBQUFBQTs7O0FBQzNDLFFBQU1qWSxHQUFHLEdBQWtDLEtBQTNDLEtBQTJDLENBQTNDOztBQUNBLFlBQVFrVSxTQUFTLENBQWpCO0FBQ0k7QUFDSTs7QUFDSjtBQUNJLGVBQU9sVSxHQUFHLENBQUhBLGlCQUFQLEtBQU9BLENBQVA7O0FBQ0o7QUFDSSxlQUFPQSxHQUFHLENBQUhBLHdCQUFQLFdBQU9BLENBQVA7QUFOUjs7QUFRQSxXQUFPQSxHQUFHLENBQUhBLHFDQUFQLFFBQU9BLENBQVA7QUEvQnFCO0FBa0N6QnVaLGlCQWxDeUI7QUFtQ3JCLFdBQVEsaURBQVIsUUFBUSxDQUFSO0FBbkNxQjtBQTBDekJDLE1BMUN5QjtBQTJDckIsUUFBTXhaLEdBQUcsR0FBa0MsS0FBM0MsS0FBMkMsQ0FBM0M7O3VDQURJeVosd0IsRUFBQUEsUyxFQUFBQSxhLEVBQUFBLE8sRUFBQUE7QUFBQUE7OztBQUVKelosT0FBRyxDQUFIQSxpQkFBcUJBLEdBQUcsQ0FBSEEsUUFBckJBO0FBQ0EsV0FBT0EsR0FBRyxDQUFIQSxRQUFQO0FBN0NxQjtBQWdEekIwWixLQWhEeUI7QUFpRHJCLFdBQU8sWUFBWWxCLElBQUksQ0FBSkEsSUFBUyw2QkFBVEEsR0FBWixDQUFZQSxDQUFaLEtBQVAsQ0FBTyxDQUFQO0FBakRxQjtBQW9EekJtQixPQXBEeUI7QUFxRHJCLFdBQU8sa0JBQVAsQ0FBTyxDQUFQO0FBckRxQjtBQXdEekJDLFNBeER5QjtBQXlEckIsUUFBTTVaLEdBQUcsR0FBa0MsS0FBM0MsS0FBMkMsQ0FBM0M7O3VDQURPeVosd0IsRUFBQUEsUyxFQUFBQSxhLEVBQUFBLE8sRUFBQUE7QUFBQUE7OztBQUVQelosT0FBRyxDQUFIQTtBQUNBLFdBQU9BLEdBQUcsQ0FBSEEsUUFBUDtBQTNEcUI7QUE4RHpCNlosU0E5RHlCO0FBK0RyQjtBQUNBO0FBQ0EsUUFBSTlnQixXQUFXLENBQWYsb0JBQW9DO0FBQ2hDbEIsU0FBRyxLQUFIQSxTQUFHLENBQUhBO0FBQ0g7O0FBQ0QsaUJBQWEsYUFBYixPQUFhLEVBQWI7QUFDQTtBQXJFcUI7QUF3RXpCaWlCLE1BeEV5QjtBQXlFckI7QUFDQTtBQUNBLFFBQUkvZ0IsV0FBVyxDQUFmLG9CQUFvQztBQUNoQ2xCLFNBQUcsS0FBSEEsTUFBRyxDQUFIQTtBQUNIOztBQUNELFFBQU1raUIsSUFBSSxHQUFHLEtBQWIsS0FBYSxFQUFiO0FBQ0FBLFFBQUksQ0FBSkE7QUFDQTtBQUNBO0FBakZxQjtBQW9GekIzRixRQXBGeUI7QUFxRnJCLFFBQU1wVSxHQUFHLEdBQWtDLEtBQTNDLEtBQTJDLENBQTNDO0FBQ0EsUUFBTStOLEdBQUcsR0FBRy9OLEdBQUcsQ0FBSEEsZUFBbUJBLEdBQUcsQ0FBdEJBLGlCQUFaLEtBQVlBLENBQVo7O0FBQ0EsUUFBSStOLEdBQUcsR0FBRyxDQUFWLEdBQWM7QUFDVjtBQUNBO0FBQ0g7O0FBQ0Q7QUFDSDtBQTVGd0IsQ0FBdEI7QUErRlA7Ozs7OztBQUtBaU0saUJBQWlCLFdBQWpCQSxVQUFpQixDQUFqQkE7QUFDQUEsaUJBQWlCLFNBQWpCQSxVQUFpQixDQUFqQkE7QUFDQUEsaUJBQWlCLGFBQWpCQSxVQUFpQixDQUFqQkE7QUFDQUEsaUJBQWlCLFlBQWpCQSxVQUFpQixDQUFqQkE7QUFDQUEsaUJBQWlCLFNBQWpCQSxVQUFpQixDQUFqQkE7QUFDQUEsaUJBQWlCLGdCQUFqQkEsVUFBaUIsQ0FBakJBO0FBQ0FBLGlCQUFpQixVQUFqQkEsVUFBaUIsQ0FBakJBO0FBQ0FBLGlCQUFpQixhQUFqQkEsVUFBaUIsQ0FBakJBO0FBQ0FBLGlCQUFpQixtQkFBakJBLFVBQWlCLENBQWpCQSxDLENBQUFBOztBQUVBQSxpQkFBaUIsVUFBakJBLFdBQWlCLENBQWpCQTtBQUNBQSxpQkFBaUIsV0FBakJBLFdBQWlCLENBQWpCQTtBQUNBQSxpQkFBaUIsU0FBakJBLFdBQWlCLENBQWpCQTtBQUNBQSxpQkFBaUIsY0FBakJBLFdBQWlCLENBQWpCQTtBQUNBQSxpQkFBaUIsWUFBakJBLFdBQWlCLENBQWpCQTtBQUNBQSxpQkFBaUIsWUFBakJBLFdBQWlCLENBQWpCQTtBQUNBQSxpQkFBaUIsUUFBakJBLFdBQWlCLENBQWpCQTtBQUNBQSxpQkFBaUIsU0FBakJBLFdBQWlCLENBQWpCQSxDLENBQUFBOztBQUVBQSxpQkFBaUIsV0FBakJBLGNBQWlCLENBQWpCQTtBQUNBQSxpQkFBaUIsZ0JBQWpCQSxjQUFpQixDQUFqQkE7O0FBRUE7QUFDSSxNQUFJLE9BQU9yYixLQUFLLENBQUxBLFVBQVAsUUFBT0EsQ0FBUCxLQUFKLFlBQXFEO0FBQ2pEb1ksbUJBQWUsQ0FBZkEsUUFBZSxDQUFmQSxHQUE0QmtELFdBQVcsQ0FBdkNsRCxRQUF1QyxDQUF2Q0E7QUFDSDtBQUNKLEMsQ0FBQTs7O0FBR0Q7QUFDSSxTQUFPO0FBQ0gsUUFBTS9XLEdBQUcsR0FBa0MsS0FBM0MsS0FBMkMsQ0FBM0M7QUFDQUEsT0FBRyxDQUFIQTtBQUNBLFFBQU1rYSxjQUFjLEdBQUdsYSxHQUFHLENBQUhBLGVBQW1CQSxHQUFHLENBQTdDLE9BQXVCQSxDQUF2QjtBQUNBLFdBQU9rYSxjQUFjLENBQWRBLFFBQWMsQ0FBZEEsdUJBQVAsU0FBT0EsQ0FBUDtBQUpKO0FBTUgsQyxDQUFBOzs7QUFHRDtBQUNJLFNBQU87OztBQUNILFFBQU1sYSxHQUFHLEdBQWtDLEtBQTNDLEtBQTJDLENBQTNDO0FBQ0FBLE9BQUcsQ0FBSEE7QUFDQSxRQUFNa2EsY0FBYyxHQUFHbGEsR0FBRyxDQUFIQSxlQUFtQkEsR0FBRyxDQUE3QyxPQUF1QkEsQ0FBdkI7QUFDQSxXQUFPLGNBQWMsQ0FBZCxRQUFjLENBQWQsQ0FBeUI7QUFDNUIsYUFBT21hLFFBQVEsQ0FBUkEsOEJBQVAsTUFBT0EsQ0FBUDtBQURKLEtBQU8sQ0FBUDtBQUpKO0FBUUgsQyxDQUFBOzs7QUFHRDtBQUNJLFNBQU87OztBQUNILFFBQU1uYSxHQUFHLEdBQWtDLEtBQTNDLEtBQTJDLENBQTNDO0FBQ0FBLE9BQUcsQ0FBSEE7QUFDQSxRQUFNa2EsY0FBYyxHQUFHbGEsR0FBRyxDQUFIQSxlQUFtQkEsR0FBRyxDQUE3QyxPQUF1QkEsQ0FBdkIsQ0FIRyxDQUdIOztBQUVBLFFBQU1tYSxRQUFRLEdBQUdqRyxTQUFTLENBQTFCLENBQTBCLENBQTFCOztBQUNBQSxhQUFTLENBQVRBLENBQVMsQ0FBVEEsR0FBZTtBQUNYLGFBQU9pRyxRQUFRLG1DQUFmLE1BQWUsQ0FBZjtBQURKakc7O0FBR0EsV0FBT2dHLGNBQWMsQ0FBZEEsUUFBYyxDQUFkQSx1QkFBUCxTQUFPQSxDQUFQO0FBVEo7QUFXSDs7QUFFRCxJQUFNRSwrQkFBK0IsZ0JBQUc5Zix5QkFBeUIsa0NBQWpFLDZCQUFpRSxDQUFqRTs7QUFLQSxTQUFnQndFLGlCQUFoQixDQUFrQ25FLEtBQWxDLEVBQWtDQTtBQUM5QixTQUFPbEIsUUFBUSxDQUFSQSxLQUFRLENBQVJBLElBQW1CMmdCLCtCQUErQixDQUFDemYsS0FBSyxDQUEvRCxLQUErRCxDQUFOLENBQXpEO0FBQ0g7Ozs7QUMxY0QsSUFBTTBmLG1CQUFtQixHQUF6QjtBQUVPLElBQU1DLEdBQUcsR0FBVDtBQUNBLElBQU1DLE1BQU0sR0FBWixTLENBQUE7QUFRUDs7bUJBd05LNWUsTUFBTSxDQUFDNmUsUTtzQkE4SEg3ZSxNQUFNLENBQUM4ZSxXOztBQXJWaEIsSUFBYUMsYUFBYjtBQUk4QztBQU0xQztRQUVXdkQsb0IsRUFBQUE7QUFBQUEsa0JBQTBCNVksWUFBMUI0WTs7O1FBQ0E5YSxnQixFQUFBQTtBQUFBQSxjQUFRLFNBQVUsU0FBVixHQUEyQyxlQUFuREE7OztTQURBOGEsUyxHQUFBQSxNO1NBQ0E5YSxLLEdBQUFBLE07U0FYVkYsSyxJQUFTa2UsbUI7U0FDVk0sSyxHQUFBQSxNO1NBQ0FDLE8sR0FBQUEsTTtTQUNBQyxTLEdBQUFBLE07U0FDQXJWLGEsR0FBQUEsTTtTQUNBQyxnQixHQUFBQSxNO1NBQ0FFLFEsR0FBQUEsTTtBQUlXd1I7QUFDQTlhOztBQUVQLFFBQUksQ0FBQ2pELFVBQVUsQ0FBZixHQUFlLENBQWYsRUFBc0I7QUFDbEJ2QixTQUFHLENBQUhBLEVBQUcsQ0FBSEE7QUFDSDs7QUFDRCxxQkFBaUI2RixVQUFVLENBQUMsU0FBYSxTQUFiLEdBQTVCLHNCQUEyQixDQUEzQjtBQUNBLGlCQUFhLElBQWIsR0FBYSxFQUFiO0FBQ0EsbUJBQWUsSUFBZixHQUFlLEVBQWY7QUFDQTtBQUNIOztBQXRCTDs7QUFBQSxnQkF3QllvZDtBQUNKLFdBQU8sZUFBUCxHQUFPLENBQVA7QUF6QlI7O0FBQUEsZUE0Qkl6Rzs7O0FBQ0ksUUFBSSxDQUFDdGIsV0FBVyxDQUFoQixvQkFBcUMsT0FBTyxVQUFQLEdBQU8sQ0FBUDtBQUVyQyxRQUFJZ2lCLEtBQUssR0FBRyxpQkFBWixHQUFZLENBQVo7O0FBQ0EsUUFBSSxDQUFKLE9BQVk7QUFDUixVQUFNQyxRQUFRLEdBQUlELEtBQUssR0FBRyxvQkFDdEIsVUFEc0IsR0FDdEIsQ0FEc0IscUJBR3RCLFNBQWEsU0FBYixHQUhzQixzQkFBMUIsS0FBMEIsQ0FBMUI7QUFNQTtBQUNBaGQsd0JBQWtCLFdBQVc7QUFBQSxlQUFNLEtBQUksQ0FBSixrQkFBTixHQUFNLENBQU47QUFBN0JBLE9BQWtCLENBQWxCQTtBQUNIOztBQUVELFdBQU9nZCxLQUFLLENBQVosR0FBT0EsRUFBUDtBQTNDUjs7QUFBQSxlQThDSTNaO0FBQ0ksUUFBTTZaLE1BQU0sR0FBRyxVQUFmLEdBQWUsQ0FBZjs7QUFDQSxRQUFJaFYsZUFBZSxDQUFuQixJQUFtQixDQUFuQixFQUEyQjtBQUN2QixVQUFNQyxNQUFNLEdBQUdDLGVBQWUsT0FBNkI7QUFDdkRDLFlBQUksRUFBRTZVLE1BQU0sWUFEMkM7QUFFdkRqaEIsY0FBTSxFQUZpRDtBQUd2RG1GLGdCQUFRLEVBSCtDO0FBSXZENUUsWUFBSSxFQUFFOUM7QUFKaUQsT0FBN0IsQ0FBOUI7QUFNQSxVQUFJLENBQUosUUFBYTtBQUNiOEIsV0FBSyxHQUFHMk0sTUFBTSxDQUFkM007QUFDSDs7QUFDRCxnQkFBWTtBQUNSO0FBREosV0FFTztBQUNIO0FBQ0g7O0FBQ0Q7QUEvRFI7O0FBQUEscUJBa0VJOzs7QUFDSXlNLHVDQUFtQyxDQUFDLEtBQXBDQSxTQUFtQyxDQUFuQ0E7O0FBQ0EsUUFBSUMsZUFBZSxDQUFuQixJQUFtQixDQUFuQixFQUEyQjtBQUN2QixVQUFNQyxNQUFNLEdBQUdDLGVBQWUsT0FBNkI7QUFDdkRDLFlBQUksRUFEbUQ7QUFFdkRwTSxjQUFNLEVBRmlEO0FBR3ZETyxZQUFJLEVBQUU5QztBQUhpRCxPQUE3QixDQUE5QjtBQUtBLFVBQUksQ0FBSixRQUFhO0FBQ2hCOztBQUNELFFBQUksVUFBSixHQUFJLENBQUosRUFBb0I7QUFDaEIsVUFBTTZOLFNBQVMsR0FBR08sWUFBbEI7QUFDQSxVQUFNdUgsTUFBTSxHQUFHOUcsWUFBWSxDQUEzQixJQUEyQixDQUEzQjs7QUFDQSxVQUFNSixPQUFNLEdBQ1IsTUFBTSxJQUFOLFlBQ007QUFDSVMsc0JBQWMsRUFEbEI7QUFFSUMsdUJBQWUsRUFBRSxLQUZyQjtBQUdJUixZQUFJLEVBSFI7QUFJSXBNLGNBQU0sRUFKVjtBQUtJcUYsZ0JBQVEsRUFBUSxvQkFMcEI7QUFNSTlFLFlBQUksRUFBRTlDO0FBTlYsT0FETixHQURKOztBQVlBLFVBQUksS0FBSixFQUEwQmtYO0FBQzFCc0csaUJBQVcsQ0FBQztBQUNSLGNBQUksQ0FBSjs7QUFDQSxjQUFJLENBQUo7O0FBQ0EsWUFBTTdTLFVBQVUsR0FBRyxNQUFJLENBQUosVUFBbkIsR0FBbUIsQ0FBbkI7O0FBQ0FBLGtCQUFVLENBQVZBOztBQUNBLGNBQUksQ0FBSjtBQUxKNlMsT0FBVyxDQUFYQTtBQU9BLGtCQUFZMU8sZUFBZSxPQUFmQSxPQUFlLENBQWZBO0FBQ1osVUFBSSxLQUFKLEVBQTBCVCxFQUFZO0FBQ3RDO0FBQ0g7O0FBQ0Q7QUF2R1I7O0FBQUEsOEJBMEdZb1Y7QUFDSixRQUFJSCxLQUFLLEdBQUcsaUJBQVosR0FBWSxDQUFaOztBQUNBLGVBQVc7QUFDUEEsV0FBSyxDQUFMQTtBQUNIO0FBOUdUOztBQUFBLHdCQWlIWUk7QUFDSixRQUFNL1ksVUFBVSxHQUFHLGVBQW5CLEdBQW1CLENBQW5CO0FBQ0FqRCxZQUFRLEdBQUlpRCxVQUFrQixDQUFsQkEsaUJBQVpqRCxRQUFZaUQsQ0FBWmpEOztBQUNBLFFBQUlBLFFBQVEsS0FBS3BHLFdBQVcsQ0FBNUIsV0FBd0M7QUFDcEMsVUFBTXVNLFNBQVMsR0FBR08sWUFBbEI7QUFDQSxVQUFNdUgsTUFBTSxHQUFHOUcsWUFBWSxDQUEzQixJQUEyQixDQUEzQjtBQUNBLFVBQU1KLE1BQU0sR0FDUixNQUFNLElBQU4sWUFDTTtBQUNJUyxzQkFBYyxFQURsQjtBQUVJQyx1QkFBZSxFQUFFLEtBRnJCO0FBR0lSLFlBQUksRUFIUjtBQUlJcE0sY0FBTSxFQUpWO0FBS0lxRixnQkFBUSxFQUFHK0MsVUFBa0IsQ0FMakM7QUFNSTdILFlBQUksRUFOUjtBQU9JNEUsZ0JBQVEsRUFBUkE7QUFQSixPQUROLEdBREo7QUFZQSxVQUFJLEtBQUosRUFBMEJ3UDtBQUMxQnZNLGdCQUFVLENBQVZBO0FBQ0Esa0JBQVltRSxlQUFlLE9BQWZBLE1BQWUsQ0FBZkE7QUFDWixVQUFJLEtBQUosRUFBMEJULEVBQVk7QUFDekM7QUF2SVQ7O0FBQUEscUJBMElZc1Y7OztBQUNKcFYsdUNBQW1DLENBQUMsS0FBcENBLFNBQW1DLENBQW5DQTtBQUNBaVAsZUFBVyxDQUFDO0FBQ1IsVUFBTTdTLFVBQVUsR0FBRyw4QkFFZixNQUFJLENBRlcsV0FHZixTQUFhLFNBQWIsR0FIZSxxQkFBbkIsS0FBbUIsQ0FBbkI7O0FBTUEsWUFBSSxDQUFKOztBQUNBakQsY0FBUSxHQUFJaUQsVUFBa0IsQ0FBOUJqRCxPQVJRLENBUVJBOztBQUNBLFlBQUksQ0FBSjs7QUFDQSxZQUFJLENBQUo7QUFWSjhWLEtBQVcsQ0FBWEE7QUFZQSxRQUFNM1AsU0FBUyxHQUFHTyxZQUFsQjtBQUNBLFFBQU11SCxNQUFNLEdBQUc5RyxZQUFZLENBQTNCLElBQTJCLENBQTNCO0FBQ0EsUUFBTUosTUFBTSxHQUNSLE1BQU0sSUFBTixZQUNNO0FBQ0lTLG9CQUFjLEVBRGxCO0FBRUlDLHFCQUFlLEVBQUUsS0FGckI7QUFHSVIsVUFBSSxFQUhSO0FBSUlwTSxZQUFNLEVBSlY7QUFLSU8sVUFBSSxFQUxSO0FBTUk0RSxjQUFRLEVBQVJBO0FBTkosS0FETixHQURKO0FBV0EsUUFBSSxLQUFKLEVBQTBCd1A7QUFDMUIsZ0JBQVlwSSxlQUFlLE9BQWZBLE1BQWUsQ0FBZkE7QUFDWixRQUFJLEtBQUosRUFBMEJULEVBQVk7QUF2SzlDOztBQUFBLGVBMEtJM0U7QUFDSSxRQUFJLFNBQUosR0FBSSxDQUFKLEVBQW1CLE9BQU8sbUJBQW1CLG9CQUExQixHQUEwQixFQUFuQixDQUFQO0FBQ25CLFdBQU8sbUJBQVAsU0FBTyxDQUFQO0FBNUtSOztBQUFBLHlCQStLWW1XO0FBQ0osUUFBSSxrQkFBSixXQUFpQztBQUM3QixhQUFPLGNBQVAsS0FBTyxDQUFQO0FBQ0g7O0FBQ0Q7QUFuTFI7O0FBQUEsZ0JBc0xJdmM7QUFDSTtBQUNBLFdBQU8sV0FBUCxJQUFPLEVBQVA7QUF4TFI7O0FBQUEsa0JBMkxJaVo7QUFDSSxRQUFNcUgsSUFBSSxHQUFWO0FBQ0EsUUFBTXRnQixJQUFJLEdBQUcsS0FBYixJQUFhLEVBQWI7QUFDQSxXQUFPdWdCLFlBQVksQ0FBQztBQUNoQnhJLFVBRGdCO3lCQUVZL1gsSUFBSSxDQUFKQSxNO1lBQWhCd2dCLHNCO1lBQU1oaUIsd0I7O0FBQ2QsZUFBTztBQUNIZ2lCLGNBQUksRUFERDtBQUVIaGlCLGVBQUssRUFBRWdpQixJQUFJLGVBQXdCRixJQUFJLENBQUpBO0FBRmhDLFNBQVA7QUFJSDtBQVBlLEtBQUQsQ0FBbkI7QUE5TFI7O0FBQUEsbUJBeU1JcEg7QUFDSSxRQUFNb0gsSUFBSSxHQUFWO0FBQ0EsUUFBTXRnQixJQUFJLEdBQUcsS0FBYixJQUFhLEVBQWI7QUFDQSxXQUFPdWdCLFlBQVksQ0FBQztBQUNoQnhJLFVBRGdCOzBCQUVZL1gsSUFBSSxDQUFKQSxNO1lBQWhCd2dCLHVCO1lBQU1oaUIseUI7O0FBQ2QsZUFBTztBQUNIZ2lCLGNBQUksRUFERDtBQUVIaGlCLGVBQUssRUFBRWdpQixJQUFJLGVBQXlCLFFBQVFGLElBQUksQ0FBSkEsSUFBUixLQUFRQSxDQUFSO0FBRmpDLFNBQVA7QUFJSDtBQVBlLEtBQUQsQ0FBbkI7QUE1TVI7O0FBQUEsNkJBdU5JO0FBQ0ksV0FBTyxLQUFQLE9BQU8sRUFBUDtBQXhOUjs7QUFBQSxtQkEyTklHO0FBQ0k7QUFBQTtBQUFBLFVBQVkvakIsR0FBWjtBQUFBLFVBQWlCOEIsS0FBakI7QUFBaUM0Z0IsY0FBUSxDQUFSQTtBQUFqQztBQUNIO0FBRUQ7QUEvTko7O0FBQUEsaUJBZ09Jc0I7OztBQUNJLFFBQUkxYyxlQUFlLENBQW5CLEtBQW1CLENBQW5CLEVBQTRCO0FBQ3hCckgsV0FBSyxHQUFHLFFBQVJBLEtBQVEsQ0FBUkE7QUFDSDs7QUFDRHVkLGVBQVcsQ0FBQztBQUNSLFVBQUl2YixhQUFhLENBQWpCLEtBQWlCLENBQWpCLEVBQ0ksa0JBQWtCLENBQWxCLEtBQWtCLENBQWxCLFNBQWtDO0FBQUEsZUFDOUIsTUFBSSxDQUFKLFNBQTRCaEMsS0FBSyxDQURILEdBQ0csQ0FBakMsQ0FEOEI7QUFEdEMsT0FDSSxFQURKLEtBSUssSUFBSWlILEtBQUssQ0FBTEEsUUFBSixLQUFJQSxDQUFKLEVBQTBCLEtBQUssQ0FBTCxRQUFjO0FBQUEsWUFBRWxILEdBQUY7QUFBQSxZQUFPOEIsS0FBUDtBQUFBLGVBQWtCLE1BQUksQ0FBSixTQUFsQixLQUFrQixDQUFsQjtBQUF4QyxPQUEwQixFQUExQixLQUNBLElBQUltQixRQUFRLENBQVosS0FBWSxDQUFaLEVBQXFCO0FBQ3RCLFlBQUloRCxLQUFLLENBQUxBLGdCQUFKLEtBQStCRyxHQUFHLEtBQUhBLEtBQUcsQ0FBSEE7QUFDL0JILGFBQUssQ0FBTEEsUUFBYztBQUFBLGlCQUFnQixNQUFJLENBQUosU0FBaEIsS0FBZ0IsQ0FBaEI7QUFBZEE7QUFGQyxhQUdFLElBQUlBLEtBQUssS0FBTEEsUUFBa0JBLEtBQUssS0FBM0IsV0FBMkNHLEdBQUcsS0FBSEEsS0FBRyxDQUFIQTtBQVR0RG9kLEtBQVcsQ0FBWEE7QUFXQTtBQS9PUjs7QUFBQSxpQkFrUEltRTs7O0FBQ0luRSxlQUFXLENBQUM7QUFDUi9KLGVBQVMsQ0FBQztBQUNOLDhEQUFrQixNQUFJLENBQXRCLElBQWtCLEVBQWxCO0FBQUEsY0FBV3pULEdBQVg7O0FBQStCLGdCQUFJLENBQUosUUFBSSxDQUFKO0FBQS9CO0FBREp5VCxPQUFTLENBQVRBO0FBREorSixLQUFXLENBQVhBO0FBblBSOztBQUFBLG1CQTBQSW9FO3NCQUFBQSxDQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FwRSxlQUFXLENBQUM7QUFDUjtBQUNBLFVBQU15RyxjQUFjLEdBQUdDLFlBQVksQ0FBbkMsTUFBbUMsQ0FBbkM7QUFDQSxVQUFNQyxXQUFXLEdBQUcsSUFBcEIsR0FBb0IsRUFBcEIsQ0FIUSxDQUdSOztBQUVBLFVBQUlDLHVCQUF1QixHQUEzQixNQUxRLENBS1I7QUFFQTtBQUNBOztBQUNBLDREQUFrQixNQUFJLENBQUosTUFBbEIsSUFBa0IsRUFBbEIsMkNBQXFDO0FBQUEsWUFBMUJwa0IsR0FBMEIsaUJBQ2pDO0FBQ0E7O0FBQ0EsWUFBSSxDQUFDaWtCLGNBQWMsQ0FBZEEsSUFBTCxHQUFLQSxDQUFMLEVBQThCO0FBQzFCLGNBQU1JLE9BQU8sR0FBRyxNQUFJLENBQUosUUFBSSxDQUFKLENBRFUsR0FDVixDQUFoQixDQUQwQjs7O0FBRzFCLHVCQUFhO0FBQ1Q7QUFDQUQsbUNBQXVCLEdBQXZCQTtBQUZKLGlCQUdPO0FBQ0g7QUFDQSxnQkFBTXRpQixLQUFLLEdBQUcsTUFBSSxDQUFKLFVBQWQsR0FBYyxDQUFkOztBQUNBcWlCLHVCQUFXLENBQVhBO0FBQ0g7QUFDSjtBQUNKLE9BeEJPLENBd0JQOzs7QUFFRCw0REFBMkJGLGNBQWMsQ0FBekMsT0FBMkJBLEVBQTNCLDJDQUFxRDtBQUFBO0FBQUEsWUFBekNqa0IsSUFBeUM7QUFBQSxZQUFwQzhCLE1BQW9DLG9CQUNqRDs7QUFDQSxZQUFNd2lCLFVBQVUsR0FBRyxNQUFJLENBQUosVUFGOEIsSUFFOUIsQ0FBbkIsQ0FGaUQ7OztBQUlqRCxjQUFJLENBQUosVUFKaUQsTUFJakQsRUFKaUQ7OztBQU1qRCxZQUFJLE1BQUksQ0FBSixVQUFKLElBQUksQ0FBSixFQUF5QjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxjQUFNeGlCLE9BQUssR0FBRyxNQUFJLENBQUosVUFBZCxJQUFjLENBQWQ7O0FBQ0FxaUIscUJBQVcsQ0FBWEEsVUFMcUIsT0FLckJBLEVBTHFCOztBQU9yQixjQUFJLENBQUosWUFBaUI7QUFDYjtBQUNBQyxtQ0FBdUIsR0FBdkJBO0FBQ0g7QUFDSjtBQUNKLE9BNUNPLENBNENQOzs7QUFFRCxVQUFJLENBQUoseUJBQThCO0FBQzFCLFlBQUksTUFBSSxDQUFKLGVBQW9CRCxXQUFXLENBQW5DLE1BQTBDO0FBQ3RDO0FBQ0EsZ0JBQUksQ0FBSjtBQUZKLGVBR087QUFDSCxjQUFNSSxLQUFLLEdBQUcsTUFBSSxDQUFKLE1BQWQsSUFBYyxFQUFkOztBQUNBLGNBQU1DLEtBQUssR0FBR0wsV0FBVyxDQUF6QixJQUFjQSxFQUFkO0FBQ0EsY0FBSU0sS0FBSyxHQUFHRixLQUFLLENBQWpCLElBQVlBLEVBQVo7QUFDQSxjQUFJRyxLQUFLLEdBQUdGLEtBQUssQ0FBakIsSUFBWUEsRUFBWjs7QUFDQSxpQkFBTyxDQUFDQyxLQUFLLENBQWIsTUFBb0I7QUFDaEIsZ0JBQUlBLEtBQUssQ0FBTEEsVUFBZ0JDLEtBQUssQ0FBekIsT0FBaUM7QUFDN0Isb0JBQUksQ0FBSjs7QUFDQTtBQUNIOztBQUNERCxpQkFBSyxHQUFHRixLQUFLLENBQWJFLElBQVFGLEVBQVJFO0FBQ0FDLGlCQUFLLEdBQUdGLEtBQUssQ0FBYkUsSUFBUUYsRUFBUkU7QUFDSDtBQUNKO0FBQ0osT0FoRU8sQ0FnRVA7OztBQUVELFlBQUksQ0FBSjtBQWxFSmxILEtBQVcsQ0FBWEE7QUFvRUE7QUFyVVI7O0FBQUEsb0JBNlVJelg7QUFDSTtBQTlVUjs7QUFBQSxrQkFpVkl3SjtBQUNJLFdBQU9ySSxLQUFLLENBQUxBLEtBQVAsSUFBT0EsQ0FBUDtBQWxWUjtBQXlWSTs7Ozs7OztBQXpWSixvQkE4VkkrSDtBQUNJLFFBQUksS0FBSixFQUNJN087QUFDSixXQUFPaVAsZ0JBQWdCLE9BQXZCLFFBQXVCLENBQXZCO0FBaldSOztBQUFBLHNCQW9XSU47QUFDSSxXQUFPQyxtQkFBbUIsT0FBMUIsT0FBMEIsQ0FBMUI7QUFyV1I7O0FBQUE7QUFBQTtBQUFBO0FBeVVRO0FBQ0EsYUFBTyxXQUFQO0FBQ0g7QUEzVUw7QUFBQTtBQUFBO0FBc1ZRO0FBQ0g7QUF2Vkw7O0FBQUE7QUFBQSxJLENBQUE7OztBQTBXQSxJQUFXMUgsZUFBZSxnQkFBR3pFLHlCQUF5QixrQkFBL0MsYUFBK0MsQ0FBdEQ7O0FBSUE7QUFDSSxNQUFJSSxRQUFRLENBQVJBLGFBQVEsQ0FBUkEsSUFBMkJxRSxlQUFlLENBQTlDLGFBQThDLENBQTlDLEVBQStEO0FBQzNEO0FBREosU0FFTyxJQUFJSixLQUFLLENBQUxBLFFBQUosYUFBSUEsQ0FBSixFQUFrQztBQUNyQyxXQUFPLFFBQVAsYUFBTyxDQUFQO0FBREcsU0FFQSxJQUFJakYsYUFBYSxDQUFqQixhQUFpQixDQUFqQixFQUFrQztBQUNyQyxRQUFNK0ksR0FBRyxHQUFHLElBQVosR0FBWSxFQUFaOztBQUNBLFNBQUssSUFBTCxzQkFBaUM7QUFDN0JBLFNBQUcsQ0FBSEEsU0FBYTJaLGFBQWEsQ0FBMUIzWixHQUEwQixDQUExQkE7QUFDSDs7QUFDRDtBQUxHLFNBTUE7QUFDSCxXQUFPNUssR0FBRyxLQUFWLGFBQVUsQ0FBVjtBQUNIO0FBQ0o7Ozs7QUNsYkQsSUFBTXdrQixtQkFBbUIsR0FBekI7cUJBc09LMWdCLE1BQU0sQ0FBQzZlLFE7d0JBSUg3ZSxNQUFNLENBQUM4ZSxXOztBQTFNaEIsSUFBYTZCLGFBQWI7QUFTSTtRQUVJemEsbUIsRUFBQUE7QUFBQUEsaUJBQXlCdEQsWUFBekJzRDs7O1FBQ094RixnQixFQUFBQTtBQUFBQSxjQUFRLFNBQVUsU0FBVixHQUEyQyxlQUFuREE7OztTQUFBQSxLLEdBQUFBLE07U0FYVkYsSyxJQUFTa2dCLG1CO1NBQ0YxQixLLEdBQWtCLFM7U0FDbEIxRCxLLEdBQUFBLE07U0FDUnhSLGdCLEdBQUFBLE07U0FDQUQsYSxHQUFBQSxNO1NBQ0FHLFEsR0FBQUEsTTtTQUNBd1IsUyxHQUFBQSxNO0FBS1c5YTs7QUFFUCxRQUFJLENBQUNqRCxVQUFVLENBQWYsR0FBZSxDQUFmLEVBQXNCO0FBQ2xCdkIsU0FBRyxDQUFIQSxFQUFHLENBQUhBO0FBQ0g7O0FBQ0QsaUJBQWE2RixVQUFVLENBQUMsS0FBeEIsS0FBdUIsQ0FBdkI7O0FBQ0EscUJBQWlCO0FBQUEsYUFBZ0JtRSxRQUFRLGFBQXhCLEtBQXdCLENBQXhCO0FBQWpCOztBQUNBLHFCQUFpQjtBQUNiO0FBQ0g7QUFDSjs7QUF0Qkw7O0FBQUEseUJBd0JZeVY7QUFDSixRQUFJLGtCQUFKLFdBQWlDO0FBQzdCLGFBQU8sY0FBUCxLQUFPLENBQVA7QUFDSDs7QUFDRDtBQTVCUjs7QUFBQSxpQkErQkk4Qjs7O0FBQ0luRSxlQUFXLENBQUM7QUFDUi9KLGVBQVMsQ0FBQztBQUNOLDZEQUFvQixLQUFJLENBQUosTUFBcEIsTUFBb0IsRUFBcEI7QUFBQSxjQUFXM1IsS0FBWDs7QUFBeUMsZUFBSSxDQUFKLFFBQUksQ0FBSjtBQUF6QztBQURKMlIsT0FBUyxDQUFUQTtBQURKK0osS0FBVyxDQUFYQTtBQWhDUjs7QUFBQSxtQkF1Q0l1RztBQUNJLHlHQUEwQjtBQUFBLFVBQWZqaUIsS0FBZTtBQUN0QmdqQixnQkFBVSxDQUFWQTtBQUNIO0FBMUNUOztBQUFBLGVBa0RJQzs7O0FBQ0l4Vyx1Q0FBbUMsQ0FBQyxLQUFwQ0EsS0FBbUMsQ0FBbkNBOztBQUNBLFFBQUlDLGVBQWUsQ0FBbkIsSUFBbUIsQ0FBbkIsRUFBMkI7QUFDdkIsVUFBTUMsTUFBTSxHQUFHQyxlQUFlLE9BQTBCO0FBQ3BEQyxZQUFJLEVBRGdEO0FBRXBEcE0sY0FBTSxFQUY4QztBQUdwRG1GLGdCQUFRLEVBQUU1RjtBQUgwQyxPQUExQixDQUE5QjtBQUtBLFVBQUksQ0FBSixRQUFhLE9BTlUsSUFNVixDQU5VO0FBUXZCO0FBQ0g7O0FBQ0QsUUFBSSxDQUFDLFNBQUwsS0FBSyxDQUFMLEVBQXNCO0FBQ2xCMGIsaUJBQVcsQ0FBQztBQUNSLGNBQUksQ0FBSixVQUFlLE1BQUksQ0FBSixpQkFBZixTQUFlLENBQWY7O0FBQ0EsY0FBSSxDQUFKO0FBRkpBLE9BQVcsQ0FBWEE7QUFJQSxVQUFNM1AsU0FBUyxHQUFHLFVBQVdPLEtBQTdCO0FBQ0EsVUFBTXVILE1BQU0sR0FBRzlHLFlBQVksQ0FBM0IsSUFBMkIsQ0FBM0I7O0FBQ0EsVUFBTUosT0FBTSxHQUNSLE1BQU0sSUFBTixZQUN3QjtBQUNkUyxzQkFBYyxFQURBO0FBRWRDLHVCQUFlLEVBQUUsS0FGSDtBQUdkUixZQUFJLEVBSFU7QUFJZHBNLGNBQU0sRUFKUTtBQUtkbUYsZ0JBQVEsRUFBRTVGO0FBTEksT0FEeEIsR0FESjs7QUFVQSxVQUFJK0wsU0FBUyxxQkFBYixjQUEwQnFKLGNBQWMsQ0FBZEEsT0FBYyxDQUFkQTtBQUMxQixrQkFBWXBJLGVBQWUsT0FBZkEsT0FBZSxDQUFmQTtBQUNaLFVBQUlqQixTQUFTLHFCQUFiLGNBQTBCUSxZQUFZO0FBQ3pDOztBQUVEO0FBcEZSOztBQUFBLHFCQXVGSTs7O0FBQ0ksUUFBSUcsZUFBZSxDQUFuQixJQUFtQixDQUFuQixFQUEyQjtBQUN2QixVQUFNQyxNQUFNLEdBQUdDLGVBQWUsT0FBMEI7QUFDcERDLFlBQUksRUFEZ0Q7QUFFcERwTSxjQUFNLEVBRjhDO0FBR3BEcUYsZ0JBQVEsRUFBRTlGO0FBSDBDLE9BQTFCLENBQTlCO0FBS0EsVUFBSSxDQUFKLFFBQWE7QUFDaEI7O0FBQ0QsUUFBSSxTQUFKLEtBQUksQ0FBSixFQUFxQjtBQUNqQixVQUFNK0wsU0FBUyxHQUFHLFVBQVdPLEtBQTdCO0FBQ0EsVUFBTXVILE1BQU0sR0FBRzlHLFlBQVksQ0FBM0IsSUFBMkIsQ0FBM0I7O0FBQ0EsVUFBTUosUUFBTSxHQUNSLE1BQU0sSUFBTixZQUN3QjtBQUNkUyxzQkFBYyxFQURBO0FBRWRDLHVCQUFlLEVBQUUsS0FGSDtBQUdkUixZQUFJLEVBSFU7QUFJZHBNLGNBQU0sRUFKUTtBQUtkcUYsZ0JBQVEsRUFBRTlGO0FBTEksT0FEeEIsR0FESjs7QUFXQSxVQUFJK0wsU0FBUyxxQkFBYixjQUEwQnFKLGNBQWMsQ0FBZEEsUUFBYyxDQUFkQTtBQUMxQnNHLGlCQUFXLENBQUM7QUFDUixjQUFJLENBQUo7O0FBQ0EsY0FBSSxDQUFKO0FBRkpBLE9BQVcsQ0FBWEE7QUFJQSxrQkFBWTFPLGVBQWUsT0FBZkEsUUFBZSxDQUFmQTtBQUNaLFVBQUlqQixTQUFTLHFCQUFiLGNBQTBCUSxZQUFZO0FBQ3RDO0FBQ0g7O0FBQ0Q7QUF2SFI7O0FBQUEsZUEwSEl1TztBQUNJO0FBQ0EsV0FBTyxlQUFlLG1CQUF0QixLQUFzQixDQUFmLENBQVA7QUE1SFI7O0FBQUEsbUJBK0hJSjtBQUNJLFFBQUl3SSxTQUFTLEdBQWI7QUFDQSxRQUFNMWhCLElBQUksR0FBRzRELEtBQUssQ0FBTEEsS0FBVyxLQUF4QixJQUF3QixFQUFYQSxDQUFiO0FBQ0EsUUFBTXFWLE1BQU0sR0FBR3JWLEtBQUssQ0FBTEEsS0FBVyxLQUExQixNQUEwQixFQUFYQSxDQUFmO0FBQ0EsV0FBTzJjLFlBQVksQ0FBUztBQUN4QnhJLFVBRHdCO0FBRXBCLFlBQU0wRSxLQUFLLEdBQVg7QUFDQWlGLGlCQUFTLElBQVRBO0FBQ0EsZUFBTyxLQUFLLEdBQUd6SSxNQUFNLENBQWQsU0FDRDtBQUFFemEsZUFBSyxFQUFFLENBQUN3QixJQUFJLENBQUwsS0FBSyxDQUFMLEVBQWNpWixNQUFNLENBQTdCLEtBQTZCLENBQXBCLENBQVQ7QUFBdUN1SCxjQUFJLEVBQUU7QUFBN0MsU0FEQyxHQUVEO0FBQUVBLGNBQUksRUFBRTtBQUFSLFNBRk47QUFHSDtBQVB1QixLQUFULENBQW5CO0FBbklSOztBQUFBLGdCQThJSXhnQjtBQUNJLFdBQU8sS0FBUCxNQUFPLEVBQVA7QUEvSVI7O0FBQUEsa0JBa0pJaVo7QUFDSTtBQUNBLFFBQU1xSCxJQUFJLEdBQVY7QUFDQSxRQUFJb0IsU0FBUyxHQUFiO0FBQ0EsUUFBTUMsZ0JBQWdCLEdBQUcvZCxLQUFLLENBQUxBLEtBQVcsV0FBcEMsTUFBb0MsRUFBWEEsQ0FBekI7QUFDQSxXQUFPMmMsWUFBWSxDQUFJO0FBQ25CeEksVUFEbUI7QUFFZixlQUFPLFNBQVMsR0FBRzRKLGdCQUFnQixDQUE1QixTQUNEO0FBQUVuakIsZUFBSyxFQUFFOGhCLElBQUksQ0FBSkEsY0FBbUJxQixnQkFBZ0IsQ0FBQ0QsU0FBN0MsRUFBNEMsQ0FBbkNwQixDQUFUO0FBQTRERSxjQUFJLEVBQUU7QUFBbEUsU0FEQyxHQUVEO0FBQUVBLGNBQUksRUFBRTtBQUFSLFNBRk47QUFHSDtBQUxrQixLQUFKLENBQW5CO0FBdkpSOztBQUFBLG1CQWdLSWxDOzs7QUFDSSxRQUFJcmEsZUFBZSxDQUFuQixLQUFtQixDQUFuQixFQUE0QjtBQUN4QnRILFdBQUssR0FBRyxRQUFSQSxLQUFRLENBQVJBO0FBQ0g7O0FBRUR1ZCxlQUFXLENBQUM7QUFDUixVQUFJdFcsS0FBSyxDQUFMQSxRQUFKLEtBQUlBLENBQUosRUFBMEI7QUFDdEIsY0FBSSxDQUFKOztBQUNBakgsYUFBSyxDQUFMQSxRQUFjLGlCQUFLO0FBQUEsaUJBQUksTUFBSSxDQUFKLElBQUosS0FBSSxDQUFKO0FBQW5CQTtBQUZKLGFBR08sSUFBSWtELFFBQVEsQ0FBWixLQUFZLENBQVosRUFBcUI7QUFDeEIsY0FBSSxDQUFKOztBQUNBbEQsYUFBSyxDQUFMQSxRQUFjLGlCQUFLO0FBQUEsaUJBQUksTUFBSSxDQUFKLElBQUosS0FBSSxDQUFKO0FBQW5CQTtBQUZHLGFBR0EsSUFBSUEsS0FBSyxLQUFMQSxRQUFrQkEsS0FBSyxLQUEzQixXQUEyQztBQUM5Q0csV0FBRyxDQUFDLGdDQUFKQSxLQUFHLENBQUhBO0FBQ0g7QUFUTG9kLEtBQVcsQ0FBWEE7QUFZQTtBQWpMUjs7QUFBQSxvQkFtTEl2TztBQUNJO0FBQ0EsUUFBSSxLQUFKLEVBQ0k3TztBQUNKLFdBQU9pUCxnQkFBZ0IsT0FBdkIsUUFBdUIsQ0FBdkI7QUF2TFI7O0FBQUEsc0JBMExJTjtBQUNJLFdBQU9DLG1CQUFtQixPQUExQixPQUEwQixDQUExQjtBQTNMUjs7QUFBQSxrQkE4TElPO0FBQ0ksV0FBT3JJLEtBQUssQ0FBTEEsS0FBUCxJQUFPQSxDQUFQO0FBL0xSOztBQUFBLG9CQWtNSW5CO0FBQ0k7QUFuTVI7O0FBQUEsK0JBc01JO0FBQ0ksV0FBTyxLQUFQLE1BQU8sRUFBUDtBQXZNUjs7QUFBQTtBQUFBO0FBQUE7QUE4Q1E7QUFDQSxhQUFPLFdBQVA7QUFDSDtBQWhETDtBQUFBO0FBQUE7QUEyTVE7QUFDSDtBQTVNTDs7QUFBQTtBQUFBLEksQ0FBQTs7O0FBZ05BLElBQVd3QixlQUFlLGdCQUFHMUUseUJBQXlCLGtCQUEvQyxhQUErQyxDQUF0RDtBQzVOTyxJQUFNcWlCLHlCQUF5QixnQkFBR2hoQixNQUFNLENBQXhDLDJCQUF3QyxDQUF4QztBQUVQLElBQU1paEIsZUFBZSxnQkFBR3prQixNQUFNLENBQU5BLE9BQXhCLElBQXdCQSxDQUF4QjtBQW9DQSxJQUFNMGtCLE1BQU0sR0FBWjs7QUFFQSxJQUFhQyw4QkFBYjtBQVVJO0FBQUE7QUFBQTtRQUVXNUYsa0IsRUFBQUE7QUFBQUEsZ0JBQVUsU0FBVkE7OztRQUdBNkYsNkIsRUFBQUE7QUFBQUEsMkJBQWlDM2EsVUFBakMyYTs7O1FBRUFDLG9CLEVBQUFBO0FBQUFBLGtCQUFxQixLQUFyQkE7OztTQU5BLE8sR0FBQSxNO1NBQ0E5RixPLEdBQUFBLE07U0FDQSxLLEdBQUEsTTtTQUVBNkYsa0IsR0FBQUEsTTtTQUVBQyxTLEdBQUFBLE07U0FmWG5DLFMsR0FBQUEsTTtTQUNBcFYsZ0IsR0FBQUEsTTtTQUNBRCxhLEdBQUFBLE07U0FDQTRSLE0sR0FBQUEsTTtTQUNBNkYsYyxHQUFBQSxNO1NBQ0FDLG1CLEdBQUFBLE07U0FDUUMsWSxHQUFBQSxNO0FBR0c7QUFDQWpHO0FBQ0E7QUFFQTZGO0FBRUFDO0FBRVAscUJBQWlCLFNBQVMsU0FBYSxTQUFiLEdBQTFCLHVCQUFpQixDQUFqQixDQVRKLENBU0k7O0FBRUEsMEJBQXNCdGpCLGFBQWEsQ0FBQyxLQUFwQyxPQUFtQyxDQUFuQzs7QUFDQSxRQUFJLEtBQUosRUFBdUQsRUFFdEQ7O0FBQ0QsUUFBSSxLQUFKLEVBQW9ELEVBRW5EOztBQUNELGVBQWEsRUFHWjtBQUNKOztBQWhDTDs7QUFBQSxtQ0FrQ0kwakI7QUFDSSxXQUFPLHNCQUFQLEdBQU8sRUFBUDtBQW5DUjs7QUFBQSxtQ0FzQ0lDO0FBQ0ksUUFBTWpiLFVBQVUsR0FBRyxpQkFBbkIsR0FBbUIsQ0FBbkI7O0FBQ0EsUUFBSUEsVUFBVSxZQUFkLGVBQXlDO0FBQ3JDQSxnQkFBVSxDQUFWQTtBQUNBO0FBQ0gsS0FMTGliLENBS0s7OztBQUdELFFBQUlwWCxlQUFlLENBQW5CLElBQW1CLENBQW5CLEVBQTJCO0FBQ3ZCLFVBQU1DLE1BQU0sR0FBR0MsZUFBZSxPQUEwQjtBQUNwREMsWUFBSSxFQURnRDtBQUVwRHBNLGNBQU0sRUFBRSxlQUFlLEtBRjZCO0FBR3BETyxZQUFJLEVBSGdEO0FBSXBENEUsZ0JBQVEsRUFBUkE7QUFKb0QsT0FBMUIsQ0FBOUI7QUFNQSxVQUFJLENBQUosUUFBYTtBQUNiQSxjQUFRLEdBQUkrRyxNQUFjLENBQTFCL0c7QUFDSDs7QUFDREEsWUFBUSxHQUFJaUQsVUFBa0IsQ0FBbEJBLGlCQUFaakQsUUFBWWlELENBQVpqRCxDQWxCSmtlLENBa0JJbGU7O0FBR0EsUUFBSUEsUUFBUSxLQUFLcEcsV0FBVyxDQUE1QixXQUF3QztBQUNwQyxVQUFNcVUsTUFBTSxHQUFHOUcsWUFBWSxDQUEzQixJQUEyQixDQUEzQjtBQUNBLFVBQU1oQixTQUFTLEdBQUcsVUFBV08sS0FBN0I7O0FBQ0EsVUFBTUssT0FBTSxHQUNSLE1BQU0sSUFBTixZQUNNO0FBQ0lFLFlBQUksRUFEUjtBQUVJTyxzQkFBYyxFQUZsQjtBQUdJQyx1QkFBZSxFQUFFLEtBSHJCO0FBSUk1TSxjQUFNLEVBQUUsZUFBZSxLQUozQjtBQUtJcUYsZ0JBQVEsRUFBRytDLFVBQWtCLENBTGpDO0FBTUk3SCxZQUFJLEVBTlI7QUFPSTRFLGdCQUFRLEVBQVJBO0FBUEosT0FETixHQURKOztBQWFBLFVBQUksS0FBSixFQUEwQndQO0FBQ3hCdk0sZ0JBQW1DLENBQW5DQTtBQUNGLGtCQUFZbUUsZUFBZSxPQUFmQSxPQUFlLENBQWZBO0FBQ1osVUFBSSxLQUFKLEVBQTBCVCxFQUFZO0FBQ3pDOztBQUNEO0FBaEZSOztBQUFBLGdCQW1GSWlUO0FBQ0ksUUFBSWhnQixXQUFXLENBQVhBLHNCQUFrQyxDQUFDc0MsT0FBTyxDQUFDLEtBQUQsU0FBOUMsR0FBOEMsQ0FBOUMsRUFBbUU7QUFDL0Q7QUFDQTtBQUNIOztBQUNELFdBQU8sYUFBUCxHQUFPLENBQVA7QUFDSDtBQUVEOzs7Ozs7O0FBM0ZKOztBQUFBLGdCQWtHSTJkO1FBQW1Dc0Usb0IsRUFBQUE7QUFBQUEsa0JBQXFCLEtBQXJCQTtLQUFuQ3RFLENBQ0k7OztBQUNBLFFBQUkzZCxPQUFPLENBQUMsS0FBRCxTQUFYLEdBQVcsQ0FBWCxFQUFnQztBQUM1QjtBQUNBLFVBQUksaUJBQUosR0FBSSxDQUFKLEVBQTJCO0FBQ3ZCO0FBQ0EsZUFBTyxrQ0FBUCxLQUFPLENBQVA7QUFGSixhQUdPLGVBQWU7QUFDbEI7QUFDQSxlQUFPSCxPQUFPLENBQVBBLElBQVksS0FBWkEsY0FBUCxLQUFPQSxDQUFQO0FBRkcsYUFHQTtBQUNIO0FBQ0E7QUFDQTtBQUNIO0FBWkwsV0FhTztBQUNIO0FBQ0EsYUFBTyxrQkFFSDtBQUFFM0IsYUFBSyxFQUFQO0FBQVNXLGtCQUFVLEVBQW5CO0FBQTJCQyxnQkFBUSxFQUFuQztBQUEyQ0Msb0JBQVksRUFBRTtBQUF6RCxPQUZHLEVBR0gsS0FIRyxvQkFBUCxTQUFPLENBQVA7QUFNSDtBQXpIVDtBQUFBOztBQUFBLGdCQTZISTBnQjtBQUNJLFFBQUksQ0FBQy9oQixXQUFXLENBQWhCLG9CQUFxQztBQUNqQztBQUNBLGFBQU90QixHQUFHLElBQUksS0FBZDtBQUNIOztBQUNELDhDQUFzQixJQUF0QixHQUFzQixFQUF0QjtBQUNBLFFBQUlzakIsS0FBSyxHQUFHLHNCQUFaLEdBQVksQ0FBWjs7QUFDQSxRQUFJLENBQUosT0FBWTtBQUNSQSxXQUFLLEdBQUcsb0JBQ0p0akIsR0FBRyxJQUFJLEtBREgsNEJBR0osU0FBYSxTQUFiLEdBSEkseUJBQVJzakIsS0FBUSxDQUFSQTtBQU1BO0FBQ0g7O0FBQ0QsV0FBT0EsS0FBSyxDQUFaLEdBQU9BLEVBQVA7QUFDSDtBQUVEOzs7O0FBaEpKOztBQUFBLGlCQW9KSXRiO0FBQ0ksUUFBSTVELFVBQVUsS0FBZCxNQUF5QjtBQUNyQkEsZ0JBQVUsR0FBRyxzQkFBYkEsR0FBYSxDQUFiQTtBQUNIOztBQUNELFFBQUlBLFVBQVUsS0FBZCxPQUEwQjtBQUN0QjtBQUNIOztBQUNEMGhCLG1CQUFlLG1CQUFmQSxHQUFlLENBQWZBO0FBQ0ExaEIsY0FBVSxDQUFWQTtBQUNIO0FBRUQ7Ozs7Ozs7QUEvSko7O0FBQUEsbUJBc0tJNkQ7UUFJSTRkLG9CLEVBQUFBO0FBQUFBLGtCQUFxQixLQUFyQkE7OztBQUVBLFFBQUl6aEIsVUFBVSxLQUFkLE1BQXlCO0FBQ3JCQSxnQkFBVSxHQUFHMmhCLDZCQUE2QixhQUV0QyxLQUZzQyxvQkFHdEMsS0FISjNoQixTQUEwQyxDQUExQ0E7QUFLSDs7QUFDRCxRQUFJQSxVQUFVLEtBQWQsT0FBMEI7QUFDdEIsYUFBTyxzQ0FBUCxTQUFPLENBQVA7QUFDSDs7QUFDRDBoQixtQkFBZSxtQkFBZkEsR0FBZSxDQUFmQTtBQUNBLFFBQU1FLE9BQU8sR0FBRzVoQixVQUFVLENBQVZBLCtCQUFoQixTQUFnQkEsQ0FBaEI7O0FBQ0EsaUJBQWE7QUFDVDBFLDZCQUF1QixtQkFBdkJBLEdBQXVCLENBQXZCQTtBQUNIOztBQUNEO0FBM0xSOztBQUFBLDRCQThMSW1kOzhCQUFBQSxDQUNJOzs7QUFDQSxRQUFJN2hCLFVBQVUsNEJBQUcsYUFBSCx5QkFBRyxDQUFILHFCQUFHLDBCQUFqQixHQUFpQixDQUFqQjtBQUNBLG9CQUFnQjtBQUVoQixRQUFJNGEsT0FBTyxHQUFHLEtBQWQ7O0FBQ0EsV0FBT0EsT0FBTyxJQUFJQSxPQUFPLEtBQXpCLGlCQUErQztBQUMzQyxVQUFNdlcsVUFBVSxHQUFHOUgsYUFBYSxVQUFoQyxHQUFnQyxDQUFoQzs7QUFDQSxzQkFBZ0I7QUFDWnlELGtCQUFVLEdBQUcyaEIsNkJBQTZCLGFBRXRDLEtBRnNDLG9CQUd0QyxLQUhKM2hCLFNBQTBDLENBQTFDQTtBQUtBO0FBQ0g7O0FBQ0Q0YSxhQUFPLEdBQUd0ZSxNQUFNLENBQU5BLGVBQVZzZSxPQUFVdGUsQ0FBVnNlO0FBQ0gsS0FqQkxpSCxDQWlCSzs7O0FBR0QsUUFBSTdoQixVQUFVLEtBQWQsV0FBOEI7QUFDMUJoRSxTQUFHLFlBQUhBLEdBQUcsQ0FBSEE7QUFDSCxLQXRCTDZsQixDQXNCSztBQUdEOzs7QUFDQSxRQUFJLENBQUMsS0FBTCxnQkFBMEI7QUFDdEI7QUFDQSxVQUFNQyxZQUFZLEdBQUd4bEIsTUFBTSxDQUFOQSxlQUFzQixLQUEzQyxPQUFxQkEsQ0FBckI7O0FBQ0EsVUFBSSxDQUFDa0QsT0FBTyxlQUFaLHlCQUFZLENBQVosRUFBdUQ7QUFDbkR0QixxQkFBYSwwQ0FBMEMsSUFBdkRBLEdBQXVELEVBQTFDLENBQWJBO0FBQ0g7O0FBQ0Q0akIsa0JBQVksQ0FBWkEseUJBQVksQ0FBWkE7QUFDSDs7QUFFRDtBQUNIO0FBRUQ7Ozs7OztBQXBPSjs7QUFBQSwyQkEwT0lDO1FBR0lOLG9CLEVBQUFBO0FBQUFBLGtCQUFxQixLQUFyQkE7OztBQUVBLFFBQUk7QUFDQWpnQixnQkFEQTs7QUFJQSxVQUFNd2dCLGFBQWEsR0FBRyxhQUF0QixHQUFzQixDQUF0Qjs7QUFDQSxVQUFJLENBQUosZUFBb0I7QUFDaEI7QUFDQTtBQVBKOzs7QUFXQSxVQUFJNVgsZUFBZSxDQUFuQixJQUFtQixDQUFuQixFQUEyQjtBQUN2QixZQUFNQyxNQUFNLEdBQUdDLGVBQWUsT0FBMEI7QUFDcERuTSxnQkFBTSxFQUFFLGVBQWUsS0FENkI7QUFFcERPLGNBQUksRUFGZ0Q7QUFHcEQ2TCxjQUFJLEVBSGdEO0FBSXBEakgsa0JBQVEsRUFBRWUsVUFBVSxDQUFDM0c7QUFKK0IsU0FBMUIsQ0FBOUI7QUFNQSxZQUFJLENBQUosUUFBYTtBQVBVLFlBUWY0RixRQVJlLEdBUUYrRyxNQVJFOztBQVN2QixZQUFJaEcsVUFBVSxDQUFWQSxVQUFKLFVBQW1DO0FBQy9CQSxvQkFBVTtBQUVOM0csaUJBQUssRUFBRTRGO0FBRkQsWUFBVmU7QUFJSDtBQXpCTDs7O0FBNkJBLHFCQUFlO0FBQ1gsWUFBSSxDQUFDaEYsT0FBTyxDQUFQQSxlQUF1QixLQUF2QkEsY0FBTCxVQUFLQSxDQUFMLEVBQTREO0FBQ3hEO0FBQ0g7QUFITCxhQUlPO0FBQ0g3QyxzQkFBYyxDQUFDLEtBQUQsY0FBZEEsVUFBYyxDQUFkQTtBQWxDSjs7O0FBc0NBLHdDQUFrQzZILFVBQVUsQ0FBNUM7QUF0Q0osY0F1Q1U7QUFDTjNDLGNBQVE7QUFDWDs7QUFDRDtBQXpSUjtBQUFBOztBQUFBLHFDQTZSSXVnQjtRQUlJUixvQixFQUFBQTtBQUFBQSxrQkFBcUIsS0FBckJBOzs7QUFFQSxRQUFJO0FBQ0FqZ0IsZ0JBREE7O0FBSUEsVUFBTXdnQixhQUFhLEdBQUcsYUFBdEIsR0FBc0IsQ0FBdEI7O0FBQ0EsVUFBSSxDQUFKLGVBQW9CO0FBQ2hCO0FBQ0E7QUFQSjs7O0FBV0EsVUFBSTVYLGVBQWUsQ0FBbkIsSUFBbUIsQ0FBbkIsRUFBMkI7QUFDdkIsWUFBTUMsTUFBTSxHQUFHQyxlQUFlLE9BQTBCO0FBQ3BEbk0sZ0JBQU0sRUFBRSxlQUFlLEtBRDZCO0FBRXBETyxjQUFJLEVBRmdEO0FBR3BENkwsY0FBSSxFQUhnRDtBQUlwRGpILGtCQUFRLEVBQUU1RjtBQUowQyxTQUExQixDQUE5QjtBQU1BLFlBQUksQ0FBSixRQUFhO0FBQ2JBLGFBQUssR0FBSTJNLE1BQWMsQ0FBdkIzTTtBQUNIOztBQUVELFVBQU13a0IsZ0JBQWdCLEdBQUdDLGlDQUFpQyxDQUExRCxHQUEwRCxDQUExRDtBQUNBLFVBQU05ZCxVQUFVLEdBQUc7QUFDZjlGLG9CQUFZLEVBQUVyQixXQUFXLENBQVhBLGtCQUE4QixLQUE5QkEsaUJBREM7QUFFZm1CLGtCQUFVLEVBRks7QUFHZmlILFdBQUcsRUFBRTRjLGdCQUFnQixDQUhOO0FBSWYzYyxXQUFHLEVBQUUyYyxnQkFBZ0IsQ0FBQzNjO0FBSlAsT0FBbkIsQ0F2QkE7O0FBK0JBLHFCQUFlO0FBQ1gsWUFBSSxDQUFDbEcsT0FBTyxDQUFQQSxlQUF1QixLQUF2QkEsY0FBTCxVQUFLQSxDQUFMLEVBQTREO0FBQ3hEO0FBQ0g7QUFITCxhQUlPO0FBQ0g3QyxzQkFBYyxDQUFDLEtBQUQsY0FBZEEsVUFBYyxDQUFkQTtBQUNIOztBQUVELFVBQU0rSixXQUFVLEdBQUcscUNBR2YsU0FBYSxTQUFiLEdBSGUsd0JBQW5CLEtBQW1CLENBQW5COztBQU9BLDRCQTlDQSxXQThDQSxFQTlDQTs7QUFpREEsd0NBQWtDQSxXQUFVLENBQTVDO0FBakRKLGNBa0RVO0FBQ043RSxjQUFRO0FBQ1g7O0FBQ0Q7QUF4VlI7QUFBQTs7QUFBQSxtQ0E0VkkwZ0I7UUFHSVgsb0IsRUFBQUE7QUFBQUEsa0JBQXFCLEtBQXJCQTs7O0FBRUEsUUFBSTtBQUNBamdCLGdCQURBOztBQUlBLFVBQU13Z0IsYUFBYSxHQUFHLGFBQXRCLEdBQXNCLENBQXRCOztBQUNBLFVBQUksQ0FBSixlQUFvQjtBQUNoQjtBQUNBO0FBUEo7OztBQVdBLFVBQUk1WCxlQUFlLENBQW5CLElBQW1CLENBQW5CLEVBQTJCO0FBQ3ZCLFlBQU1DLE1BQU0sR0FBR0MsZUFBZSxPQUEwQjtBQUNwRG5NLGdCQUFNLEVBQUUsZUFBZSxLQUQ2QjtBQUVwRE8sY0FBSSxFQUZnRDtBQUdwRDZMLGNBQUksRUFIZ0Q7QUFJcERqSCxrQkFBUSxFQUFFMEg7QUFKMEMsU0FBMUIsQ0FBOUI7QUFNQSxZQUFJLENBQUosUUFBYTtBQUNoQjs7QUFDRGpILGFBQU8sQ0FBUEEsZ0JBQU8sQ0FBUEEsT0FBaUIsU0FBYSxTQUFiLEdBQWpCQTtBQUNBQSxhQUFPLENBQVBBLFVBQWtCLGVBQWUsS0FBakNBO0FBQ0EsVUFBTW1lLGdCQUFnQixHQUFHQyxpQ0FBaUMsQ0FBMUQsR0FBMEQsQ0FBMUQ7QUFDQSxVQUFNOWQsVUFBVSxHQUFHO0FBQ2Y5RixvQkFBWSxFQUFFckIsV0FBVyxDQUFYQSxrQkFBOEIsS0FBOUJBLGlCQURDO0FBRWZtQixrQkFBVSxFQUZLO0FBR2ZpSCxXQUFHLEVBQUU0YyxnQkFBZ0IsQ0FITjtBQUlmM2MsV0FBRyxFQUFFMmMsZ0JBQWdCLENBQUMzYztBQUpQLE9BQW5CLENBdkJBOztBQStCQSxxQkFBZTtBQUNYLFlBQUksQ0FBQ2xHLE9BQU8sQ0FBUEEsZUFBdUIsS0FBdkJBLGNBQUwsVUFBS0EsQ0FBTCxFQUE0RDtBQUN4RDtBQUNIO0FBSEwsYUFJTztBQUNIN0Msc0JBQWMsQ0FBQyxLQUFELGNBQWRBLFVBQWMsQ0FBZEE7QUFDSDs7QUFFRCw0QkFBc0Isa0JBdkN0QixPQXVDc0IsQ0FBdEIsRUF2Q0E7O0FBMENBO0FBMUNKLGNBMkNVO0FBQ05rRixjQUFRO0FBQ1g7O0FBQ0Q7QUFDSDtBQUVEOzs7Ozs7QUFsWko7O0FBQUEsbUJBd1pJMmdCO1FBQTBCWixvQixFQUFBQTtBQUFBQSxrQkFBcUIsS0FBckJBO0tBQTFCWSxDQUNJOzs7QUFDQSxRQUFJLENBQUM3aUIsT0FBTyxDQUFDLEtBQUQsU0FBWixHQUFZLENBQVosRUFBaUM7QUFDN0I7QUFDSCxLQUpMNmlCLENBSUs7OztBQUdELFFBQUlqWSxlQUFlLENBQW5CLElBQW1CLENBQW5CLEVBQTJCO0FBQ3ZCLFVBQU1DLE1BQU0sR0FBR0MsZUFBZSxPQUEwQjtBQUNwRG5NLGNBQU0sRUFBRSxlQUFlLEtBRDZCO0FBRXBETyxZQUFJLEVBRmdEO0FBR3BENkwsWUFBSSxFQUFFeVc7QUFIOEMsT0FBMUIsQ0FBOUIsQ0FEdUI7O0FBT3ZCLFVBQUksQ0FBSixRQUFhO0FBQ2hCLEtBZkxxQixDQWVLOzs7QUFHRCxRQUFJO0FBQUE7O0FBQ0E3Z0IsZ0JBQVU7QUFDVixVQUFNK1AsTUFBTSxHQUFHOUcsWUFBWSxDQUEzQixJQUEyQixDQUEzQjtBQUNBLFVBQU1oQixTQUFTLEdBQUcsVUFBV08sS0FBN0I7O0FBQ0EsVUFBTXpELFlBQVUsR0FBRyxpQkFKbkIsR0FJbUIsQ0FBbkIsQ0FKQTs7O0FBTUEsVUFBSTdJLEtBQUssR0FOVCxTQU1BLENBTkE7O0FBUUEsVUFBSSxrQkFBZ0I2VCxNQUFNLElBQTFCLFNBQUksQ0FBSixFQUEwQztBQUFBOztBQUN0QzdULGFBQUsscUJBQUduQixhQUFhLENBQUMsS0FBRCxTQUFoQixHQUFnQixDQUFoQixxQkFBR0EsZUFBUm1CO0FBVEo7OztBQVlBLHFCQUFlO0FBQ1gsWUFBSSxDQUFDMkIsT0FBTyxDQUFQQSxlQUF1QixLQUF2QkEsU0FBTCxHQUFLQSxDQUFMLEVBQWdEO0FBQzVDO0FBQ0g7QUFITCxhQUlPO0FBQ0gsZUFBTyxhQUFQLEdBQU8sQ0FBUDtBQWpCSjs7O0FBb0JBLGlCQUFhLEVBcEJiOzs7QUF3QkEsd0JBQWdCO0FBQ1osK0JBRFksR0FDWixFQURZOztBQUdaLFlBQUlrSCxZQUFVLFlBQWQsaUJBQTJDO0FBQ3ZDN0ksZUFBSyxHQUFHNkksWUFBVSxDQUFsQjdJO0FBSlE7OztBQU9aK0Qsd0JBQWdCLENBQWhCQSxZQUFnQixDQUFoQkE7QUEvQko7OztBQWtDQSxxQkFsQ0EsYUFrQ0EsR0FsQ0E7QUFxQ0E7O0FBQ0EscUtBQWlDN0YsR0FBRyxJQUFJLEtBdEN4QyxPQXNDQSxFQXRDQTs7QUF5Q0EsVUFBSTJWLE1BQU0sSUFBVixXQUF5QjtBQUNyQixZQUFNbEgsUUFBTSxHQUFxQjtBQUM3QkUsY0FBSSxFQUR5QjtBQUU3Qk8sd0JBQWMsRUFGZTtBQUc3QjNNLGdCQUFNLEVBQUUsZUFBZSxLQUhNO0FBSTdCNE0seUJBQWUsRUFBRSxLQUpZO0FBSzdCdkgsa0JBQVEsRUFMcUI7QUFNN0I5RSxjQUFJLEVBQUU5QztBQU51QixTQUFqQztBQVFBLFlBQUksS0FBSixFQUEwQmtYO0FBQzFCLG9CQUFZcEksZUFBZSxPQUFmQSxRQUFlLENBQWZBO0FBQ1osWUFBSSxLQUFKLEVBQTBCVCxFQUFZO0FBQ3pDO0FBckRMLGNBc0RVO0FBQ052SSxjQUFRO0FBQ1g7O0FBQ0Q7QUFDSDtBQUVEOzs7OztBQXRlSjs7QUFBQSxvQkEyZUltSjtBQUNJLFFBQUksS0FBSixFQUNJN087QUFDSixXQUFPaVAsZ0JBQWdCLE9BQXZCLFFBQXVCLENBQXZCO0FBOWVSOztBQUFBLHNCQWlmSU47QUFDSSxXQUFPQyxtQkFBbUIsT0FBMUIsT0FBMEIsQ0FBMUI7QUFsZlI7O0FBQUEsbUNBcWZJMFg7OztBQUNJLFFBQU0vUSxNQUFNLEdBQUc5RyxZQUFZLENBQTNCLElBQTJCLENBQTNCO0FBQ0EsUUFBTWhCLFNBQVMsR0FBRyxVQUFXTyxLQUE3Qjs7QUFDQSxRQUFJdUgsTUFBTSxJQUFWLFdBQXlCO0FBQ3JCLFVBQU1sSCxNQUFNLEdBQ1IsTUFBTSxJQUFOLFlBQ087QUFDR0UsWUFBSSxFQURQO0FBRUdPLHNCQUFjLEVBRmpCO0FBR0dDLHVCQUFlLEVBQUUsS0FIcEI7QUFJRzVNLGNBQU0sRUFBRSxlQUFlLEtBSjFCO0FBS0dPLFlBQUksRUFMUDtBQU1HNEUsZ0JBQVEsRUFBRTVGO0FBTmIsT0FEUCxHQURKO0FBWUEsVUFBSSxLQUFKLEVBQTBCb1Y7QUFDMUIsa0JBQVlwSSxlQUFlLE9BQWZBLE1BQWUsQ0FBZkE7QUFDWixVQUFJLEtBQUosRUFBMEJULEVBQVk7QUFDekM7O0FBRUQsMktBckJKcVksQ0FxQkk7O0FBR0E7QUE3Z0JSOztBQUFBLG9CQWdoQklDO0FBQ0k7QUFDQSxXQUFPbmpCLE9BQU8sQ0FBQyxLQUFmLE9BQWMsQ0FBZDtBQWxoQlI7O0FBQUEsaUJBcWhCSW9qQjtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBT2xtQixNQUFNLENBQU5BLEtBQVksS0FBbkIsT0FBT0EsQ0FBUDtBQTdoQlI7O0FBQUE7QUFBQTs7QUFxaUJBLFNBQWdCd0ssa0JBQWhCLENBQ0lySCxNQURKLEVBRUlzRSxPQUZKLEVBRUlBOzs7QUFFQSxNQUFJLEtBQUosRUFBc0QsRUFFckQ7O0FBRUQsTUFBSXZFLE9BQU8sU0FBWCxLQUFXLENBQVgsRUFBNEI7QUFDeEIsUUFBSSxLQUFKLEVBQXVGLEVBTXRGOztBQUNEO0FBQ0g7O0FBRUQsTUFBSSxLQUFKLEVBQ0l4RDtBQUVKLE1BQU0wQyxJQUFJLG9CQUNOcUYsT0FETSxRQUNOQSxHQURNLE1BQ05BLFVBQU8sQ0FERCxnQ0FFTCxxQkFGTDtBQVFBLE1BQU1JLEdBQUcsR0FBRywyQ0FFUixJQUZRLEdBRVIsRUFGUSxFQUdSc2UsTUFBTSxDQUhFLElBR0YsQ0FIRSxFQUlSbmMsd0JBQXdCLENBSmhCLE9BSWdCLENBSmhCLEVBS1J2QyxPQUxRLFFBS1JBLEdBTFEsTUFLUkEsVUFBTyxDQUxYLFFBQVksQ0FBWjtBQVFBN0YsZUFBYSxnQkFBYkEsR0FBYSxDQUFiQTtBQUVBO0FBQ0g7O0FBRUQsSUFBTXdrQixnQ0FBZ0MsZ0JBQUdqa0IseUJBQXlCLG1DQUFsRSw4QkFBa0UsQ0FBbEU7O0FBS0E7QUFDSSxTQUNJLGVBQWUsQ0FBZixHQUFlLENBQWYsS0FDQ3NpQixlQUFlLENBQWZBLEdBQWUsQ0FBZkEsR0FBdUI7QUFDcEJ6YixPQURvQjtBQUVoQixhQUFPLG9DQUFQLEdBQU8sQ0FBUDtBQUZnQjtBQUlwQkMsT0FKb0I7QUFLaEIsYUFBTyx5Q0FBUCxLQUFPLENBQVA7QUFDSDtBQU5tQixHQUR4QixDQURKO0FBV0g7O0FBRUQsU0FBZ0J2QyxrQkFBaEIsQ0FBbUNsRSxLQUFuQyxFQUFtQ0E7QUFDL0IsTUFBSWxCLFFBQVEsQ0FBWixLQUFZLENBQVosRUFBcUI7QUFDakIsV0FBTzhrQixnQ0FBZ0MsQ0FBRTVqQixLQUFhLENBQXRELEtBQXNELENBQWYsQ0FBdkM7QUFDSDs7QUFDRDtBQUNIOztBQUVELFNBQWdCNEYsdUJBQWhCLENBQ0lQLEdBREosRUFFSW5FLFVBRkosRUFHSXBFLEdBSEosRUFHSUE7OztBQUVBLGFBQWEsRUFGYkEsQ0FJQzs7O0FBRUQsMkJBQU91SSxHQUFHLENBQUhBLFFBQVAsdUJBQU9BLENBQVAsMEJBQU9BLHNCQUFQLEdBQU9BLENBQVA7QUFDSDs7QUFFRDtBQUtJO0FBQ0EsTUFBSSxLQUFKLEVBQTBDLEVBRXpDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStCQTs7O0FBQ0EsTUFBSSxLQUFKLEVBQWtGLGtFQVVqRjtBQUNKO0FDdnZCRDs7Ozs7OztBQUtBLElBQUl3ZSw0QkFBNEIsR0FBaEMsRSxDQUFBOztJQUdNQyxtQzs7QUFDTjtBQUNJLE1BQUl0bUIsTUFBTSxDQUFWLGdCQUEyQjtBQUN2QkEsVUFBTSxDQUFOQSxlQUFzQnVtQixJQUFJLENBQTFCdm1CO0FBREosU0FFTyxJQUFJdW1CLElBQUksQ0FBSkEsd0JBQUosV0FBNEM7QUFDL0NBLFFBQUksQ0FBSkE7QUFERyxTQUVBO0FBQ0hBLFFBQUksQ0FBSkE7QUFDSDtBQUNKOztBQUNEQyxPQUFPLFlBQVloZ0IsS0FBSyxDQUF4QmdnQixTQUFPLENBQVBBLEMsQ0FBQUE7QUFHQTtBQUNBOztJQUVNQzs7O0FBQ0Y7OztRQUdJcmtCLGUsRUFBQUE7QUFBQUEsYUFBTyxTQUFVLFNBQVYsR0FBNkMsaUJBQXBEQTs7O1FBQ0E0ZSxnQixFQUFBQTtBQUFBQSxjQUFRLEtBQVJBOzs7QUFFQTtBQUVBLFFBQU1uWixHQUFHLEdBQUcseURBQVosSUFBWSxDQUFaO0FBQ0FBLE9BQUcsQ0FBSEE7QUFDQTNGLHNCQUFrQix1Q0FBbEJBLEdBQWtCLENBQWxCQTs7QUFFQSxRQUFJNmUsYUFBYSxJQUFJQSxhQUFhLENBQWxDLFFBQTJDO0FBQ3ZDLFVBQU0vVCxJQUFJLEdBQUdWLHNCQUFzQixDQURJLElBQ0osQ0FBbkMsQ0FEdUM7O0FBR3ZDOztBQUNBTSwwQkFBb0IsQ0FBcEJBLElBQW9CLENBQXBCQTtBQUNIOzs7QUFDSjs7OztTQUVEOFosTSxHQUFBQTtBQUNNOztzQ0FESUMsd0IsRUFBQUEsUSxFQUFBQSxXLEVBQUFBLE0sRUFBQUE7QUFBQUE7OztBQUVOLFdBQU8sS0FBSyxDQUFMLHVCQUNGLEtBREUsS0FDRixFQURFO0FBR0hBLFVBQU0sQ0FBTkEsSUFBVyxhQUFDO0FBQUEsYUFBS2hnQixpQkFBaUIsQ0FBakJBLENBQWlCLENBQWpCQSxHQUF1QmQsQ0FBQyxDQUF4QmMsS0FBdUJkLEVBQXZCYyxHQUFMO0FBSGhCLEtBR0lnZ0IsQ0FIRyxDQUFQO0FBS0gsRzs7U0FjQW5qQixNQUFNLENBQUM2ZSxRLElBQVI7QUFDSSxRQUFNYSxJQUFJLEdBQVY7QUFDQSxRQUFJb0IsU0FBUyxHQUFiO0FBQ0EsV0FBT25CLFlBQVksQ0FBQztBQUNoQnhJLFVBRGdCO0FBRVo7QUFDQSxlQUFPLFNBQVMsR0FBR3VJLElBQUksQ0FBaEIsU0FDRDtBQUFFOWhCLGVBQUssRUFBRThoQixJQUFJLENBQUNvQixTQUFkLEVBQWEsQ0FBYjtBQUE0QmxCLGNBQUksRUFBRTtBQUFsQyxTQURDLEdBRUQ7QUFBRUEsY0FBSSxFQUFOO0FBQWNoaUIsZUFBSyxFQUFFc047QUFBckIsU0FGTjtBQUdIO0FBTmUsS0FBRCxDQUFuQjtBQVFILEc7Ozs7O0FBdEJHLGFBQVEsWUFBUixlQUFRLEVBQVI7QUFDSCxLO3NCQUVVa1IsUyxFQUFBQTtBQUNMO0FBQ0w7O1NBRUlwYyxNQUFNLENBQUM4ZSxXOztBQUNSO0FBQ0g7Ozs7Q0F4Q0NtRSxDQUFpQ0gsU0FBakNHLEM7O0FBd0ROem1CLE1BQU0sQ0FBTkEsaUNBQXdDO01BQUVvRCxjO01BQU1sQyxZO0FBQzVDLE1BQUlrQyxJQUFJLEtBQVIsVUFBdUJ4QixhQUFhLENBQUM2a0IscUJBQXFCLENBQXRCLGlCQUFiN2tCLEVBQWEsQ0FBYkE7QUFEM0I1Qjs7QUFJQTtBQUNJLFNBQU87QUFDSCtCLGNBQVUsRUFEUDtBQUVIRSxnQkFBWSxFQUZUO0FBR0grRyxPQUFHLEVBQUU7QUFDRCxhQUFPLGlCQUFQLEtBQU8sQ0FBUDtBQUpEO0FBTUhDLE9BQUcsRUFBRTtBQUNEO0FBQ0g7QUFSRSxHQUFQO0FBVUg7O0FBRUQ7QUFDSS9JLGdCQUFjLENBQUN1bUIscUJBQXFCLENBQXRCLFdBQWtDLEtBQWxDLE9BQThDRywwQkFBMEIsQ0FBdEYxbUIsS0FBc0YsQ0FBeEUsQ0FBZEE7QUFDSDs7QUFFRCxTQUFnQmdnQixrQkFBaEIsQ0FBbUMyRyxHQUFuQyxFQUFtQ0E7QUFDL0IsTUFBSUEsR0FBRyxHQUFQLDhCQUF3QztBQUNwQyxTQUFLLElBQUl4SCxLQUFLLEdBQWQsOEJBQStDQSxLQUFLLEdBQUd3SCxHQUFHLEdBQTFELEtBQWtFeEgsS0FBbEU7QUFDSXlILDJCQUFxQixDQUFyQkEsS0FBcUIsQ0FBckJBO0FBREo7O0FBRUFULGdDQUE0QixHQUE1QkE7QUFDSDtBQUNKOztBQUVEbkcsa0JBQWtCLENBQWxCQSxJQUFrQixDQUFsQkE7O0FBRUEsU0FBZ0I2RyxpQkFBaEIsQ0FDSWhHLGFBREosRUFFSXJYLFFBRkosRUFHSXRILElBSEosRUFHSUE7QUFFQSxTQUFPLG1EQUFQLElBQU8sQ0FBUDtBQUNIOztTQ3RIZXFXLE8sQ0FBUWpXLEssRUFBWWhELFEsRUFBQUE7QUFDaEMsTUFBSSw2QkFBNkJnRCxLQUFLLEtBQXRDLE1BQWlEO0FBQzdDLFFBQUltRSxpQkFBaUIsQ0FBckIsS0FBcUIsQ0FBckIsRUFBOEI7QUFDMUIsVUFBSW5ILFFBQVEsS0FBWixXQUE0QkUsR0FBRyxDQUFIQSxFQUFHLENBQUhBO0FBQzVCLGFBQVE4QyxLQUFhLENBQWJBLEtBQWEsQ0FBYkEsQ0FBUjtBQUNIOztBQUNELFFBQUlxRSxlQUFlLENBQW5CLEtBQW1CLENBQW5CLEVBQTRCO0FBQ3hCLGFBQVFyRSxLQUFhLENBQXJCLEtBQXFCLENBQXJCO0FBQ0g7O0FBQ0QsUUFBSW9FLGVBQWUsQ0FBbkIsS0FBbUIsQ0FBbkIsRUFBNEI7QUFDeEIsVUFBSXBILFFBQVEsS0FBWixXQUE0QixPQUFPZ0QsS0FBSyxDQUFaO0FBQzVCLFVBQU15SCxVQUFVLEdBQUd6SCxLQUFLLENBQUxBLHVCQUE2QkEsS0FBSyxDQUFMQSxZQUFoRCxRQUFnREEsQ0FBaEQ7QUFDQSxVQUFJLENBQUosWUFBaUI5QyxHQUFHLGVBQWVzbkIsWUFBWSxDQUE5QnRuQixLQUE4QixDQUEzQixDQUFIQTtBQUNqQjtBQUNIOztBQUVELFFBQUlnSCxrQkFBa0IsQ0FBdEIsS0FBc0IsQ0FBdEIsRUFBK0I7QUFDM0IsVUFBSSxDQUFKLFVBQWUsT0FBT2hILEdBQUcsQ0FBVixFQUFVLENBQVY7O0FBQ2YsVUFBTXVLLFdBQVUsR0FBSXpILEtBQWEsQ0FBYkEsS0FBYSxDQUFiQSxhQUFwQixRQUFvQkEsQ0FBcEI7O0FBQ0EsVUFBSSxDQUFKLGFBQWlCOUMsR0FBRyxlQUFlc25CLFlBQVksQ0FBOUJ0bkIsS0FBOEIsQ0FBM0IsQ0FBSEE7QUFDakI7QUFDSDs7QUFDRCxRQUFJNEYsTUFBTSxDQUFOQSxLQUFNLENBQU5BLElBQWlCaU0sZUFBZSxDQUFoQ2pNLEtBQWdDLENBQWhDQSxJQUEyQzRRLFVBQVUsQ0FBekQsS0FBeUQsQ0FBekQsRUFBa0U7QUFDOUQ7QUFDSDtBQXZCTCxTQXdCTyxJQUFJalYsVUFBVSxDQUFkLEtBQWMsQ0FBZCxFQUF1QjtBQUMxQixRQUFJaVYsVUFBVSxDQUFDMVQsS0FBSyxDQUFwQixLQUFvQixDQUFOLENBQWQsRUFBOEI7QUFDMUI7QUFDQSxhQUFPQSxLQUFLLENBQVosS0FBWSxDQUFaO0FBQ0g7QUFDSjs7QUFDRDlDLEtBQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNIOztBQUVELFNBQWdCMGIsaUJBQWhCLENBQWtDNVksS0FBbEMsRUFBOENoRCxRQUE5QyxFQUE4Q0E7QUFDMUMsTUFBSSxDQUFKLE9BQVlFLEdBQUcsQ0FBSEEsRUFBRyxDQUFIQTtBQUNaLE1BQUlGLFFBQVEsS0FBWixXQUE0QixPQUFPNGIsaUJBQWlCLENBQUMzQyxPQUFPLFFBQWhDLFFBQWdDLENBQVIsQ0FBeEI7QUFDNUIsTUFBSW5ULE1BQU0sQ0FBTkEsS0FBTSxDQUFOQSxJQUFpQmlNLGVBQWUsQ0FBaENqTSxLQUFnQyxDQUFoQ0EsSUFBMkM0USxVQUFVLENBQXpELEtBQXlELENBQXpELEVBQWtFO0FBQ2xFLE1BQUl0UCxlQUFlLENBQWZBLEtBQWUsQ0FBZkEsSUFBMEJDLGVBQWUsQ0FBN0MsS0FBNkMsQ0FBN0MsRUFBc0Q7QUFDdEQsTUFBSXJFLEtBQUssQ0FBVCxLQUFTLENBQVQsRUFBa0IsT0FBT0EsS0FBSyxDQUFaLEtBQVksQ0FBWjtBQUNsQjlDLEtBQUcsS0FBSEEsS0FBRyxDQUFIQTtBQUNIOztBQUVELFNBQWdCc25CLFlBQWhCLENBQTZCeGtCLEtBQTdCLEVBQXlDaEQsUUFBekMsRUFBeUNBO0FBQ3JDOztBQUNBLE1BQUlBLFFBQVEsS0FBWixXQUE0QjtBQUN4QnluQixTQUFLLEdBQUd4TyxPQUFPLFFBQWZ3TyxRQUFlLENBQWZBO0FBREosU0FFTyxJQUFJOWUsUUFBUSxDQUFaLEtBQVksQ0FBWixFQUFxQjtBQUN4QixXQUFPM0YsS0FBSyxDQUFaO0FBREcsU0FFQSxJQUFJa0Usa0JBQWtCLENBQWxCQSxLQUFrQixDQUFsQkEsSUFBNkJFLGVBQWUsQ0FBNUNGLEtBQTRDLENBQTVDQSxJQUF1REcsZUFBZSxDQUExRSxLQUEwRSxDQUExRSxFQUFtRjtBQUN0Rm9nQixTQUFLLEdBQUc3TCxpQkFBaUIsQ0FBekI2TCxLQUF5QixDQUF6QkE7QUFERyxTQUVBO0FBQ0g7QUFDQUEsU0FBSyxHQUFHeE8sT0FBTyxDQUFmd08sS0FBZSxDQUFmQTtBQUNIOztBQUNELFNBQU9BLEtBQUssQ0FBWjtBQUNIOztBQzNERCxJQUFNNWhCLFFBQVEsR0FBR2xGLGVBQWUsQ0FBaEM7O0FBRUEsU0FBZ0IyRixTQUFoQixDQUEwQkQsQ0FBMUIsRUFBa0NxaEIsQ0FBbEMsRUFBMEM1UyxLQUExQyxFQUEwQ0E7TUFBQUEsZ0IsRUFBQUE7QUFBQUEsWUFBZ0IsQ0FBQyxDQUFqQkE7OztBQUN0QyxTQUFPNlMsRUFBRSxPQUFULEtBQVMsQ0FBVDtBQUNILEMsQ0FBQTtBQUdEOzs7QUFDQTtBQUNJO0FBQ0E7QUFDQSxNQUFJdGhCLENBQUMsS0FBTCxHQUFhLE9BQU9BLENBQUMsS0FBREEsS0FBVyxVQUFVLElBQTVCLEVBSGpCLENBR2lCOztBQUViLE1BQUlBLENBQUMsSUFBREEsUUFBYXFoQixDQUFDLElBQWxCLE1BQTRCLGFBTGhDLENBS2dDOztBQUU1QixNQUFJcmhCLENBQUMsS0FBTCxHQUFhLE9BQU9xaEIsQ0FBQyxLQUFSLEVBUGpCLENBT2lCOztBQUViLE1BQU1qWixJQUFJLEdBQUcsT0FBYjtBQUNBLE1BQUksQ0FBQ2hOLFVBQVUsQ0FBWCxJQUFXLENBQVgsSUFBcUJnTixJQUFJLEtBQXpCLFlBQTBDLFlBQTlDLFVBQW9FLGFBVnhFLENBVXdFOztBQUdwRSxNQUFNbVosU0FBUyxHQUFHL2hCLFFBQVEsQ0FBUkEsS0FBbEIsQ0FBa0JBLENBQWxCO0FBQ0EsTUFBSStoQixTQUFTLEtBQUsvaEIsUUFBUSxDQUFSQSxLQUFsQixDQUFrQkEsQ0FBbEIsRUFBb0M7O0FBQ3BDO0FBQ0k7QUFDQSxTQUZKLGlCQUVJLENBRko7O0FBSUk7QUFDSTtBQUNBO0FBQ0EsYUFBTyxXQUFXLEtBQWxCOztBQUNKO0FBQ0k7QUFDQTtBQUNBLFVBQUksT0FBTyxDQUFYLEdBQWUsT0FBTyxPQUFPLENBSGpDLENBR21CLENBSG5COztBQUtJLGFBQU8sV0FBVyxJQUFJLENBQUosTUFBVyxJQUF0QixJQUE4QixPQUFPLENBQTVDOztBQUNKO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDQSxhQUFPLE9BQU8sQ0FBZDs7QUFDSjtBQUNJLGFBQ0ksaUNBQWlDN0IsTUFBTSxDQUFOQSxvQkFBMkJBLE1BQU0sQ0FBTkEsYUFEaEUsQ0FDZ0VBLENBRGhFOztBQUdKO0FBQ0E7QUFDSTtBQUNBO0FBQ0EsVUFBSThRLEtBQUssSUFBVCxHQUFnQjtBQUNaQSxhQUFLO0FBQ1I7O0FBQ0Q7QUEvQlIsR0FmSixDQWVJOzs7QUFrQ0F6TyxHQUFDLEdBQUd3aEIsTUFBTSxDQUFWeGhCLENBQVUsQ0FBVkE7QUFDQXFoQixHQUFDLEdBQUdHLE1BQU0sQ0FBVkgsQ0FBVSxDQUFWQTtBQUVBLE1BQU1JLFNBQVMsR0FBR0YsU0FBUyxLQUEzQjs7QUFDQSxNQUFJLENBQUosV0FBZ0I7QUFDWixRQUFJLHdCQUF3QixZQUE1QixVQUFrRCxPQUR0QyxLQUNzQyxDQUR0QztBQUlaOztBQUNBLFFBQU1HLEtBQUssR0FBRzFoQixDQUFDLENBQWY7QUFBQSxRQUNJMmhCLEtBQUssR0FBR04sQ0FBQyxDQURiOztBQUVBLFFBQ0lLLEtBQUssS0FBTEEsU0FDQSxFQUNJdG1CLFVBQVUsQ0FBVkEsS0FBVSxDQUFWQSxJQUNBc21CLEtBQUssWUFETHRtQixTQUVBQSxVQUFVLENBRlZBLEtBRVUsQ0FGVkEsSUFHQXVtQixLQUFLLFlBTFRELEtBQ0EsQ0FEQUEsSUFPQSxpQkFQQUEsS0FRQSxpQkFUSixHQVVFO0FBQ0U7QUFDSDtBQUNKOztBQUVELE1BQUlqVCxLQUFLLEtBQVQsR0FBaUI7QUFDYjtBQURKLFNBRU8sSUFBSUEsS0FBSyxHQUFULEdBQWU7QUFDbEJBLFNBQUssR0FBRyxDQUFSQTtBQUNILEdBL0VMLENBK0VLO0FBR0Q7QUFFQTtBQUNBOzs7QUFDQW1ULFFBQU0sR0FBR0EsTUFBTSxJQUFmQTtBQUNBQyxRQUFNLEdBQUdBLE1BQU0sSUFBZkE7QUFDQSxNQUFJdEgsTUFBTSxHQUFHcUgsTUFBTSxDQUFuQjs7QUFDQSxTQUFPckgsTUFBUCxJQUFpQjtBQUNiO0FBQ0E7QUFDQSxRQUFJcUgsTUFBTSxDQUFOQSxNQUFNLENBQU5BLEtBQUosR0FBMEIsT0FBT0MsTUFBTSxDQUFOQSxNQUFNLENBQU5BLEtBQVA7QUFDN0IsR0E3RkwsQ0E2Rks7OztBQUdERCxRQUFNLENBQU5BO0FBQ0FDLFFBQU0sQ0FBTkEsUUFqR0osQ0FpR0lBOztBQUdBLGlCQUFlO0FBQ1g7QUFDQXRILFVBQU0sR0FBR3ZhLENBQUMsQ0FBVnVhO0FBQ0EsUUFBSUEsTUFBTSxLQUFLOEcsQ0FBQyxDQUFoQixRQUF5QixPQUhkLEtBR2MsQ0FIZDs7QUFLWCxXQUFPOUcsTUFBUCxJQUFpQjtBQUNiLFVBQUksQ0FBQytHLEVBQUUsQ0FBQ3RoQixDQUFDLENBQUYsTUFBRSxDQUFGLEVBQVlxaEIsQ0FBQyxDQUFiLE1BQWEsQ0FBYixFQUF1QjVTLEtBQUssR0FBNUIsV0FBUCxNQUFPLENBQVAsRUFBMEQ7QUFDN0Q7QUFQTCxTQVFPO0FBQ0g7QUFDQSxRQUFNMVIsSUFBSSxHQUFHNUMsTUFBTSxDQUFOQSxLQUFiLENBQWFBLENBQWI7QUFDQTtBQUNBb2dCLFVBQU0sR0FBR3hkLElBQUksQ0FKVixNQUlId2QsQ0FKRzs7QUFNSCxRQUFJcGdCLE1BQU0sQ0FBTkEsbUJBQUosUUFBc0M7O0FBQ3RDLFdBQU9vZ0IsTUFBUCxJQUFpQjtBQUNiO0FBQ0E5Z0IsU0FBRyxHQUFHc0QsSUFBSSxDQUFWdEQsTUFBVSxDQUFWQTtBQUNBLFVBQUksRUFBRTRELE9BQU8sSUFBUEEsR0FBTyxDQUFQQSxJQUFtQmlrQixFQUFFLENBQUN0aEIsQ0FBQyxDQUFGLEdBQUUsQ0FBRixFQUFTcWhCLENBQUMsQ0FBVixHQUFVLENBQVYsRUFBaUI1UyxLQUFLLEdBQXRCLFdBQTNCLE1BQTJCLENBQXZCLENBQUosRUFBeUU7QUFDNUU7QUFDSixHQXhITCxDQXdISzs7O0FBRURtVCxRQUFNLENBQU5BO0FBQ0FDLFFBQU0sQ0FBTkE7QUFDQTtBQUNIOztBQUVEO0FBQ0ksTUFBSS9nQixpQkFBaUIsQ0FBckIsQ0FBcUIsQ0FBckIsRUFBMEIsT0FBT2QsQ0FBQyxDQUFSLEtBQU9BLEVBQVA7QUFDMUIsTUFBSXRELFFBQVEsQ0FBUkEsQ0FBUSxDQUFSQSxJQUFlcUUsZUFBZSxDQUFsQyxDQUFrQyxDQUFsQyxFQUF1QyxPQUFPSixLQUFLLENBQUxBLEtBQVdYLENBQUMsQ0FBbkIsT0FBa0JBLEVBQVhXLENBQVA7QUFDdkMsTUFBSS9ELFFBQVEsQ0FBUkEsQ0FBUSxDQUFSQSxJQUFlb0UsZUFBZSxDQUFsQyxDQUFrQyxDQUFsQyxFQUF1QyxPQUFPTCxLQUFLLENBQUxBLEtBQVdYLENBQUMsQ0FBbkIsT0FBa0JBLEVBQVhXLENBQVA7QUFDdkM7QUFDSDs7U0N4SmUyYyxZLENBQWdCZCxRLEVBQUFBO0FBQzVCQSxVQUFRLENBQUM3ZSxNQUFNLENBQWY2ZSxRQUFRLENBQVJBO0FBQ0E7QUFDSDs7QUFFRDtBQUNJO0FBQ0g7QUM0QkQ7Ozs7Ozs7Ozs7OztBQVVBLFNBQWdCZ0QsNkJBQWhCLENBQ0lzQyxJQURKLEVBRUlDLGlCQUZKLEVBR0lDLFFBSEosRUFHSUE7QUFFQSxNQUFJRixJQUFJLENBQVIsS0FBYztBQUNkLE1BQUlBLElBQUksQ0FBUixLQUFjLGFBSGRFLENBR2M7QUFDZDs7QUFDQSxTQUFPNW1CLFVBQVUsQ0FBQzBtQixJQUFJLENBQWYxbUIsS0FBVSxDQUFWQSxHQUNEUSxXQUFXLENBQUNrbUIsSUFBSSxDQUFoQmxtQixLQUFXLENBQVhBLEdBQ0lnSCxNQUFNLENBQUNrZixJQUFJLENBQVhsZixLQUFNLENBQU5BLFdBREpoSCxPQUlJMEcsUUFBUSxDQUFDd2YsSUFBSSxDQUFieGYsS0FBUSxDQUFSQSxXQUVBMGYsUUFBUSxHQUNScGMsVUFBVSxDQURGLFFBUFh4SyxhQUFQO0FBV0g7O0FBRUQsU0FBZ0I2bUIsWUFBaEIsQ0FBNkJ0bEIsS0FBN0IsRUFBNkJBO0FBQ3pCO0FBRUlBLFNBQUssWUFBTEEsVUFDQSxPQUFPQSxLQUFLLENBQVosb0JBREFBLFlBRUF2QixVQUFVLENBQUN1QixLQUFLLENBRmhCQSxLQUVVLENBRlZBLElBR0F2QixVQUFVLENBQUN1QixLQUFLLENBQU47QUFMZDtBQU9IO0FDMUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJDLDJDQUEyQyxhQUFDO0FBQ3pDLE1BQUl1bEIsQ0FBQyxHQUFHam9CLFNBQVI7O0FBQ0EsTUFBSSxPQUFPaW9CLENBQUMsQ0FBUixDQUFRLENBQVIsS0FBSixhQUFpQztBQUM3QnJvQixPQUFHLGdDQUFIQSxpQ0FBRyxDQUFIQTtBQUNIO0FBSko7O0FBMkhELElBQUkseUNBQUosVUFBdUQ7QUFDbkQ7QUFDQXNvQiwrQkFBNkIsQ0FBN0JBLFdBQXlDO0FBQ3JDdFIsT0FBRyxFQURrQztBQUVyQ3VSLFVBQU0sRUFBRTtBQUNKakIsa0JBQVksRUFBWkE7QUFESSxLQUY2QjtBQUtyQ2hqQixTQUFLLEVBQUxBO0FBTHFDLEdBQXpDZ2tCO0FBT0giLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5pY2VFcnJvcnMgPSB7XG4gICAgMDogYEludmFsaWQgdmFsdWUgZm9yIGNvbmZpZ3VyYXRpb24gJ2VuZm9yY2VBY3Rpb25zJywgZXhwZWN0ZWQgJ25ldmVyJywgJ2Fsd2F5cycgb3IgJ29ic2VydmVkJ2AsXG4gICAgMShhbm5vdGF0aW9uVHlwZSwga2V5OiBQcm9wZXJ0eUtleSkge1xuICAgICAgICByZXR1cm4gYENhbm5vdCBhcHBseSAnJHthbm5vdGF0aW9uVHlwZX0nIHRvICcke2tleS50b1N0cmluZygpfSc6IEZpZWxkIG5vdCBmb3VuZC5gXG4gICAgfSxcbiAgICA1OiBcIidrZXlzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMsIHNldHMgYW5kIG1hcHNcIixcbiAgICA2OiBcIid2YWx1ZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cywgc2V0cyBhbmQgbWFwc1wiLFxuICAgIDc6IFwiJ2VudHJpZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiLFxuICAgIDg6IFwiJ3NldCgpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCBtYXBzXCIsXG4gICAgOTogXCIncmVtb3ZlKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMDogXCInaGFzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMTogXCInZ2V0KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMjogYEludmFsaWQgYW5ub3RhdGlvbmAsXG4gICAgMTM6IGBEeW5hbWljIG9ic2VydmFibGUgb2JqZWN0cyBjYW5ub3QgYmUgZnJvemVuYCxcbiAgICAxNDogXCJJbnRlcmNlcHQgaGFuZGxlcnMgc2hvdWxkIHJldHVybiBub3RoaW5nIG9yIGEgY2hhbmdlIG9iamVjdFwiLFxuICAgIDE1OiBgT2JzZXJ2YWJsZSBhcnJheXMgY2Fubm90IGJlIGZyb3plbmAsXG4gICAgMTY6IGBNb2RpZmljYXRpb24gZXhjZXB0aW9uOiB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIGFuIG9ic2VydmFibGUgYXJyYXkgd2FzIGNoYW5nZWQuYCxcbiAgICAxNyhpbmRleCwgbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBgW21vYnguYXJyYXldIEluZGV4IG91dCBvZiBib3VuZHMsICR7aW5kZXh9IGlzIGxhcmdlciB0aGFuICR7bGVuZ3RofWBcbiAgICB9LFxuICAgIDE4OiBcIm1vYngubWFwIHJlcXVpcmVzIE1hcCBwb2x5ZmlsbCBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci4gQ2hlY2sgYmFiZWwtcG9seWZpbGwgb3IgY29yZS1qcy9lczYvbWFwLmpzXCIsXG4gICAgMTkob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IGluaXRpYWxpemUgZnJvbSBjbGFzc2VzIHRoYXQgaW5oZXJpdCBmcm9tIE1hcDogXCIgKyBvdGhlci5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgfSxcbiAgICAyMChvdGhlcikge1xuICAgICAgICByZXR1cm4gXCJDYW5ub3QgaW5pdGlhbGl6ZSBtYXAgZnJvbSBcIiArIG90aGVyXG4gICAgfSxcbiAgICAyMShkYXRhU3RydWN0dXJlKSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGNvbnZlcnQgdG8gbWFwIGZyb20gJyR7ZGF0YVN0cnVjdHVyZX0nYFxuICAgIH0sXG4gICAgMjI6IFwibW9ieC5zZXQgcmVxdWlyZXMgU2V0IHBvbHlmaWxsIGZvciB0aGUgY3VycmVudCBicm93c2VyLiBDaGVjayBiYWJlbC1wb2x5ZmlsbCBvciBjb3JlLWpzL2VzNi9zZXQuanNcIixcbiAgICAyMzogXCJJdCBpcyBub3QgcG9zc2libGUgdG8gZ2V0IGluZGV4IGF0b21zIGZyb20gYXJyYXlzXCIsXG4gICAgMjQodGhpbmcpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IG9idGFpbiBhZG1pbmlzdHJhdGlvbiBmcm9tIFwiICsgdGhpbmdcbiAgICB9LFxuICAgIDI1KHByb3BlcnR5LCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBgdGhlIGVudHJ5ICcke3Byb3BlcnR5fScgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG9ic2VydmFibGUgbWFwICcke25hbWV9J2BcbiAgICB9LFxuICAgIDI2OiBcInBsZWFzZSBzcGVjaWZ5IGEgcHJvcGVydHlcIixcbiAgICAyNyhwcm9wZXJ0eSwgbmFtZSkge1xuICAgICAgICByZXR1cm4gYG5vIG9ic2VydmFibGUgcHJvcGVydHkgJyR7cHJvcGVydHkudG9TdHJpbmcoKX0nIGZvdW5kIG9uIHRoZSBvYnNlcnZhYmxlIG9iamVjdCAnJHtuYW1lfSdgXG4gICAgfSxcbiAgICAyOCh0aGluZykge1xuICAgICAgICByZXR1cm4gXCJDYW5ub3Qgb2J0YWluIGF0b20gZnJvbSBcIiArIHRoaW5nXG4gICAgfSxcbiAgICAyOTogXCJFeHBlY3Rpbmcgc29tZSBvYmplY3RcIixcbiAgICAzMDogXCJpbnZhbGlkIGFjdGlvbiBzdGFjay4gZGlkIHlvdSBmb3JnZXQgdG8gZmluaXNoIGFuIGFjdGlvbj9cIixcbiAgICAzMTogXCJtaXNzaW5nIG9wdGlvbiBmb3IgY29tcHV0ZWQ6IGdldFwiLFxuICAgIDMyKG5hbWUsIGRlcml2YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGBDeWNsZSBkZXRlY3RlZCBpbiBjb21wdXRhdGlvbiAke25hbWV9OiAke2Rlcml2YXRpb259YFxuICAgIH0sXG4gICAgMzMobmFtZSkge1xuICAgICAgICByZXR1cm4gYFRoZSBzZXR0ZXIgb2YgY29tcHV0ZWQgdmFsdWUgJyR7bmFtZX0nIGlzIHRyeWluZyB0byB1cGRhdGUgaXRzZWxmLiBEaWQgeW91IGludGVuZCB0byB1cGRhdGUgYW4gX29ic2VydmFibGVfIHZhbHVlLCBpbnN0ZWFkIG9mIHRoZSBjb21wdXRlZCBwcm9wZXJ0eT9gXG4gICAgfSxcbiAgICAzNChuYW1lKSB7XG4gICAgICAgIHJldHVybiBgW0NvbXB1dGVkVmFsdWUgJyR7bmFtZX0nXSBJdCBpcyBub3QgcG9zc2libGUgdG8gYXNzaWduIGEgbmV3IHZhbHVlIHRvIGEgY29tcHV0ZWQgdmFsdWUuYFxuICAgIH0sXG4gICAgMzU6IFwiVGhlcmUgYXJlIG11bHRpcGxlLCBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgTW9iWCBhY3RpdmUuIE1ha2Ugc3VyZSBNb2JYIGlzIGxvYWRlZCBvbmx5IG9uY2Ugb3IgdXNlIGBjb25maWd1cmUoeyBpc29sYXRlR2xvYmFsU3RhdGU6IHRydWUgfSlgXCIsXG4gICAgMzY6IFwiaXNvbGF0ZUdsb2JhbFN0YXRlIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIE1vYlggaXMgcnVubmluZyBhbnkgcmVhY3Rpb25zXCIsXG4gICAgMzcobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBgW21vYnhdIFxcYG9ic2VydmFibGVBcnJheS4ke21ldGhvZH0oKVxcYCBtdXRhdGVzIHRoZSBhcnJheSBpbi1wbGFjZSwgd2hpY2ggaXMgbm90IGFsbG93ZWQgaW5zaWRlIGEgZGVyaXZhdGlvbi4gVXNlIFxcYGFycmF5LnNsaWNlKCkuJHttZXRob2R9KClcXGAgaW5zdGVhZGBcbiAgICB9XG59IGFzIGNvbnN0XG5cbmNvbnN0IGVycm9yczogdHlwZW9mIG5pY2VFcnJvcnMgPSBfX0RFVl9fID8gbmljZUVycm9ycyA6ICh7fSBhcyBhbnkpXG5cbmV4cG9ydCBmdW5jdGlvbiBkaWUoZXJyb3I6IHN0cmluZyB8IGtleW9mIHR5cGVvZiBlcnJvcnMsIC4uLmFyZ3M6IGFueVtdKTogbmV2ZXIge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGxldCBlOiBhbnkgPSB0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIgPyBlcnJvciA6IGVycm9yc1tlcnJvcl1cbiAgICAgICAgaWYgKHR5cGVvZiBlID09PSBcImZ1bmN0aW9uXCIpIGUgPSBlLmFwcGx5KG51bGwsIGFyZ3MgYXMgYW55KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFtNb2JYXSAke2V9YClcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICB0eXBlb2YgZXJyb3IgPT09IFwibnVtYmVyXCJcbiAgICAgICAgICAgID8gYFtNb2JYXSBtaW5pZmllZCBlcnJvciBucjogJHtlcnJvcn0ke1xuICAgICAgICAgICAgICAgICAgYXJncy5sZW5ndGggPyBcIiBcIiArIGFyZ3MubWFwKFN0cmluZykuam9pbihcIixcIikgOiBcIlwiXG4gICAgICAgICAgICAgIH0uIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9ibG9iL21haW4vcGFja2FnZXMvbW9ieC9zcmMvZXJyb3JzLnRzYFxuICAgICAgICAgICAgOiBgW01vYlhdICR7ZXJyb3J9YFxuICAgIClcbn1cbiIsImRlY2xhcmUgY29uc3Qgd2luZG93OiBhbnlcbmRlY2xhcmUgY29uc3Qgc2VsZjogYW55XG5cbmNvbnN0IG1vY2tHbG9iYWwgPSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpc1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gd2luZG93XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBzZWxmXG4gICAgfVxuICAgIHJldHVybiBtb2NrR2xvYmFsXG59XG4iLCJpbXBvcnQgeyBnbG9iYWxTdGF0ZSwgZGllIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLy8gV2Ugc2hvcnRlbiBhbnl0aGluZyB1c2VkID4gNSB0aW1lc1xuZXhwb3J0IGNvbnN0IGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cbmV4cG9ydCBjb25zdCBnZXREZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvclxuZXhwb3J0IGNvbnN0IGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG5leHBvcnQgY29uc3Qgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZVxuXG5leHBvcnQgY29uc3QgRU1QVFlfQVJSQVkgPSBbXVxuT2JqZWN0LmZyZWV6ZShFTVBUWV9BUlJBWSlcblxuZXhwb3J0IGNvbnN0IEVNUFRZX09CSkVDVCA9IHt9XG5PYmplY3QuZnJlZXplKEVNUFRZX09CSkVDVClcblxuZXhwb3J0IGludGVyZmFjZSBMYW1iZGEge1xuICAgICgpOiB2b2lkXG4gICAgbmFtZT86IHN0cmluZ1xufVxuXG5jb25zdCBoYXNQcm94eSA9IHR5cGVvZiBQcm94eSAhPT0gXCJ1bmRlZmluZWRcIlxuY29uc3QgcGxhaW5PYmplY3RTdHJpbmcgPSBPYmplY3QudG9TdHJpbmcoKVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UHJveGllcygpIHtcbiAgICBpZiAoIWhhc1Byb3h5KSB7XG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIF9fREVWX19cbiAgICAgICAgICAgICAgICA/IFwiYFByb3h5YCBvYmplY3RzIGFyZSBub3QgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiBQbGVhc2UgY29uZmlndXJlIE1vYlggdG8gZW5hYmxlIGEgZmFsbGJhY2sgaW1wbGVtZW50YXRpb24uYFwiXG4gICAgICAgICAgICAgICAgOiBcIlByb3h5IG5vdCBhdmFpbGFibGVcIlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChtc2c6IHN0cmluZykge1xuICAgIGlmIChfX0RFVl9fICYmIGdsb2JhbFN0YXRlLnZlcmlmeVByb3hpZXMpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgXCJNb2JYIGlzIGN1cnJlbnRseSBjb25maWd1cmVkIHRvIGJlIGFibGUgdG8gcnVuIGluIEVTNSBtb2RlLCBidXQgaW4gRVM1IE1vYlggd29uJ3QgYmUgYWJsZSB0byBcIiArXG4gICAgICAgICAgICAgICAgbXNnXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0SWQoKSB7XG4gICAgcmV0dXJuICsrZ2xvYmFsU3RhdGUubW9ieEd1aWRcbn1cblxuLyoqXG4gKiBNYWtlcyBzdXJlIHRoYXQgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGlzIGludm9rZWQgYXQgbW9zdCBvbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25jZShmdW5jOiBMYW1iZGEpOiBMYW1iZGEge1xuICAgIGxldCBpbnZva2VkID0gZmFsc2VcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW52b2tlZCkgcmV0dXJuXG4gICAgICAgIGludm9rZWQgPSB0cnVlXG4gICAgICAgIHJldHVybiAoZnVuYyBhcyBhbnkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBub29wID0gKCkgPT4ge31cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oZm46IGFueSk6IGZuIGlzIEZ1bmN0aW9uIHtcbiAgICByZXR1cm4gdHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBzdHJpbmcge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5naXNoKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2wge1xuICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWVcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IGFueSk6IHZhbHVlIGlzIE9iamVjdCB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSByZXR1cm4gZmFsc2VcbiAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSlcbiAgICBpZiAocHJvdG8gPT0gbnVsbCkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gcHJvdG8uY29uc3RydWN0b3I/LnRvU3RyaW5nKCkgPT09IHBsYWluT2JqZWN0U3RyaW5nXG59XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNzg2NTE3MFxuZXhwb3J0IGZ1bmN0aW9uIGlzR2VuZXJhdG9yKG9iajogYW55KTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29uc3RydWN0b3IgPSBvYmo/LmNvbnN0cnVjdG9yXG4gICAgaWYgKCFjb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlXG4gICAgaWYgKFwiR2VuZXJhdG9yRnVuY3Rpb25cIiA9PT0gY29uc3RydWN0b3IubmFtZSB8fCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgPT09IGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkSGlkZGVuUHJvcChvYmplY3Q6IGFueSwgcHJvcE5hbWU6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wTmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWVcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkSGlkZGVuRmluYWxQcm9wKG9iamVjdDogYW55LCBwcm9wTmFtZTogUHJvcGVydHlLZXksIHZhbHVlOiBhbnkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BOYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWVcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZTxUPihcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdGhlQ2xhc3M6IG5ldyAoLi4uYXJnczogYW55W10pID0+IFRcbik6ICh4OiBhbnkpID0+IHggaXMgVCB7XG4gICAgY29uc3QgcHJvcE5hbWUgPSBcImlzTW9iWFwiICsgbmFtZVxuICAgIHRoZUNsYXNzLnByb3RvdHlwZVtwcm9wTmFtZV0gPSB0cnVlXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBpc09iamVjdCh4KSAmJiB4W3Byb3BOYW1lXSA9PT0gdHJ1ZVxuICAgIH0gYXMgYW55XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VTNk1hcCh0aGluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIE1hcFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFUzZTZXQodGhpbmcpOiB0aGluZyBpcyBTZXQ8YW55PiB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgU2V0XG59XG5cbmNvbnN0IGhhc0dldE93blByb3BlcnR5U3ltYm9scyA9IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSBcInVuZGVmaW5lZFwiXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZm9sbG93aW5nOiBvd24gZW51bWVyYWJsZSBrZXlzIGFuZCBzeW1ib2xzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGxhaW5PYmplY3RLZXlzKG9iamVjdCkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpXG4gICAgLy8gTm90IHN1cHBvcnRlZCBpbiBJRSwgc28gdGhlcmUgYXJlIG5vdCBnb2luZyB0byBiZSBzeW1ib2wgcHJvcHMgYW55d2F5Li4uXG4gICAgaWYgKCFoYXNHZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHJldHVybiBrZXlzXG4gICAgY29uc3Qgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KVxuICAgIGlmICghc3ltYm9scy5sZW5ndGgpIHJldHVybiBrZXlzXG4gICAgcmV0dXJuIFsuLi5rZXlzLCAuLi5zeW1ib2xzLmZpbHRlcihzID0+IG9iamVjdFByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgcykpXVxufVxuXG4vLyBGcm9tIEltbWVyIHV0aWxzXG4vLyBSZXR1cm5zIGFsbCBvd24ga2V5cywgaW5jbHVkaW5nIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xpY1xuZXhwb3J0IGNvbnN0IG93bktleXM6ICh0YXJnZXQ6IGFueSkgPT4gUHJvcGVydHlLZXlbXSA9XG4gICAgdHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5vd25LZXlzXG4gICAgICAgID8gUmVmbGVjdC5vd25LZXlzXG4gICAgICAgIDogaGFzR2V0T3duUHJvcGVydHlTeW1ib2xzXG4gICAgICAgID8gb2JqID0+IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKSBhcyBhbnkpXG4gICAgICAgIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeUtleShrZXk6IGFueSk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpIHJldHVybiBrZXlcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIikgcmV0dXJuIGtleS50b1N0cmluZygpXG4gICAgcmV0dXJuIG5ldyBTdHJpbmcoa2V5KS50b1N0cmluZygpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgPyBcIlwiICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzUHJvcCh0YXJnZXQ6IE9iamVjdCwgcHJvcDogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gb2JqZWN0UHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcm9wKVxufVxuXG4vLyBGcm9tIEltbWVyIHV0aWxzXG5leHBvcnQgY29uc3QgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgfHxcbiAgICBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRhcmdldDogYW55KSB7XG4gICAgICAgIC8vIFBvbHlmaWxsIG5lZWRlZCBmb3IgSGVybWVzIGFuZCBJRSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9oZXJtZXMvaXNzdWVzLzI3NFxuICAgICAgICBjb25zdCByZXM6IGFueSA9IHt9XG4gICAgICAgIC8vIE5vdGU6IHdpdGhvdXQgcG9seWZpbGwgZm9yIG93bktleXMsIHN5bWJvbHMgd29uJ3QgYmUgcGlja2VkIHVwXG4gICAgICAgIG93bktleXModGFyZ2V0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICByZXNba2V5XSA9IGdldERlc2NyaXB0b3IodGFyZ2V0LCBrZXkpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9XG4iLCJpbXBvcnQgeyBBbm5vdGF0aW9uLCBhZGRIaWRkZW5Qcm9wLCBBbm5vdGF0aW9uc01hcCwgaGFzUHJvcCwgZGllLCBpc092ZXJyaWRlIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGNvbnN0IHN0b3JlZEFubm90YXRpb25zU3ltYm9sID0gU3ltYm9sKFwibW9ieC1zdG9yZWQtYW5ub3RhdGlvbnNcIilcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY3RzIGFzXG4gKiAtIGRlY29yYXRvclxuICogLSBhbm5vdGF0aW9uIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbihhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogUHJvcGVydHlEZWNvcmF0b3IgJiBBbm5vdGF0aW9uIHtcbiAgICBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgICAgICBzdG9yZUFubm90YXRpb24odGFyZ2V0LCBwcm9wZXJ0eSwgYW5ub3RhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVjb3JhdG9yLCBhbm5vdGF0aW9uKVxufVxuXG4vKipcbiAqIFN0b3JlcyBhbm5vdGF0aW9uIHRvIHByb3RvdHlwZSxcbiAqIHNvIGl0IGNhbiBiZSBpbnNwZWN0ZWQgbGF0ZXIgYnkgYG1ha2VPYnNlcnZhYmxlYCBjYWxsZWQgZnJvbSBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcmVBbm5vdGF0aW9uKHByb3RvdHlwZTogYW55LCBrZXk6IFByb3BlcnR5S2V5LCBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKSB7XG4gICAgaWYgKCFoYXNQcm9wKHByb3RvdHlwZSwgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wpKSB7XG4gICAgICAgIGFkZEhpZGRlblByb3AocHJvdG90eXBlLCBzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbCwge1xuICAgICAgICAgICAgLy8gSW5oZXJpdCBhbm5vdGF0aW9uc1xuICAgICAgICAgICAgLi4ucHJvdG90eXBlW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXVxuICAgICAgICB9KVxuICAgIH1cbiAgICAvLyBAb3ZlcnJpZGUgbXVzdCBvdmVycmlkZSBzb21ldGhpbmdcbiAgICBpZiAoX19ERVZfXyAmJiBpc092ZXJyaWRlKGFubm90YXRpb24pICYmICFoYXNQcm9wKHByb3RvdHlwZVtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF0sIGtleSkpIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYCR7cHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWV9LnByb3RvdHlwZS4ke2tleS50b1N0cmluZygpfWBcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYCcke2ZpZWxkTmFtZX0nIGlzIGRlY29yYXRlZCB3aXRoICdvdmVycmlkZScsIGAgK1xuICAgICAgICAgICAgICAgIGBidXQgbm8gc3VjaCBkZWNvcmF0ZWQgbWVtYmVyIHdhcyBmb3VuZCBvbiBwcm90b3R5cGUuYFxuICAgICAgICApXG4gICAgfVxuICAgIC8vIENhbm5vdCByZS1kZWNvcmF0ZVxuICAgIGFzc2VydE5vdERlY29yYXRlZChwcm90b3R5cGUsIGFubm90YXRpb24sIGtleSlcblxuICAgIC8vIElnbm9yZSBvdmVycmlkZVxuICAgIGlmICghaXNPdmVycmlkZShhbm5vdGF0aW9uKSkge1xuICAgICAgICBwcm90b3R5cGVbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdW2tleV0gPSBhbm5vdGF0aW9uXG4gICAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnROb3REZWNvcmF0ZWQocHJvdG90eXBlOiBvYmplY3QsIGFubm90YXRpb246IEFubm90YXRpb24sIGtleTogUHJvcGVydHlLZXkpIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhaXNPdmVycmlkZShhbm5vdGF0aW9uKSAmJiBoYXNQcm9wKHByb3RvdHlwZVtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF0sIGtleSkpIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYCR7cHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWV9LnByb3RvdHlwZS4ke2tleS50b1N0cmluZygpfWBcbiAgICAgICAgY29uc3QgY3VycmVudEFubm90YXRpb25UeXBlID0gcHJvdG90eXBlW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXVtrZXldLmFubm90YXRpb25UeXBlX1xuICAgICAgICBjb25zdCByZXF1ZXN0ZWRBbm5vdGF0aW9uVHlwZSA9IGFubm90YXRpb24uYW5ub3RhdGlvblR5cGVfXG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGBDYW5ub3QgYXBwbHkgJ0Ake3JlcXVlc3RlZEFubm90YXRpb25UeXBlfScgdG8gJyR7ZmllbGROYW1lfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcblRoZSBmaWVsZCBpcyBhbHJlYWR5IGRlY29yYXRlZCB3aXRoICdAJHtjdXJyZW50QW5ub3RhdGlvblR5cGV9Jy5gICtcbiAgICAgICAgICAgICAgICBgXFxuUmUtZGVjb3JhdGluZyBmaWVsZHMgaXMgbm90IGFsbG93ZWQuYCArXG4gICAgICAgICAgICAgICAgYFxcblVzZSAnQG92ZXJyaWRlJyBkZWNvcmF0b3IgZm9yIG1ldGhvZHMgb3ZlcnJpZGVuIGJ5IHN1YmNsYXNzLmBcbiAgICAgICAgKVxuICAgIH1cbn1cblxuLyoqXG4gKiBDb2xsZWN0cyBhbm5vdGF0aW9ucyBmcm9tIHByb3RvdHlwZXMgYW5kIHN0b3JlcyB0aGVtIG9uIHRhcmdldCAoaW5zdGFuY2UpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnModGFyZ2V0KTogQW5ub3RhdGlvbnNNYXA8YW55LCBhbnk+IHtcbiAgICBpZiAoIWhhc1Byb3AodGFyZ2V0LCBzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbCkpIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgIXRhcmdldFtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF0pIHtcbiAgICAgICAgICAgIGRpZShcbiAgICAgICAgICAgICAgICBgTm8gYW5ub3RhdGlvbnMgd2VyZSBwYXNzZWQgdG8gbWFrZU9ic2VydmFibGUsIGJ1dCBubyBkZWNvcmF0ZWQgbWVtYmVycyBoYXZlIGJlZW4gZm91bmQgZWl0aGVyYFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlIG5lZWQgYSBjb3B5IGFzIHdlIHdpbGwgcmVtb3ZlIGFubm90YXRpb24gZnJvbSB0aGUgbGlzdCBvbmNlIGl0J3MgYXBwbGllZC5cbiAgICAgICAgYWRkSGlkZGVuUHJvcCh0YXJnZXQsIHN0b3JlZEFubm90YXRpb25zU3ltYm9sLCB7IC4uLnRhcmdldFtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF0gfSlcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF1cbn1cbiIsImltcG9ydCB7XG4gICAgSURlcml2YXRpb25TdGF0ZV8sXG4gICAgSU9ic2VydmFibGUsXG4gICAgSURlcml2YXRpb24sXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBlbmRCYXRjaCxcbiAgICBnZXROZXh0SWQsXG4gICAgbm9vcCxcbiAgICBvbkJlY29tZU9ic2VydmVkLFxuICAgIG9uQmVjb21lVW5vYnNlcnZlZCxcbiAgICBwcm9wYWdhdGVDaGFuZ2VkLFxuICAgIHJlcG9ydE9ic2VydmVkLFxuICAgIHN0YXJ0QmF0Y2gsXG4gICAgTGFtYmRhXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBjb25zdCAkbW9ieCA9IFN5bWJvbChcIm1vYnggYWRtaW5pc3RyYXRpb25cIilcblxuZXhwb3J0IGludGVyZmFjZSBJQXRvbSBleHRlbmRzIElPYnNlcnZhYmxlIHtcbiAgICByZXBvcnRPYnNlcnZlZCgpXG4gICAgcmVwb3J0Q2hhbmdlZCgpXG59XG5cbmV4cG9ydCBjbGFzcyBBdG9tIGltcGxlbWVudHMgSUF0b20ge1xuICAgIGlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fID0gZmFsc2UgLy8gZm9yIGVmZmVjdGl2ZSB1bm9ic2VydmluZy4gQmFzZUF0b20gaGFzIHRydWUsIGZvciBleHRyYSBvcHRpbWl6YXRpb24sIHNvIGl0cyBvbkJlY29tZVVub2JzZXJ2ZWQgbmV2ZXIgZ2V0cyBjYWxsZWQsIGJlY2F1c2UgaXQncyBub3QgbmVlZGVkXG4gICAgaXNCZWluZ09ic2VydmVkXyA9IGZhbHNlXG4gICAgb2JzZXJ2ZXJzXyA9IG5ldyBTZXQ8SURlcml2YXRpb24+KClcblxuICAgIGRpZmZWYWx1ZV8gPSAwXG4gICAgbGFzdEFjY2Vzc2VkQnlfID0gMFxuICAgIGxvd2VzdE9ic2VydmVyU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HX1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBhdG9tLiBGb3IgZGVidWdnaW5nIHB1cnBvc2VzIGl0IGlzIHJlY29tbWVuZGVkIHRvIGdpdmUgaXQgYSBuYW1lLlxuICAgICAqIFRoZSBvbkJlY29tZU9ic2VydmVkIGFuZCBvbkJlY29tZVVub2JzZXJ2ZWQgY2FsbGJhY2tzIGNhbiBiZSB1c2VkIGZvciByZXNvdXJjZSBtYW5hZ2VtZW50LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lXyA9IF9fREVWX18gPyBcIkF0b21AXCIgKyBnZXROZXh0SWQoKSA6IFwiQXRvbVwiKSB7fVxuXG4gICAgLy8gb25CZWNvbWVPYnNlcnZlZExpc3RlbmVyc1xuICAgIHB1YmxpYyBvbkJPTDogU2V0PExhbWJkYT4gfCB1bmRlZmluZWRcbiAgICAvLyBvbkJlY29tZVVub2JzZXJ2ZWRMaXN0ZW5lcnNcbiAgICBwdWJsaWMgb25CVU9MOiBTZXQ8TGFtYmRhPiB8IHVuZGVmaW5lZFxuXG4gICAgcHVibGljIG9uQk8oKSB7XG4gICAgICAgIGlmICh0aGlzLm9uQk9MKSB7XG4gICAgICAgICAgICB0aGlzLm9uQk9MLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvbkJVTygpIHtcbiAgICAgICAgaWYgKHRoaXMub25CVU9MKSB7XG4gICAgICAgICAgICB0aGlzLm9uQlVPTC5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKCkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2UgdGhpcyBtZXRob2QgdG8gbm90aWZ5IG1vYnggdGhhdCB5b3VyIGF0b20gaGFzIGJlZW4gdXNlZCBzb21laG93LlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBjdXJyZW50bHkgYSByZWFjdGl2ZSBjb250ZXh0LlxuICAgICAqL1xuICAgIHB1YmxpYyByZXBvcnRPYnNlcnZlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHJlcG9ydE9ic2VydmVkKHRoaXMpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIF9hZnRlcl8gdGhpcyBtZXRob2QgaGFzIGNoYW5nZWQgdG8gc2lnbmFsIG1vYnggdGhhdCBhbGwgaXRzIG9ic2VydmVycyBzaG91bGQgaW52YWxpZGF0ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVwb3J0Q2hhbmdlZCgpIHtcbiAgICAgICAgc3RhcnRCYXRjaCgpXG4gICAgICAgIHByb3BhZ2F0ZUNoYW5nZWQodGhpcylcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lX1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzQXRvbSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJBdG9tXCIsIEF0b20pXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBdG9tKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBvbkJlY29tZU9ic2VydmVkSGFuZGxlcjogKCkgPT4gdm9pZCA9IG5vb3AsXG4gICAgb25CZWNvbWVVbm9ic2VydmVkSGFuZGxlcjogKCkgPT4gdm9pZCA9IG5vb3Bcbik6IElBdG9tIHtcbiAgICBjb25zdCBhdG9tID0gbmV3IEF0b20obmFtZSlcbiAgICAvLyBkZWZhdWx0IGBub29wYCBsaXN0ZW5lciB3aWxsIG5vdCBpbml0aWFsaXplIHRoZSBob29rIFNldFxuICAgIGlmIChvbkJlY29tZU9ic2VydmVkSGFuZGxlciAhPT0gbm9vcCkge1xuICAgICAgICBvbkJlY29tZU9ic2VydmVkKGF0b20sIG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyKVxuICAgIH1cblxuICAgIGlmIChvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyICE9PSBub29wKSB7XG4gICAgICAgIG9uQmVjb21lVW5vYnNlcnZlZChhdG9tLCBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyKVxuICAgIH1cbiAgICByZXR1cm4gYXRvbVxufVxuIiwiaW1wb3J0IHsgZGVlcEVxdWFsIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJRXF1YWxzQ29tcGFyZXI8VD4ge1xuICAgIChhOiBULCBiOiBUKTogYm9vbGVhblxufVxuXG5mdW5jdGlvbiBpZGVudGl0eUNvbXBhcmVyKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGEgPT09IGJcbn1cblxuZnVuY3Rpb24gc3RydWN0dXJhbENvbXBhcmVyKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGRlZXBFcXVhbChhLCBiKVxufVxuXG5mdW5jdGlvbiBzaGFsbG93Q29tcGFyZXIoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIsIDEpXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlcihhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBPYmplY3QuaXMoYSwgYilcbn1cblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVyID0ge1xuICAgIGlkZW50aXR5OiBpZGVudGl0eUNvbXBhcmVyLFxuICAgIHN0cnVjdHVyYWw6IHN0cnVjdHVyYWxDb21wYXJlcixcbiAgICBkZWZhdWx0OiBkZWZhdWx0Q29tcGFyZXIsXG4gICAgc2hhbGxvdzogc2hhbGxvd0NvbXBhcmVyXG59XG4iLCJpbXBvcnQge1xuICAgIGRlZXBFcXVhbCxcbiAgICBpc0VTNk1hcCxcbiAgICBpc0VTNlNldCxcbiAgICBpc09ic2VydmFibGUsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBvYnNlcnZhYmxlLFxuICAgIGRpZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElFbmhhbmNlcjxUPiB7XG4gICAgKG5ld1ZhbHVlOiBULCBvbGRWYWx1ZTogVCB8IHVuZGVmaW5lZCwgbmFtZTogc3RyaW5nKTogVFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVlcEVuaGFuY2VyKHYsIF8sIG5hbWUpIHtcbiAgICAvLyBpdCBpcyBhbiBvYnNlcnZhYmxlIGFscmVhZHksIGRvbmVcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHYpKSByZXR1cm4gdlxuXG4gICAgLy8gc29tZXRoaW5nIHRoYXQgY2FuIGJlIGNvbnZlcnRlZCBhbmQgbXV0YXRlZD9cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkgcmV0dXJuIG9ic2VydmFibGUuYXJyYXkodiwgeyBuYW1lIH0pXG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpIHJldHVybiBvYnNlcnZhYmxlLm9iamVjdCh2LCB1bmRlZmluZWQsIHsgbmFtZSB9KVxuICAgIGlmIChpc0VTNk1hcCh2KSkgcmV0dXJuIG9ic2VydmFibGUubWFwKHYsIHsgbmFtZSB9KVxuICAgIGlmIChpc0VTNlNldCh2KSkgcmV0dXJuIG9ic2VydmFibGUuc2V0KHYsIHsgbmFtZSB9KVxuXG4gICAgcmV0dXJuIHZcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFbmhhbmNlcih2LCBfLCBuYW1lKTogYW55IHtcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpIHJldHVybiB2XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2KSB8fCBpc09ic2VydmFibGVBcnJheSh2KSB8fCBpc09ic2VydmFibGVNYXAodikgfHwgaXNPYnNlcnZhYmxlU2V0KHYpKVxuICAgICAgICByZXR1cm4gdlxuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSByZXR1cm4gb2JzZXJ2YWJsZS5hcnJheSh2LCB7IG5hbWUsIGRlZXA6IGZhbHNlIH0pXG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpIHJldHVybiBvYnNlcnZhYmxlLm9iamVjdCh2LCB1bmRlZmluZWQsIHsgbmFtZSwgZGVlcDogZmFsc2UgfSlcbiAgICBpZiAoaXNFUzZNYXAodikpIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCB7IG5hbWUsIGRlZXA6IGZhbHNlIH0pXG4gICAgaWYgKGlzRVM2U2V0KHYpKSByZXR1cm4gb2JzZXJ2YWJsZS5zZXQodiwgeyBuYW1lLCBkZWVwOiBmYWxzZSB9KVxuXG4gICAgaWYgKF9fREVWX18pXG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIFwiVGhlIHNoYWxsb3cgbW9kaWZpZXIgLyBkZWNvcmF0b3IgY2FuIG9ubHkgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGFycmF5cywgb2JqZWN0cywgbWFwcyBhbmQgc2V0c1wiXG4gICAgICAgIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZmVyZW5jZUVuaGFuY2VyKG5ld1ZhbHVlPykge1xuICAgIC8vIG5ldmVyIHR1cm4gaW50byBhbiBvYnNlcnZhYmxlXG4gICAgcmV0dXJuIG5ld1ZhbHVlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZTdHJ1Y3RFbmhhbmNlcih2LCBvbGRWYWx1ZSk6IGFueSB7XG4gICAgaWYgKF9fREVWX18gJiYgaXNPYnNlcnZhYmxlKHYpKVxuICAgICAgICBkaWUoYG9ic2VydmFibGUuc3RydWN0IHNob3VsZCBub3QgYmUgdXNlZCB3aXRoIG9ic2VydmFibGUgdmFsdWVzYClcbiAgICBpZiAoZGVlcEVxdWFsKHYsIG9sZFZhbHVlKSkgcmV0dXJuIG9sZFZhbHVlXG4gICAgcmV0dXJuIHZcbn1cbiIsImltcG9ydCB7XG4gICAgZGllLFxuICAgIEFubm90YXRpb24sXG4gICAgaGFzUHJvcCxcbiAgICBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uLFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBPVkVSUklERSA9IFwib3ZlcnJpZGVcIlxuXG5leHBvcnQgY29uc3Qgb3ZlcnJpZGU6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvciA9IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oe1xuICAgIGFubm90YXRpb25UeXBlXzogT1ZFUlJJREUsXG4gICAgbWFrZV8sXG4gICAgZXh0ZW5kX1xufSlcblxuZXhwb3J0IGZ1bmN0aW9uIGlzT3ZlcnJpZGUoYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlXyA9PT0gT1ZFUlJJREVcbn1cblxuZnVuY3Rpb24gbWFrZV8oYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sIGtleSk6IHZvaWQge1xuICAgIC8vIE11c3Qgbm90IGJlIHBsYWluIG9iamVjdFxuICAgIGlmIChfX0RFVl9fICYmIGFkbS5pc1BsYWluT2JqZWN0Xykge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke3RoaXMuYW5ub3RhdGlvblR5cGVffScgdG8gJyR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcbicke3RoaXMuYW5ub3RhdGlvblR5cGVffScgY2Fubm90IGJlIHVzZWQgb24gcGxhaW4gb2JqZWN0cy5gXG4gICAgICAgIClcbiAgICB9XG4gICAgLy8gTXVzdCBvdmVycmlkZSBzb21ldGhpbmdcbiAgICBpZiAoX19ERVZfXyAmJiAhaGFzUHJvcChhZG0uYXBwbGllZEFubm90YXRpb25zXyEsIGtleSkpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYCcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nIGlzIGFubm90YXRlZCB3aXRoICcke3RoaXMuYW5ub3RhdGlvblR5cGVffScsIGAgK1xuICAgICAgICAgICAgICAgIGBidXQgbm8gc3VjaCBhbm5vdGF0ZWQgbWVtYmVyIHdhcyBmb3VuZCBvbiBwcm90b3R5cGUuYFxuICAgICAgICApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBwcm94eVRyYXApOiBib29sZWFuIHtcbiAgICBkaWUoYCcke3RoaXMuYW5ub3RhdGlvblR5cGVffScgY2FuIG9ubHkgYmUgdXNlZCB3aXRoICdtYWtlT2JzZXJ2YWJsZSdgKVxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgY3JlYXRlQWN0aW9uLFxuICAgIGlzQWN0aW9uLFxuICAgIGRlZmluZVByb3BlcnR5LFxuICAgIGdldERlc2NyaXB0b3IsXG4gICAgb2JqZWN0UHJvdG90eXBlLFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIEFubm90YXRpb24sXG4gICAgcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbkFubm90YXRpb24obmFtZTogc3RyaW5nLCBvcHRpb25zPzogb2JqZWN0KTogQW5ub3RhdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW5ub3RhdGlvblR5cGVfOiBuYW1lLFxuICAgICAgICBvcHRpb25zXzogb3B0aW9ucyxcbiAgICAgICAgbWFrZV8sXG4gICAgICAgIGV4dGVuZF9cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfKGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLCBrZXk6IFByb3BlcnR5S2V5KTogdm9pZCB7XG4gICAgbGV0IGFubm90YXRlZCA9IGZhbHNlXG4gICAgbGV0IHNvdXJjZSA9IGFkbS50YXJnZXRfXG4gICAgbGV0IGJvdW5kID0gdGhpcy5vcHRpb25zXz8uYm91bmQgPz8gZmFsc2VcbiAgICB3aGlsZSAoc291cmNlICYmIHNvdXJjZSAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBnZXREZXNjcmlwdG9yKHNvdXJjZSwga2V5KVxuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgLy8gSW5zdGFuY2Ugb3IgYm91bmRcbiAgICAgICAgICAgIC8vIEtlZXAgZmlyc3QgYmVjYXVzZSB0aGUgb3BlcmF0aW9uIGNhbiBiZSBpbnRlcmNlcHRlZFxuICAgICAgICAgICAgLy8gYW5kIHdlIGRvbid0IHdhbnQgdG8gZW5kIHVwIHdpdGggcGFydGlhbGx5IGFubm90YXRlZCBwcm90byBjaGFpblxuICAgICAgICAgICAgaWYgKHNvdXJjZSA9PT0gYWRtLnRhcmdldF8gfHwgYm91bmQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25EZXNjcmlwdG9yID0gY3JlYXRlQWN0aW9uRGVzY3JpcHRvcihhZG0sIHRoaXMsIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZpbmVQcm9wZXJ0eU91dGNvbWUgPSBhZG0uZGVmaW5lUHJvcGVydHlfKGtleSwgYWN0aW9uRGVzY3JpcHRvcilcbiAgICAgICAgICAgICAgICBpZiAoIWRlZmluZVByb3BlcnR5T3V0Y29tZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbnRlcmNlcHRlZFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5ub3RhdGVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIC8vIERvbid0IGFubm90YXRlIHByb3RvcyBpZiBib3VuZFxuICAgICAgICAgICAgICAgIGlmIChib3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByb3RvdHlwZVxuICAgICAgICAgICAgaWYgKHNvdXJjZSAhPT0gYWRtLnRhcmdldF8pIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNBY3Rpb24oZGVzY3JpcHRvci52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBwcm90b3R5cGUgY291bGQgaGF2ZSBiZWVuIGFubm90YXRlZCBhbHJlYWR5IGJ5IG90aGVyIGNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgICAgICAgICAvLyByZXN0IG9mIHRoZSBwcm90byBjaGFpbiBtdXN0IGJlIGFubm90YXRlZCBhbHJlYWR5XG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uRGVzY3JpcHRvciA9IGNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKVxuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHNvdXJjZSwga2V5LCBhY3Rpb25EZXNjcmlwdG9yKVxuICAgICAgICAgICAgICAgIGFubm90YXRlZCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKVxuICAgIH1cbiAgICBpZiAoYW5ub3RhdGVkKSB7XG4gICAgICAgIHJlY29yZEFubm90YXRpb25BcHBsaWVkKGFkbSwgdGhpcywga2V5KVxuICAgIH0gZWxzZSBpZiAoIWFkbS50YXJnZXRfW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXT8uW2tleV0pIHtcbiAgICAgICAgLy8gVGhyb3cgb24gbWlzc2luZyBrZXksIGV4Y2VwdCBmb3IgZGVjb3JhdG9yczpcbiAgICAgICAgLy8gRGVjb3JhdG9yIGFubm90YXRpb25zIGFyZSBjb2xsZWN0ZWQgZnJvbSB3aG9sZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgIC8vIFdoZW4gY2FsbGVkIGZyb20gc3VwZXIoKSBzb21lIHByb3BzIG1heSBub3QgZXhpc3QgeWV0LlxuICAgICAgICAvLyBIb3dldmVyIHdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgbWlzc2luZyBwcm9wLFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBkZWNvcmF0b3IgbXVzdCBoYXZlIGJlZW4gYXBwbGllZCB0byBzb21ldGhpbmcuXG4gICAgICAgIGRpZSgxLCB0aGlzLmFubm90YXRpb25UeXBlXywgYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByb3h5VHJhcDogYm9vbGVhblxuKTogYm9vbGVhbiB8IG51bGwge1xuICAgIGNvbnN0IGFjdGlvbkRlc2NyaXB0b3IgPSBjcmVhdGVBY3Rpb25EZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yKVxuICAgIHJldHVybiBhZG0uZGVmaW5lUHJvcGVydHlfKGtleSwgYWN0aW9uRGVzY3JpcHRvciwgcHJveHlUcmFwKVxufVxuXG5mdW5jdGlvbiBhc3NlcnRBY3Rpb25EZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIHsgYW5ub3RhdGlvblR5cGVfIH06IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICB7IHZhbHVlIH06IFByb3BlcnR5RGVzY3JpcHRvclxuKSB7XG4gICAgaWYgKF9fREVWX18gJiYgIWlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGBDYW5ub3QgYXBwbHkgJyR7YW5ub3RhdGlvblR5cGVffScgdG8gJyR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcbicke2Fubm90YXRpb25UeXBlX30nIGNhbiBvbmx5IGJlIHVzZWQgb24gcHJvcGVydGllcyB3aXRoIGEgZnVuY3Rpb24gdmFsdWUuYFxuICAgICAgICApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb25EZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGFubm90YXRpb246IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgLy8gcHJvdmlkZXMgYWJpbGl0eSB0byBkaXNhYmxlIHNhZmVEZXNjcmlwdG9ycyBmb3IgcHJvdG90eXBlc1xuICAgIHNhZmVEZXNjcmlwdG9yczogYm9vbGVhbiA9IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9yc1xuKSB7XG4gICAgYXNzZXJ0QWN0aW9uRGVzY3JpcHRvcihhZG0sIGFubm90YXRpb24sIGtleSwgZGVzY3JpcHRvcilcbiAgICBsZXQgeyB2YWx1ZSB9ID0gZGVzY3JpcHRvclxuICAgIGlmIChhbm5vdGF0aW9uLm9wdGlvbnNfPy5ib3VuZCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmJpbmQoYWRtLnByb3h5XyA/PyBhZG0udGFyZ2V0XylcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGNyZWF0ZUFjdGlvbihcbiAgICAgICAgICAgIGFubm90YXRpb24ub3B0aW9uc18/Lm5hbWUgPz8ga2V5LnRvU3RyaW5nKCksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGFubm90YXRpb24ub3B0aW9uc18/LmF1dG9BY3Rpb24gPz8gZmFsc2VcbiAgICAgICAgKSxcbiAgICAgICAgLy8gTm9uLWNvbmZpZ3VyYWJsZSBmb3IgY2xhc3Nlc1xuICAgICAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsIGZpZWxkIHJlZGVmaW5pdGlvbiBpbiBzdWJjbGFzc1xuICAgICAgICBjb25maWd1cmFibGU6IHNhZmVEZXNjcmlwdG9ycyA/IGFkbS5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9wdWxsLzI2NDEjaXNzdWVjb21tZW50LTczNzI5MjA1OFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgLy8gTm9uLW9ic2V2YWJsZSwgdGhlcmVmb3JlIG5vbi13cml0YWJsZVxuICAgICAgICAvLyBBbHNvIHByZXZlbnRzIHJld3JpdGluZyBpbiBzdWJjbGFzcyBjb25zdHJ1Y3RvclxuICAgICAgICB3cml0YWJsZTogc2FmZURlc2NyaXB0b3JzID8gZmFsc2UgOiB0cnVlXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgQW5ub3RhdGlvbixcbiAgICBkZWZpbmVQcm9wZXJ0eSxcbiAgICBnZXREZXNjcmlwdG9yLFxuICAgIG9iamVjdFByb3RvdHlwZSxcbiAgICBkaWUsXG4gICAgZmxvdyxcbiAgICBpc0Zsb3csXG4gICAgcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQsXG4gICAgaXNGdW5jdGlvbixcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmxvd0Fubm90YXRpb24obmFtZTogc3RyaW5nLCBvcHRpb25zPzogb2JqZWN0KTogQW5ub3RhdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW5ub3RhdGlvblR5cGVfOiBuYW1lLFxuICAgICAgICBvcHRpb25zXzogb3B0aW9ucyxcbiAgICAgICAgbWFrZV8sXG4gICAgICAgIGV4dGVuZF9cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfKGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLCBrZXk6IFByb3BlcnR5S2V5KTogdm9pZCB7XG4gICAgbGV0IGFubm90YXRlZCA9IGZhbHNlXG4gICAgbGV0IHNvdXJjZSA9IGFkbS50YXJnZXRfXG4gICAgd2hpbGUgKHNvdXJjZSAmJiBzb3VyY2UgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gZ2V0RGVzY3JpcHRvcihzb3VyY2UsIGtleSlcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT09IGFkbS50YXJnZXRfKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJvdG90eXBlXG4gICAgICAgICAgICAgICAgaWYgKGlzRmxvdyhkZXNjcmlwdG9yLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIHByb3RvdHlwZSBjb3VsZCBoYXZlIGJlZW4gYW5ub3RhdGVkIGFscmVhZHkgYnkgb3RoZXIgY29uc3RydWN0b3IsXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc3Qgb2YgdGhlIHByb3RvIGNoYWluIG11c3QgYmUgYW5ub3RhdGVkIGFscmVhZHlcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmbG93RGVzY3JpcHRvciA9IGNyZWF0ZUZsb3dEZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSlcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShzb3VyY2UsIGtleSwgZmxvd0Rlc2NyaXB0b3IpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsb3dEZXNjcmlwdG9yID0gY3JlYXRlRmxvd0Rlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgICAgICAgICAgICAgY29uc3QgZGVmaW5lUHJvcGVydHlPdXRjb21lID0gYWRtLmRlZmluZVByb3BlcnR5XyhrZXksIGZsb3dEZXNjcmlwdG9yKVxuICAgICAgICAgICAgICAgIGlmICghZGVmaW5lUHJvcGVydHlPdXRjb21lKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEludGVyY2VwdGVkXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFubm90YXRlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKVxuICAgIH1cbiAgICBpZiAoYW5ub3RhdGVkKSB7XG4gICAgICAgIHJlY29yZEFubm90YXRpb25BcHBsaWVkKGFkbSwgdGhpcywga2V5KVxuICAgIH0gZWxzZSBpZiAoIWFkbS50YXJnZXRfW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXT8uW2tleV0pIHtcbiAgICAgICAgLy8gVGhyb3cgb24gbWlzc2luZyBrZXksIGV4Y2VwdCBmb3IgZGVjb3JhdG9yczpcbiAgICAgICAgLy8gRGVjb3JhdG9yIGFubm90YXRpb25zIGFyZSBjb2xsZWN0ZWQgZnJvbSB3aG9sZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgIC8vIFdoZW4gY2FsbGVkIGZyb20gc3VwZXIoKSBzb21lIHByb3BzIG1heSBub3QgZXhpc3QgeWV0LlxuICAgICAgICAvLyBIb3dldmVyIHdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgbWlzc2luZyBwcm9wLFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBkZWNvcmF0b3IgbXVzdCBoYXZlIGJlZW4gYXBwbGllZCB0byBzb21ldGhpbmcuXG4gICAgICAgIGRpZSgxLCB0aGlzLmFubm90YXRpb25UeXBlXywgYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByb3h5VHJhcDogYm9vbGVhblxuKTogYm9vbGVhbiB8IG51bGwge1xuICAgIGNvbnN0IGZsb3dEZXNjcmlwdG9yID0gY3JlYXRlRmxvd0Rlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgcmV0dXJuIGFkbS5kZWZpbmVQcm9wZXJ0eV8oa2V5LCBmbG93RGVzY3JpcHRvciwgcHJveHlUcmFwKVxufVxuXG5mdW5jdGlvbiBhc3NlcnRGbG93RGVzY3JpcHRvcihcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICB7IGFubm90YXRpb25UeXBlXyB9OiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgeyB2YWx1ZSB9OiBQcm9wZXJ0eURlc2NyaXB0b3Jcbikge1xuICAgIGlmIChfX0RFVl9fICYmICFpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke2Fubm90YXRpb25UeXBlX30nIHRvICcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG4nJHthbm5vdGF0aW9uVHlwZV99JyBjYW4gb25seSBiZSB1c2VkIG9uIHByb3BlcnRpZXMgd2l0aCBhIGdlbmVyYXRvciBmdW5jdGlvbiB2YWx1ZS5gXG4gICAgICAgIClcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZsb3dEZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGFubm90YXRpb246IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgLy8gcHJvdmlkZXMgYWJpbGl0eSB0byBkaXNhYmxlIHNhZmVEZXNjcmlwdG9ycyBmb3IgcHJvdG90eXBlc1xuICAgIHNhZmVEZXNjcmlwdG9yczogYm9vbGVhbiA9IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9yc1xuKTogUHJvcGVydHlEZXNjcmlwdG9yIHtcbiAgICBhc3NlcnRGbG93RGVzY3JpcHRvcihhZG0sIGFubm90YXRpb24sIGtleSwgZGVzY3JpcHRvcilcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogZmxvdyhkZXNjcmlwdG9yLnZhbHVlKSxcbiAgICAgICAgLy8gTm9uLWNvbmZpZ3VyYWJsZSBmb3IgY2xhc3Nlc1xuICAgICAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsIGZpZWxkIHJlZGVmaW5pdGlvbiBpbiBzdWJjbGFzc1xuICAgICAgICBjb25maWd1cmFibGU6IHNhZmVEZXNjcmlwdG9ycyA/IGFkbS5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9wdWxsLzI2NDEjaXNzdWVjb21tZW50LTczNzI5MjA1OFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgLy8gTm9uLW9ic2V2YWJsZSwgdGhlcmVmb3JlIG5vbi13cml0YWJsZVxuICAgICAgICAvLyBBbHNvIHByZXZlbnRzIHJld3JpdGluZyBpbiBzdWJjbGFzcyBjb25zdHJ1Y3RvclxuICAgICAgICB3cml0YWJsZTogc2FmZURlc2NyaXB0b3JzID8gZmFsc2UgOiB0cnVlXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgZ2V0RGVzY3JpcHRvcixcbiAgICBvYmplY3RQcm90b3R5cGUsXG4gICAgZGllLFxuICAgIEFubm90YXRpb24sXG4gICAgcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQsXG4gICAgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sIGtleTogUHJvcGVydHlLZXkpOiB2b2lkIHtcbiAgICBsZXQgc291cmNlID0gYWRtLnRhcmdldF9cbiAgICB3aGlsZSAoc291cmNlICYmIHNvdXJjZSAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBnZXREZXNjcmlwdG9yKHNvdXJjZSwga2V5KVxuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgYXNzZXJ0Q29tcHV0ZWREZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yKVxuICAgICAgICAgICAgY29uc3QgZGVmaW5lUHJvcGVydHlPdXRjb21lID0gYWRtLmRlZmluZUNvbXB1dGVkUHJvcGVydHlfKGtleSwge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMub3B0aW9uc18sXG4gICAgICAgICAgICAgICAgZ2V0OiBkZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGRlc2NyaXB0b3Iuc2V0XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFkZWZpbmVQcm9wZXJ0eU91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnRlcmNlcHRlZFxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQoYWRtLCB0aGlzLCBrZXkpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKVxuICAgIH1cbiAgICBpZiAoIWFkbS50YXJnZXRfW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXT8uW2tleV0pIHtcbiAgICAgICAgLy8gVGhyb3cgb24gbWlzc2luZyBrZXksIGV4Y2VwdCBmb3IgZGVjb3JhdG9yczpcbiAgICAgICAgLy8gRGVjb3JhdG9yIGFubm90YXRpb25zIGFyZSBjb2xsZWN0ZWQgZnJvbSB3aG9sZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgIC8vIFdoZW4gY2FsbGVkIGZyb20gc3VwZXIoKSBzb21lIHByb3BzIG1heSBub3QgZXhpc3QgeWV0LlxuICAgICAgICAvLyBIb3dldmVyIHdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgbWlzc2luZyBwcm9wLFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBkZWNvcmF0b3IgbXVzdCBoYXZlIGJlZW4gYXBwbGllZCB0byBzb21ldGhpbmcuXG4gICAgICAgIGRpZSgxLCB0aGlzLmFubm90YXRpb25UeXBlXywgYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByb3h5VHJhcDogYm9vbGVhblxuKTogYm9vbGVhbiB8IG51bGwge1xuICAgIGFzc2VydENvbXB1dGVkRGVzY3JpcHRvcihhZG0sIHRoaXMsIGtleSwgZGVzY3JpcHRvcilcbiAgICByZXR1cm4gYWRtLmRlZmluZUNvbXB1dGVkUHJvcGVydHlfKFxuICAgICAgICBrZXksXG4gICAgICAgIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9uc18sXG4gICAgICAgICAgICBnZXQ6IGRlc2NyaXB0b3IuZ2V0LFxuICAgICAgICAgICAgc2V0OiBkZXNjcmlwdG9yLnNldFxuICAgICAgICB9LFxuICAgICAgICBwcm94eVRyYXBcbiAgICApXG59XG5cbmZ1bmN0aW9uIGFzc2VydENvbXB1dGVkRGVzY3JpcHRvcihcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICB7IGFubm90YXRpb25UeXBlXyB9OiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgeyBnZXQgfTogUHJvcGVydHlEZXNjcmlwdG9yXG4pIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhZ2V0KSB7XG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGBDYW5ub3QgYXBwbHkgJyR7YW5ub3RhdGlvblR5cGVffScgdG8gJyR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcbicke2Fubm90YXRpb25UeXBlX30nIGNhbiBvbmx5IGJlIHVzZWQgb24gZ2V0dGVyKCtzZXR0ZXIpIHByb3BlcnRpZXMuYFxuICAgICAgICApXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgZ2V0RGVzY3JpcHRvcixcbiAgICBkZWVwRW5oYW5jZXIsXG4gICAgZGllLFxuICAgIEFubm90YXRpb24sXG4gICAgcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQsXG4gICAgb2JqZWN0UHJvdG90eXBlLFxuICAgIHN0b3JlZEFubm90YXRpb25zU3ltYm9sXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlQW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sIGtleTogUHJvcGVydHlLZXkpOiB2b2lkIHtcbiAgICBsZXQgc291cmNlID0gYWRtLnRhcmdldF9cbiAgICAvLyBDb3B5IHByb3BzIGZyb20gcHJvdG8gYXMgd2VsbCwgc2VlIHRlc3Q6XG4gICAgLy8gXCJkZWNvcmF0ZSBzaG91bGQgd29yayB3aXRoIE9iamVjdC5jcmVhdGVcIlxuICAgIHdoaWxlIChzb3VyY2UgJiYgc291cmNlICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IGdldERlc2NyaXB0b3Ioc291cmNlLCBrZXkpXG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBhc3NlcnRPYnNlcnZhYmxlRGVzY3JpcHRvcihhZG0sIHRoaXMsIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgIGNvbnN0IGRlZmluZVByb3BlcnR5T3V0Y29tZSA9IGFkbS5kZWZpbmVPYnNlcnZhYmxlUHJvcGVydHlfKFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlLFxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc18/LmVuaGFuY2VyID8/IGRlZXBFbmhhbmNlclxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKCFkZWZpbmVQcm9wZXJ0eU91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnRlcmNlcHRlZFxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQoYWRtLCB0aGlzLCBrZXkpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKVxuICAgIH1cbiAgICBpZiAoIWFkbS50YXJnZXRfW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXT8uW2tleV0pIHtcbiAgICAgICAgLy8gVGhyb3cgb24gbWlzc2luZyBrZXksIGV4Y2VwdCBmb3IgZGVjb3JhdG9yczpcbiAgICAgICAgLy8gRGVjb3JhdG9yIGFubm90YXRpb25zIGFyZSBjb2xsZWN0ZWQgZnJvbSB3aG9sZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgIC8vIFdoZW4gY2FsbGVkIGZyb20gc3VwZXIoKSBzb21lIHByb3BzIG1heSBub3QgZXhpc3QgeWV0LlxuICAgICAgICAvLyBIb3dldmVyIHdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgbWlzc2luZyBwcm9wLFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBkZWNvcmF0b3IgbXVzdCBoYXZlIGJlZW4gYXBwbGllZCB0byBzb21ldGhpbmcuXG4gICAgICAgIGRpZSgxLCB0aGlzLmFubm90YXRpb25UeXBlXywgYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByb3h5VHJhcDogYm9vbGVhblxuKTogYm9vbGVhbiB8IG51bGwge1xuICAgIGFzc2VydE9ic2VydmFibGVEZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yKVxuICAgIHJldHVybiBhZG0uZGVmaW5lT2JzZXJ2YWJsZVByb3BlcnR5XyhcbiAgICAgICAga2V5LFxuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlLFxuICAgICAgICB0aGlzLm9wdGlvbnNfPy5lbmhhbmNlciA/PyBkZWVwRW5oYW5jZXIsXG4gICAgICAgIHByb3h5VHJhcFxuICAgIClcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JzZXJ2YWJsZURlc2NyaXB0b3IoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgeyBhbm5vdGF0aW9uVHlwZV8gfTogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvclxuKSB7XG4gICAgaWYgKF9fREVWX18gJiYgIShcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHthbm5vdGF0aW9uVHlwZV99JyB0byAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzpgICtcbiAgICAgICAgICAgICAgICBgXFxuJyR7YW5ub3RhdGlvblR5cGVffScgY2Fubm90IGJlIHVzZWQgb24gZ2V0dGVyL3NldHRlciBwcm9wZXJ0aWVzYFxuICAgICAgICApXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBJRW5oYW5jZXIsXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIElPYnNlcnZhYmxlQXJyYXksXG4gICAgSU9ic2VydmFibGVNYXBJbml0aWFsVmFsdWVzLFxuICAgIElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlcyxcbiAgICBJT2JzZXJ2YWJsZVZhbHVlLFxuICAgIE9ic2VydmFibGVNYXAsXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBPYnNlcnZhYmxlVmFsdWUsXG4gICAgYXNEeW5hbWljT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBjcmVhdGVPYnNlcnZhYmxlQXJyYXksXG4gICAgZGVlcEVuaGFuY2VyLFxuICAgIGV4dGVuZE9ic2VydmFibGUsXG4gICAgaXNFUzZNYXAsXG4gICAgaXNFUzZTZXQsXG4gICAgaXNPYnNlcnZhYmxlLFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgQW5ub3RhdGlvbixcbiAgICBzaGFsbG93RW5oYW5jZXIsXG4gICAgcmVmU3RydWN0RW5oYW5jZXIsXG4gICAgQW5ub3RhdGlvbnNNYXAsXG4gICAgYXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIHN0b3JlQW5ub3RhdGlvbixcbiAgICBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUxlZ2FjeUFycmF5LFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIGFzc2lnbixcbiAgICBpc1N0cmluZ2lzaCxcbiAgICBjcmVhdGVPYnNlcnZhYmxlQW5ub3RhdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgY29uc3QgT0JTRVJWQUJMRSA9IFwib2JzZXJ2YWJsZVwiXG5leHBvcnQgY29uc3QgT0JTRVJWQUJMRV9SRUYgPSBcIm9ic2VydmFibGUucmVmXCJcbmV4cG9ydCBjb25zdCBPQlNFUlZBQkxFX1NIQUxMT1cgPSBcIm9ic2VydmFibGUuc2hhbGxvd1wiXG5leHBvcnQgY29uc3QgT0JTRVJWQUJMRV9TVFJVQ1QgPSBcIm9ic2VydmFibGUuc3RydWN0XCJcblxuZXhwb3J0IHR5cGUgQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMgPSB7XG4gICAgbmFtZT86IHN0cmluZ1xuICAgIGVxdWFscz86IElFcXVhbHNDb21wYXJlcjxhbnk+XG4gICAgZGVlcD86IGJvb2xlYW5cbiAgICBkZWZhdWx0RGVjb3JhdG9yPzogQW5ub3RhdGlvblxuICAgIHByb3h5PzogYm9vbGVhblxuICAgIGF1dG9CaW5kPzogYm9vbGVhblxufVxuXG4vLyBQcmVkZWZpbmVkIGJhZ3Mgb2YgY3JlYXRlIG9ic2VydmFibGUgb3B0aW9ucywgdG8gYXZvaWQgYWxsb2NhdGluZyB0ZW1wb3JhcmlseSBvcHRpb24gb2JqZWN0c1xuLy8gaW4gdGhlIG1ham9yaXR5IG9mIGNhc2VzXG5leHBvcnQgY29uc3QgZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zOiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyA9IHtcbiAgICBkZWVwOiB0cnVlLFxuICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICBkZWZhdWx0RGVjb3JhdG9yOiB1bmRlZmluZWQsXG4gICAgcHJveHk6IHRydWVcbn1cbk9iamVjdC5mcmVlemUoZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zKVxuXG5leHBvcnQgZnVuY3Rpb24gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyh0aGluZzogYW55KTogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMge1xuICAgIHJldHVybiB0aGluZyB8fCBkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbn1cblxuY29uc3Qgb2JzZXJ2YWJsZUFubm90YXRpb24gPSBjcmVhdGVPYnNlcnZhYmxlQW5ub3RhdGlvbihcIm9ic2VydmFibGVcIilcbmNvbnN0IG9ic2VydmFibGVSZWZBbm5vdGF0aW9uID0gY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24oXCJvYnNlcnZhYmxlLnJlZlwiLCB7XG4gICAgZW5oYW5jZXI6IHJlZmVyZW5jZUVuaGFuY2VyXG59KVxuY29uc3Qgb2JzZXJ2YWJsZVNoYWxsb3dBbm5vdGF0aW9uID0gY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24oXCJvYnNlcnZhYmxlLnNoYWxsb3dcIiwge1xuICAgIGVuaGFuY2VyOiBzaGFsbG93RW5oYW5jZXJcbn0pXG5jb25zdCBvYnNlcnZhYmxlU3RydWN0QW5ub3RhdGlvbiA9IGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uKFwib2JzZXJ2YWJsZS5zdHJ1Y3RcIiwge1xuICAgIGVuaGFuY2VyOiByZWZTdHJ1Y3RFbmhhbmNlclxufSlcbmNvbnN0IG9ic2VydmFibGVEZWNvcmF0b3JBbm5vdGF0aW9uID0gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbihvYnNlcnZhYmxlQW5ub3RhdGlvbilcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMob3B0aW9uczogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBJRW5oYW5jZXI8YW55PiB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZGVlcCA9PT0gdHJ1ZVxuICAgICAgICA/IGRlZXBFbmhhbmNlclxuICAgICAgICA6IG9wdGlvbnMuZGVlcCA9PT0gZmFsc2VcbiAgICAgICAgPyByZWZlcmVuY2VFbmhhbmNlclxuICAgICAgICA6IGdldEVuaGFuY2VyRnJvbUFubm90YXRpb24ob3B0aW9ucy5kZWZhdWx0RGVjb3JhdG9yKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5ub3RhdGlvbkZyb21PcHRpb25zKFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogQW5ub3RhdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgICAgICAgPyBvcHRpb25zLmRlZXAgPT09IHRydWVcbiAgICAgICAgICAgID8gb2JzZXJ2YWJsZUFubm90YXRpb25cbiAgICAgICAgICAgIDogb3B0aW9ucy5kZWVwID09PSBmYWxzZVxuICAgICAgICAgICAgPyBvYnNlcnZhYmxlUmVmQW5ub3RhdGlvblxuICAgICAgICAgICAgOiBvcHRpb25zLmRlZmF1bHREZWNvcmF0b3JcbiAgICAgICAgOiB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuaGFuY2VyRnJvbUFubm90YXRpb24oYW5ub3RhdGlvbj86IEFubm90YXRpb24pOiBJRW5oYW5jZXI8YW55PiB7XG4gICAgcmV0dXJuICFhbm5vdGF0aW9uID8gZGVlcEVuaGFuY2VyIDogYW5ub3RhdGlvbi5vcHRpb25zXz8uZW5oYW5jZXIgPz8gZGVlcEVuaGFuY2VyXG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0LCBhcnJheSBvciBmdW5jdGlvbiBpbnRvIGEgcmVhY3RpdmUgc3RydWN0dXJlLlxuICogQHBhcmFtIHYgdGhlIHZhbHVlIHdoaWNoIHNob3VsZCBiZWNvbWUgb2JzZXJ2YWJsZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZSh2OiBhbnksIGFyZzI/OiBhbnksIGFyZzM/OiBhbnkpIHtcbiAgICAvLyBAb2JzZXJ2YWJsZSBzb21lUHJvcDtcbiAgICBpZiAoaXNTdHJpbmdpc2goYXJnMikpIHtcbiAgICAgICAgc3RvcmVBbm5vdGF0aW9uKHYsIGFyZzIsIG9ic2VydmFibGVBbm5vdGF0aW9uKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBhbHJlYWR5IG9ic2VydmFibGUgLSBpZ25vcmVcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHYpKSByZXR1cm4gdlxuXG4gICAgLy8gcGxhaW4gb2JqZWN0XG4gICAgaWYgKGlzUGxhaW5PYmplY3QodikpIHJldHVybiBvYnNlcnZhYmxlLm9iamVjdCh2LCBhcmcyLCBhcmczKVxuXG4gICAgLy8gQXJyYXlcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkgcmV0dXJuIG9ic2VydmFibGUuYXJyYXkodiwgYXJnMilcblxuICAgIC8vIE1hcFxuICAgIGlmIChpc0VTNk1hcCh2KSkgcmV0dXJuIG9ic2VydmFibGUubWFwKHYsIGFyZzIpXG5cbiAgICAvLyBTZXRcbiAgICBpZiAoaXNFUzZTZXQodikpIHJldHVybiBvYnNlcnZhYmxlLnNldCh2LCBhcmcyKVxuXG4gICAgLy8gb3RoZXIgb2JqZWN0IC0gaWdub3JlXG4gICAgaWYgKHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT09IG51bGwpIHJldHVybiB2XG5cbiAgICAvLyBhbnl0aGluZyBlbHNlXG4gICAgcmV0dXJuIG9ic2VydmFibGUuYm94KHYsIGFyZzIpXG59XG5PYmplY3QuYXNzaWduKGNyZWF0ZU9ic2VydmFibGUsIG9ic2VydmFibGVEZWNvcmF0b3JBbm5vdGF0aW9uKVxuXG5leHBvcnQgaW50ZXJmYWNlIElPYnNlcnZhYmxlRmFjdG9yeSBleHRlbmRzIEFubm90YXRpb24sIFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgICA8VCA9IGFueT4odmFsdWU6IFRbXSwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVBcnJheTxUPlxuICAgIDxUID0gYW55Pih2YWx1ZTogU2V0PFQ+LCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBPYnNlcnZhYmxlU2V0PFQ+XG4gICAgPEsgPSBhbnksIFYgPSBhbnk+KHZhbHVlOiBNYXA8SywgVj4sIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyk6IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICA8VCBleHRlbmRzIG9iamVjdD4oXG4gICAgICAgIHZhbHVlOiBULFxuICAgICAgICBkZWNvcmF0b3JzPzogQW5ub3RhdGlvbnNNYXA8VCwgbmV2ZXI+LFxuICAgICAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbiAgICApOiBUXG5cbiAgICBib3g6IDxUID0gYW55Pih2YWx1ZT86IFQsIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucykgPT4gSU9ic2VydmFibGVWYWx1ZTxUPlxuICAgIGFycmF5OiA8VCA9IGFueT4oaW5pdGlhbFZhbHVlcz86IFRbXSwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKSA9PiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgc2V0OiA8VCA9IGFueT4oXG4gICAgICAgIGluaXRpYWxWYWx1ZXM/OiBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICkgPT4gT2JzZXJ2YWJsZVNldDxUPlxuICAgIG1hcDogPEsgPSBhbnksIFYgPSBhbnk+KFxuICAgICAgICBpbml0aWFsVmFsdWVzPzogSU9ic2VydmFibGVNYXBJbml0aWFsVmFsdWVzPEssIFY+LFxuICAgICAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbiAgICApID0+IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICBvYmplY3Q6IDxUID0gYW55PihcbiAgICAgICAgcHJvcHM6IFQsXG4gICAgICAgIGRlY29yYXRvcnM/OiBBbm5vdGF0aW9uc01hcDxULCBuZXZlcj4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICkgPT4gVFxuXG4gICAgLyoqXG4gICAgICogRGVjb3JhdG9yIHRoYXQgY3JlYXRlcyBhbiBvYnNlcnZhYmxlIHRoYXQgb25seSBvYnNlcnZlcyB0aGUgcmVmZXJlbmNlcywgYnV0IGRvZXNuJ3QgdHJ5IHRvIHR1cm4gdGhlIGFzc2lnbmVkIHZhbHVlIGludG8gYW4gb2JzZXJ2YWJsZS50cy5cbiAgICAgKi9cbiAgICByZWY6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvclxuICAgIC8qKlxuICAgICAqIERlY29yYXRvciB0aGF0IGNyZWF0ZXMgYW4gb2JzZXJ2YWJsZSBjb252ZXJ0cyBpdHMgdmFsdWUgKG9iamVjdHMsIG1hcHMgb3IgYXJyYXlzKSBpbnRvIGEgc2hhbGxvdyBvYnNlcnZhYmxlIHN0cnVjdHVyZVxuICAgICAqL1xuICAgIHNoYWxsb3c6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvclxuICAgIGRlZXA6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvclxuICAgIHN0cnVjdDogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yXG59XG5cbmNvbnN0IG9ic2VydmFibGVGYWN0b3JpZXM6IElPYnNlcnZhYmxlRmFjdG9yeSA9IHtcbiAgICBib3g8VCA9IGFueT4odmFsdWU/OiBULCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBJT2JzZXJ2YWJsZVZhbHVlPFQ+IHtcbiAgICAgICAgY29uc3QgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucylcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlVmFsdWUodmFsdWUsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSwgdHJ1ZSwgby5lcXVhbHMpXG4gICAgfSxcbiAgICBhcnJheTxUID0gYW55Pihpbml0aWFsVmFsdWVzPzogVFtdLCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBJT2JzZXJ2YWJsZUFycmF5PFQ+IHtcbiAgICAgICAgY29uc3QgbyA9IGFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMob3B0aW9ucylcbiAgICAgICAgcmV0dXJuIChnbG9iYWxTdGF0ZS51c2VQcm94aWVzID09PSBmYWxzZSB8fCBvLnByb3h5ID09PSBmYWxzZVxuICAgICAgICAgICAgPyBjcmVhdGVMZWdhY3lBcnJheVxuICAgICAgICAgICAgOiBjcmVhdGVPYnNlcnZhYmxlQXJyYXkpKGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSlcbiAgICB9LFxuICAgIG1hcDxLID0gYW55LCBWID0gYW55PihcbiAgICAgICAgaW5pdGlhbFZhbHVlcz86IElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLLCBWPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKTogT2JzZXJ2YWJsZU1hcDxLLCBWPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZU1hcDxLLCBWPihpbml0aWFsVmFsdWVzLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUpXG4gICAgfSxcbiAgICBzZXQ8VCA9IGFueT4oXG4gICAgICAgIGluaXRpYWxWYWx1ZXM/OiBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICk6IE9ic2VydmFibGVTZXQ8VD4ge1xuICAgICAgICBjb25zdCBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVTZXQ8VD4oaW5pdGlhbFZhbHVlcywgZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvKSwgby5uYW1lKVxuICAgIH0sXG4gICAgb2JqZWN0PFQgPSBhbnk+KFxuICAgICAgICBwcm9wczogVCxcbiAgICAgICAgZGVjb3JhdG9ycz86IEFubm90YXRpb25zTWFwPFQsIG5ldmVyPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKTogVCB7XG4gICAgICAgIHJldHVybiBleHRlbmRPYnNlcnZhYmxlKFxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUudXNlUHJveGllcyA9PT0gZmFsc2UgfHwgb3B0aW9ucz8ucHJveHkgPT09IGZhbHNlXG4gICAgICAgICAgICAgICAgPyBhc09ic2VydmFibGVPYmplY3Qoe30sIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgOiBhc0R5bmFtaWNPYnNlcnZhYmxlT2JqZWN0KHt9LCBvcHRpb25zKSxcbiAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgZGVjb3JhdG9yc1xuICAgICAgICApXG4gICAgfSxcbiAgICByZWY6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVJlZkFubm90YXRpb24pLFxuICAgIHNoYWxsb3c6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVNoYWxsb3dBbm5vdGF0aW9uKSxcbiAgICBkZWVwOiBvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbixcbiAgICBzdHJ1Y3Q6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVN0cnVjdEFubm90YXRpb24pXG59IGFzIGFueVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgb2JzZXJ2YWJsZTogSU9ic2VydmFibGVGYWN0b3J5ID0gYXNzaWduKGNyZWF0ZU9ic2VydmFibGUsIG9ic2VydmFibGVGYWN0b3JpZXMpXG4iLCJpbXBvcnQge1xuICAgIENvbXB1dGVkVmFsdWUsXG4gICAgSUNvbXB1dGVkVmFsdWVPcHRpb25zLFxuICAgIEFubm90YXRpb24sXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24sXG4gICAgaXNTdHJpbmdpc2gsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGRpZSxcbiAgICBJQ29tcHV0ZWRWYWx1ZSxcbiAgICBjcmVhdGVDb21wdXRlZEFubm90YXRpb24sXG4gICAgY29tcGFyZXJcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGNvbnN0IENPTVBVVEVEID0gXCJjb21wdXRlZFwiXG5leHBvcnQgY29uc3QgQ09NUFVURURfU1RSVUNUID0gXCJjb21wdXRlZC5zdHJ1Y3RcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElDb21wdXRlZEZhY3RvcnkgZXh0ZW5kcyBBbm5vdGF0aW9uLCBQcm9wZXJ0eURlY29yYXRvciB7XG4gICAgLy8gQGNvbXB1dGVkKG9wdHMpXG4gICAgPFQ+KG9wdGlvbnM6IElDb21wdXRlZFZhbHVlT3B0aW9uczxUPik6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvclxuICAgIC8vIGNvbXB1dGVkKGZuLCBvcHRzKVxuICAgIDxUPihmdW5jOiAoKSA9PiBULCBvcHRpb25zPzogSUNvbXB1dGVkVmFsdWVPcHRpb25zPFQ+KTogSUNvbXB1dGVkVmFsdWU8VD5cblxuICAgIHN0cnVjdDogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yXG59XG5cbmNvbnN0IGNvbXB1dGVkQW5ub3RhdGlvbiA9IGNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbihDT01QVVRFRClcbmNvbnN0IGNvbXB1dGVkU3RydWN0QW5ub3RhdGlvbiA9IGNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbihDT01QVVRFRF9TVFJVQ1QsIHtcbiAgICBlcXVhbHM6IGNvbXBhcmVyLnN0cnVjdHVyYWxcbn0pXG5cbi8qKlxuICogRGVjb3JhdG9yIGZvciBjbGFzcyBwcm9wZXJ0aWVzOiBAY29tcHV0ZWQgZ2V0IHZhbHVlKCkgeyByZXR1cm4gZXhwcjsgfS5cbiAqIEZvciBsZWdhY3kgcHVycG9zZXMgYWxzbyBpbnZva2FibGUgYXMgRVM1IG9ic2VydmFibGUgY3JlYXRlZDogYGNvbXB1dGVkKCgpID0+IGV4cHIpYDtcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVkOiBJQ29tcHV0ZWRGYWN0b3J5ID0gZnVuY3Rpb24gY29tcHV0ZWQoYXJnMSwgYXJnMikge1xuICAgIGlmIChpc1N0cmluZ2lzaChhcmcyKSkge1xuICAgICAgICAvLyBAY29tcHV0ZWRcbiAgICAgICAgcmV0dXJuIHN0b3JlQW5ub3RhdGlvbihhcmcxLCBhcmcyLCBjb21wdXRlZEFubm90YXRpb24pXG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqZWN0KGFyZzEpKSB7XG4gICAgICAgIC8vIEBjb21wdXRlZCh7IG9wdGlvbnMgfSlcbiAgICAgICAgcmV0dXJuIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oY3JlYXRlQ29tcHV0ZWRBbm5vdGF0aW9uKENPTVBVVEVELCBhcmcxKSlcbiAgICB9XG5cbiAgICAvLyBjb21wdXRlZChleHByLCBvcHRpb25zPylcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oYXJnMSkpIGRpZShcIkZpcnN0IGFyZ3VtZW50IHRvIGBjb21wdXRlZGAgc2hvdWxkIGJlIGFuIGV4cHJlc3Npb24uXCIpXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGFyZzIpKVxuICAgICAgICAgICAgZGllKFxuICAgICAgICAgICAgICAgIFwiQSBzZXR0ZXIgYXMgc2Vjb25kIGFyZ3VtZW50IGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQsIHVzZSBgeyBzZXQ6IGZuIH1gIG9wdGlvbiBpbnN0ZWFkXCJcbiAgICAgICAgICAgIClcbiAgICB9XG4gICAgY29uc3Qgb3B0czogSUNvbXB1dGVkVmFsdWVPcHRpb25zPGFueT4gPSBpc1BsYWluT2JqZWN0KGFyZzIpID8gYXJnMiA6IHt9XG4gICAgb3B0cy5nZXQgPSBhcmcxXG4gICAgb3B0cy5uYW1lIHx8PSBhcmcxLm5hbWUgfHwgXCJcIiAvKiBmb3IgZ2VuZXJhdGVkIG5hbWUgKi9cblxuICAgIHJldHVybiBuZXcgQ29tcHV0ZWRWYWx1ZShvcHRzKVxufSBhcyBhbnlcblxuT2JqZWN0LmFzc2lnbihjb21wdXRlZCwgY29tcHV0ZWRBbm5vdGF0aW9uKVxuXG5jb21wdXRlZC5zdHJ1Y3QgPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGNvbXB1dGVkU3RydWN0QW5ub3RhdGlvbilcbiIsImltcG9ydCB7XG4gICAgSURlcml2YXRpb24sXG4gICAgZW5kQmF0Y2gsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBzdGFydEJhdGNoLFxuICAgIHVudHJhY2tlZEVuZCxcbiAgICB1bnRyYWNrZWRTdGFydCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGFsbG93U3RhdGVSZWFkc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVSZWFkc0VuZCxcbiAgICBBQ1RJT04sXG4gICAgRU1QVFlfQVJSQVksXG4gICAgZGllLFxuICAgIGdldERlc2NyaXB0b3Jcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLy8gd2UgZG9uJ3QgdXNlIGdsb2JhbFN0YXRlIGZvciB0aGVzZSBpbiBvcmRlciB0byBhdm9pZCBwb3NzaWJsZSBpc3N1ZXMgd2l0aCBtdWx0aXBsZVxuLy8gbW9ieCB2ZXJzaW9uc1xubGV0IGN1cnJlbnRBY3Rpb25JZCA9IDBcbmxldCBuZXh0QWN0aW9uSWQgPSAxXG5jb25zdCBpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSA9IGdldERlc2NyaXB0b3IoKCkgPT4ge30sIFwibmFtZVwiKT8uY29uZmlndXJhYmxlID8/IGZhbHNlXG5cbi8vIHdlIGNhbiBzYWZlbHkgcmVjeWNsZSB0aGlzIG9iamVjdFxuY29uc3QgdG1wTmFtZURlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciA9IHtcbiAgICB2YWx1ZTogXCJhY3Rpb25cIixcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb24oXG4gICAgYWN0aW9uTmFtZTogc3RyaW5nLFxuICAgIGZuOiBGdW5jdGlvbixcbiAgICBhdXRvQWN0aW9uOiBib29sZWFuID0gZmFsc2UsXG4gICAgcmVmPzogT2JqZWN0XG4pOiBGdW5jdGlvbiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgZGllKFwiYGFjdGlvbmAgY2FuIG9ubHkgYmUgaW52b2tlZCBvbiBmdW5jdGlvbnNcIilcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25OYW1lICE9PSBcInN0cmluZ1wiIHx8ICFhY3Rpb25OYW1lKVxuICAgICAgICAgICAgZGllKGBhY3Rpb25zIHNob3VsZCBoYXZlIHZhbGlkIG5hbWVzLCBnb3Q6ICcke2FjdGlvbk5hbWV9J2ApXG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcygpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgYXV0b0FjdGlvbiwgZm4sIHJlZiB8fCB0aGlzLCBhcmd1bWVudHMpXG4gICAgfVxuICAgIHJlcy5pc01vYnhBY3Rpb24gPSB0cnVlXG4gICAgaWYgKGlzRnVuY3Rpb25OYW1lQ29uZmlndXJhYmxlKSB7XG4gICAgICAgIHRtcE5hbWVEZXNjcmlwdG9yLnZhbHVlID0gYWN0aW9uTmFtZVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzLCBcIm5hbWVcIiwgdG1wTmFtZURlc2NyaXB0b3IpXG4gICAgfVxuICAgIHJldHVybiByZXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVBY3Rpb24oXG4gICAgYWN0aW9uTmFtZTogc3RyaW5nLFxuICAgIGNhblJ1bkFzRGVyaXZhdGlvbjogYm9vbGVhbixcbiAgICBmbjogRnVuY3Rpb24sXG4gICAgc2NvcGU/OiBhbnksXG4gICAgYXJncz86IElBcmd1bWVudHNcbikge1xuICAgIGNvbnN0IHJ1bkluZm8gPSBfc3RhcnRBY3Rpb24oYWN0aW9uTmFtZSwgY2FuUnVuQXNEZXJpdmF0aW9uLCBzY29wZSwgYXJncylcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoc2NvcGUsIGFyZ3MpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJ1bkluZm8uZXJyb3JfID0gZXJyXG4gICAgICAgIHRocm93IGVyclxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9lbmRBY3Rpb24ocnVuSW5mbylcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFjdGlvblJ1bkluZm8ge1xuICAgIHByZXZEZXJpdmF0aW9uXzogSURlcml2YXRpb24gfCBudWxsXG4gICAgcHJldkFsbG93U3RhdGVDaGFuZ2VzXzogYm9vbGVhblxuICAgIHByZXZBbGxvd1N0YXRlUmVhZHNfOiBib29sZWFuXG4gICAgbm90aWZ5U3B5XzogYm9vbGVhblxuICAgIHN0YXJ0VGltZV86IG51bWJlclxuICAgIGVycm9yXz86IGFueVxuICAgIHBhcmVudEFjdGlvbklkXzogbnVtYmVyXG4gICAgYWN0aW9uSWRfOiBudW1iZXJcbiAgICBydW5Bc0FjdGlvbl8/OiBib29sZWFuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfc3RhcnRBY3Rpb24oXG4gICAgYWN0aW9uTmFtZTogc3RyaW5nLFxuICAgIGNhblJ1bkFzRGVyaXZhdGlvbjogYm9vbGVhbiwgLy8gdHJ1ZSBmb3IgYXV0b0FjdGlvblxuICAgIHNjb3BlOiBhbnksXG4gICAgYXJncz86IElBcmd1bWVudHNcbik6IElBY3Rpb25SdW5JbmZvIHtcbiAgICBjb25zdCBub3RpZnlTcHlfID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKSAmJiAhIWFjdGlvbk5hbWVcbiAgICBsZXQgc3RhcnRUaW1lXzogbnVtYmVyID0gMFxuICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweV8pIHtcbiAgICAgICAgc3RhcnRUaW1lXyA9IERhdGUubm93KClcbiAgICAgICAgY29uc3QgZmxhdHRlbmVkQXJncyA9IGFyZ3MgPyBBcnJheS5mcm9tKGFyZ3MpIDogRU1QVFlfQVJSQVlcbiAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgdHlwZTogQUNUSU9OLFxuICAgICAgICAgICAgbmFtZTogYWN0aW9uTmFtZSxcbiAgICAgICAgICAgIG9iamVjdDogc2NvcGUsXG4gICAgICAgICAgICBhcmd1bWVudHM6IGZsYXR0ZW5lZEFyZ3NcbiAgICAgICAgfSlcbiAgICB9XG4gICAgY29uc3QgcHJldkRlcml2YXRpb25fID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uXG4gICAgY29uc3QgcnVuQXNBY3Rpb24gPSAhY2FuUnVuQXNEZXJpdmF0aW9uIHx8ICFwcmV2RGVyaXZhdGlvbl9cbiAgICBzdGFydEJhdGNoKClcbiAgICBsZXQgcHJldkFsbG93U3RhdGVDaGFuZ2VzXyA9IGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzIC8vIGJ5IGRlZmF1bHQgcHJlc2VydmUgcHJldmlvdXMgYWxsb3dcbiAgICBpZiAocnVuQXNBY3Rpb24pIHtcbiAgICAgICAgdW50cmFja2VkU3RhcnQoKVxuICAgICAgICBwcmV2QWxsb3dTdGF0ZUNoYW5nZXNfID0gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydCh0cnVlKVxuICAgIH1cbiAgICBjb25zdCBwcmV2QWxsb3dTdGF0ZVJlYWRzXyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpXG4gICAgY29uc3QgcnVuSW5mbyA9IHtcbiAgICAgICAgcnVuQXNBY3Rpb25fOiBydW5Bc0FjdGlvbixcbiAgICAgICAgcHJldkRlcml2YXRpb25fLFxuICAgICAgICBwcmV2QWxsb3dTdGF0ZUNoYW5nZXNfLFxuICAgICAgICBwcmV2QWxsb3dTdGF0ZVJlYWRzXyxcbiAgICAgICAgbm90aWZ5U3B5XyxcbiAgICAgICAgc3RhcnRUaW1lXyxcbiAgICAgICAgYWN0aW9uSWRfOiBuZXh0QWN0aW9uSWQrKyxcbiAgICAgICAgcGFyZW50QWN0aW9uSWRfOiBjdXJyZW50QWN0aW9uSWRcbiAgICB9XG4gICAgY3VycmVudEFjdGlvbklkID0gcnVuSW5mby5hY3Rpb25JZF9cbiAgICByZXR1cm4gcnVuSW5mb1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2VuZEFjdGlvbihydW5JbmZvOiBJQWN0aW9uUnVuSW5mbykge1xuICAgIGlmIChjdXJyZW50QWN0aW9uSWQgIT09IHJ1bkluZm8uYWN0aW9uSWRfKSB7XG4gICAgICAgIGRpZSgzMClcbiAgICB9XG4gICAgY3VycmVudEFjdGlvbklkID0gcnVuSW5mby5wYXJlbnRBY3Rpb25JZF9cblxuICAgIGlmIChydW5JbmZvLmVycm9yXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMgPSB0cnVlXG4gICAgfVxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHJ1bkluZm8ucHJldkFsbG93U3RhdGVDaGFuZ2VzXylcbiAgICBhbGxvd1N0YXRlUmVhZHNFbmQocnVuSW5mby5wcmV2QWxsb3dTdGF0ZVJlYWRzXylcbiAgICBlbmRCYXRjaCgpXG4gICAgaWYgKHJ1bkluZm8ucnVuQXNBY3Rpb25fKSB1bnRyYWNrZWRFbmQocnVuSW5mby5wcmV2RGVyaXZhdGlvbl8pXG4gICAgaWYgKF9fREVWX18gJiYgcnVuSW5mby5ub3RpZnlTcHlfKSB7XG4gICAgICAgIHNweVJlcG9ydEVuZCh7IHRpbWU6IERhdGUubm93KCkgLSBydW5JbmZvLnN0YXJ0VGltZV8gfSlcbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuc3VwcHJlc3NSZWFjdGlvbkVycm9ycyA9IGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd1N0YXRlQ2hhbmdlczxUPihhbGxvd1N0YXRlQ2hhbmdlczogYm9vbGVhbiwgZnVuYzogKCkgPT4gVCk6IFQge1xuICAgIGNvbnN0IHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGFsbG93U3RhdGVDaGFuZ2VzKVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmdW5jKClcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChwcmV2KVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQoYWxsb3dTdGF0ZUNoYW5nZXM6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBwcmV2ID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXNcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9IGFsbG93U3RhdGVDaGFuZ2VzXG4gICAgcmV0dXJuIHByZXZcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXY6IGJvb2xlYW4pIHtcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlcyA9IHByZXZcbn1cbiIsImltcG9ydCB7XG4gICAgQXRvbSxcbiAgICBJRW5oYW5jZXIsXG4gICAgSUludGVyY2VwdGFibGUsXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQsXG4gICAgY29tcGFyZXIsXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBnZXROZXh0SWQsXG4gICAgaGFzSW50ZXJjZXB0b3JzLFxuICAgIGhhc0xpc3RlbmVycyxcbiAgICBpbnRlcmNlcHRDaGFuZ2UsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIG5vdGlmeUxpc3RlbmVycyxcbiAgICByZWdpc3RlckludGVyY2VwdG9yLFxuICAgIHJlZ2lzdGVyTGlzdGVuZXIsXG4gICAgc3B5UmVwb3J0LFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICB0b1ByaW1pdGl2ZSxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBJVU5DSEFOR0VELFxuICAgIFVQREFURVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElWYWx1ZVdpbGxDaGFuZ2U8VD4ge1xuICAgIG9iamVjdDogSU9ic2VydmFibGVWYWx1ZTxUPlxuICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICBuZXdWYWx1ZTogVFxufVxuXG5leHBvcnQgdHlwZSBJVmFsdWVEaWRDaGFuZ2U8VCA9IGFueT4gPSB7XG4gICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgIG9ic2VydmFibGVLaW5kOiBcInZhbHVlXCJcbiAgICBvYmplY3Q6IElPYnNlcnZhYmxlVmFsdWU8VD5cbiAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgIG5ld1ZhbHVlOiB1bmtub3duXG4gICAgb2xkVmFsdWU6IHVua25vd25cbn1cbmV4cG9ydCB0eXBlIElCb3hEaWRDaGFuZ2U8VCA9IGFueT4gPVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwiY3JlYXRlXCJcbiAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJ2YWx1ZVwiXG4gICAgICAgICAgb2JqZWN0OiBJT2JzZXJ2YWJsZVZhbHVlPFQ+XG4gICAgICAgICAgZGVidWdPYmplY3ROYW1lOiBzdHJpbmdcbiAgICAgICAgICBuZXdWYWx1ZTogdW5rbm93blxuICAgICAgfVxuICAgIHwgSVZhbHVlRGlkQ2hhbmdlPFQ+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmFibGVWYWx1ZTxUPiB7XG4gICAgZ2V0KCk6IFRcbiAgICBzZXQodmFsdWU6IFQpOiB2b2lkXG4gICAgaW50ZXJjZXB0XyhoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVZhbHVlV2lsbENoYW5nZTxUPj4pOiBMYW1iZGFcbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZTogSVZhbHVlRGlkQ2hhbmdlPFQ+KSA9PiB2b2lkLCBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuKTogTGFtYmRhXG59XG5cbmNvbnN0IENSRUFURSA9IFwiY3JlYXRlXCJcblxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVWYWx1ZTxUPlxuICAgIGV4dGVuZHMgQXRvbVxuICAgIGltcGxlbWVudHMgSU9ic2VydmFibGVWYWx1ZTxUPiwgSUludGVyY2VwdGFibGU8SVZhbHVlV2lsbENoYW5nZTxUPj4sIElMaXN0ZW5hYmxlIHtcbiAgICBoYXNVbnJlcG9ydGVkQ2hhbmdlXyA9IGZhbHNlXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICB2YWx1ZV9cbiAgICBkZWhhbmNlcjogYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdmFsdWU6IFQsXG4gICAgICAgIHB1YmxpYyBlbmhhbmNlcjogSUVuaGFuY2VyPFQ+LFxuICAgICAgICBwdWJsaWMgbmFtZV8gPSBfX0RFVl9fID8gXCJPYnNlcnZhYmxlVmFsdWVAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZVZhbHVlXCIsXG4gICAgICAgIG5vdGlmeVNweSA9IHRydWUsXG4gICAgICAgIHByaXZhdGUgZXF1YWxzOiBJRXF1YWxzQ29tcGFyZXI8YW55PiA9IGNvbXBhcmVyLmRlZmF1bHRcbiAgICApIHtcbiAgICAgICAgc3VwZXIobmFtZV8pXG4gICAgICAgIHRoaXMudmFsdWVfID0gZW5oYW5jZXIodmFsdWUsIHVuZGVmaW5lZCwgbmFtZV8pXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSAmJiBpc1NweUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgLy8gb25seSBub3RpZnkgc3B5IGlmIHRoaXMgaXMgYSBzdGFuZC1hbG9uZSBvYnNlcnZhYmxlXG4gICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IENSRUFURSxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IFwiXCIgKyB0aGlzLnZhbHVlX1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZGVoYW5jZVZhbHVlKHZhbHVlOiBUKTogVCB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0KG5ld1ZhbHVlOiBUKSB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZV9cbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLnByZXBhcmVOZXdWYWx1ZV8obmV3VmFsdWUpIGFzIGFueVxuICAgICAgICBpZiAobmV3VmFsdWUgIT09IGdsb2JhbFN0YXRlLlVOQ0hBTkdFRCkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0TmV3VmFsdWVfKG5ld1ZhbHVlKVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRFbmQoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcmVwYXJlTmV3VmFsdWVfKG5ld1ZhbHVlKTogVCB8IElVTkNIQU5HRUQge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzKVxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SVZhbHVlV2lsbENoYW5nZTxUPj4odGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkgcmV0dXJuIGdsb2JhbFN0YXRlLlVOQ0hBTkdFRFxuICAgICAgICAgICAgbmV3VmFsdWUgPSBjaGFuZ2UubmV3VmFsdWVcbiAgICAgICAgfVxuICAgICAgICAvLyBhcHBseSBtb2RpZmllclxuICAgICAgICBuZXdWYWx1ZSA9IHRoaXMuZW5oYW5jZXIobmV3VmFsdWUsIHRoaXMudmFsdWVfLCB0aGlzLm5hbWVfKVxuICAgICAgICByZXR1cm4gdGhpcy5lcXVhbHModGhpcy52YWx1ZV8sIG5ld1ZhbHVlKSA/IGdsb2JhbFN0YXRlLlVOQ0hBTkdFRCA6IG5ld1ZhbHVlXG4gICAgfVxuXG4gICAgc2V0TmV3VmFsdWVfKG5ld1ZhbHVlOiBUKSB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZV9cbiAgICAgICAgdGhpcy52YWx1ZV8gPSBuZXdWYWx1ZVxuICAgICAgICB0aGlzLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICBpZiAoaGFzTGlzdGVuZXJzKHRoaXMpKSB7XG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgb2xkVmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KCk6IFQge1xuICAgICAgICB0aGlzLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZVZhbHVlKHRoaXMudmFsdWVfKVxuICAgIH1cblxuICAgIGludGVyY2VwdF8oaGFuZGxlcjogSUludGVyY2VwdG9yPElWYWx1ZVdpbGxDaGFuZ2U8VD4+KTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcilcbiAgICB9XG5cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZTogSVZhbHVlRGlkQ2hhbmdlPFQ+KSA9PiB2b2lkLCBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuKTogTGFtYmRhIHtcbiAgICAgICAgaWYgKGZpcmVJbW1lZGlhdGVseSlcbiAgICAgICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB0aGlzLnZhbHVlXyxcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICByYXcoKSB7XG4gICAgICAgIC8vIHVzZWQgYnkgTVNUIG90IGdldCB1bmRlaGFuY2VkIHZhbHVlXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlX1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KClcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubmFtZV99WyR7dGhpcy52YWx1ZV99XWBcbiAgICB9XG5cbiAgICB2YWx1ZU9mKCk6IFQge1xuICAgICAgICByZXR1cm4gdG9QcmltaXRpdmUodGhpcy5nZXQoKSlcbiAgICB9XG5cbiAgICBbU3ltYm9sLnRvUHJpbWl0aXZlXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaXNPYnNlcnZhYmxlVmFsdWUgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZVZhbHVlXCIsIE9ic2VydmFibGVWYWx1ZSkgYXMgKFxuICAgIHg6IGFueVxuKSA9PiB4IGlzIElPYnNlcnZhYmxlVmFsdWU8YW55PlxuIiwiaW1wb3J0IHtcbiAgICBDYXVnaHRFeGNlcHRpb24sXG4gICAgSURlcml2YXRpb24sXG4gICAgSURlcml2YXRpb25TdGF0ZV8sXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIElPYnNlcnZhYmxlLFxuICAgIExhbWJkYSxcbiAgICBUcmFjZU1vZGUsXG4gICAgYXV0b3J1bixcbiAgICBjbGVhck9ic2VydmluZyxcbiAgICBjb21wYXJlcixcbiAgICBjcmVhdGVBY3Rpb24sXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBlbmRCYXRjaCxcbiAgICBnZXROZXh0SWQsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNDYXVnaHRFeGNlcHRpb24sXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIHByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZCxcbiAgICBwcm9wYWdhdGVNYXliZUNoYW5nZWQsXG4gICAgcmVwb3J0T2JzZXJ2ZWQsXG4gICAgc2hvdWxkQ29tcHV0ZSxcbiAgICBzcHlSZXBvcnQsXG4gICAgc3RhcnRCYXRjaCxcbiAgICB0b1ByaW1pdGl2ZSxcbiAgICB0cmFja0Rlcml2ZWRGdW5jdGlvbixcbiAgICB1bnRyYWNrZWRFbmQsXG4gICAgdW50cmFja2VkU3RhcnQsXG4gICAgVVBEQVRFLFxuICAgIGRpZSxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbXB1dGVkVmFsdWU8VD4ge1xuICAgIGdldCgpOiBUXG4gICAgc2V0KHZhbHVlOiBUKTogdm9pZFxuICAgIG9ic2VydmVfKGxpc3RlbmVyOiAoY2hhbmdlOiBJQ29tcHV0ZWREaWRDaGFuZ2U8VD4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGFcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29tcHV0ZWRWYWx1ZU9wdGlvbnM8VD4ge1xuICAgIGdldD86ICgpID0+IFRcbiAgICBzZXQ/OiAodmFsdWU6IFQpID0+IHZvaWRcbiAgICBuYW1lPzogc3RyaW5nXG4gICAgZXF1YWxzPzogSUVxdWFsc0NvbXBhcmVyPFQ+XG4gICAgY29udGV4dD86IGFueVxuICAgIHJlcXVpcmVzUmVhY3Rpb24/OiBib29sZWFuXG4gICAga2VlcEFsaXZlPzogYm9vbGVhblxufVxuXG5leHBvcnQgdHlwZSBJQ29tcHV0ZWREaWRDaGFuZ2U8VCA9IGFueT4gPSB7XG4gICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgIG9ic2VydmFibGVLaW5kOiBcImNvbXB1dGVkXCJcbiAgICBvYmplY3Q6IHVua25vd25cbiAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgIG5ld1ZhbHVlOiBUXG4gICAgb2xkVmFsdWU6IFQgfCB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBBIG5vZGUgaW4gdGhlIHN0YXRlIGRlcGVuZGVuY3kgcm9vdCB0aGF0IG9ic2VydmVzIG90aGVyIG5vZGVzLCBhbmQgY2FuIGJlIG9ic2VydmVkIGl0c2VsZi5cbiAqXG4gKiBDb21wdXRlZFZhbHVlIHdpbGwgcmVtZW1iZXIgdGhlIHJlc3VsdCBvZiB0aGUgY29tcHV0YXRpb24gZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYmF0Y2gsIG9yXG4gKiB3aGlsZSBiZWluZyBvYnNlcnZlZC5cbiAqXG4gKiBEdXJpbmcgdGhpcyB0aW1lIGl0IHdpbGwgcmVjb21wdXRlIG9ubHkgd2hlbiBvbmUgb2YgaXRzIGRpcmVjdCBkZXBlbmRlbmNpZXMgY2hhbmdlZCxcbiAqIGJ1dCBvbmx5IHdoZW4gaXQgaXMgYmVpbmcgYWNjZXNzZWQgd2l0aCBgQ29tcHV0ZWRWYWx1ZS5nZXQoKWAuXG4gKlxuICogSW1wbGVtZW50YXRpb24gZGVzY3JpcHRpb246XG4gKiAxLiBGaXJzdCB0aW1lIGl0J3MgYmVpbmcgYWNjZXNzZWQgaXQgd2lsbCBjb21wdXRlIGFuZCByZW1lbWJlciByZXN1bHRcbiAqICAgIGdpdmUgYmFjayByZW1lbWJlcmVkIHJlc3VsdCB1bnRpbCAyLiBoYXBwZW5zXG4gKiAyLiBGaXJzdCB0aW1lIGFueSBkZWVwIGRlcGVuZGVuY3kgY2hhbmdlLCBwcm9wYWdhdGUgUE9TU0lCTFlfU1RBTEUgdG8gYWxsIG9ic2VydmVycywgd2FpdCBmb3IgMy5cbiAqIDMuIFdoZW4gaXQncyBiZWluZyBhY2Nlc3NlZCwgcmVjb21wdXRlIGlmIGFueSBzaGFsbG93IGRlcGVuZGVuY3kgY2hhbmdlZC5cbiAqICAgIGlmIHJlc3VsdCBjaGFuZ2VkOiBwcm9wYWdhdGUgU1RBTEUgdG8gYWxsIG9ic2VydmVycywgdGhhdCB3ZXJlIFBPU1NJQkxZX1NUQUxFIGZyb20gdGhlIGxhc3Qgc3RlcC5cbiAqICAgIGdvIHRvIHN0ZXAgMi4gZWl0aGVyIHdheVxuICpcbiAqIElmIGF0IGFueSBwb2ludCBpdCdzIG91dHNpZGUgYmF0Y2ggYW5kIGl0IGlzbid0IG9ic2VydmVkOiByZXNldCBldmVyeXRoaW5nIGFuZCBnbyB0byAxLlxuICovXG5leHBvcnQgY2xhc3MgQ29tcHV0ZWRWYWx1ZTxUPiBpbXBsZW1lbnRzIElPYnNlcnZhYmxlLCBJQ29tcHV0ZWRWYWx1ZTxUPiwgSURlcml2YXRpb24ge1xuICAgIGRlcGVuZGVuY2llc1N0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLk5PVF9UUkFDS0lOR19cbiAgICBvYnNlcnZpbmdfOiBJT2JzZXJ2YWJsZVtdID0gW10gLy8gbm9kZXMgd2UgYXJlIGxvb2tpbmcgYXQuIE91ciB2YWx1ZSBkZXBlbmRzIG9uIHRoZXNlIG5vZGVzXG4gICAgbmV3T2JzZXJ2aW5nXyA9IG51bGwgLy8gZHVyaW5nIHRyYWNraW5nIGl0J3MgYW4gYXJyYXkgd2l0aCBuZXcgb2JzZXJ2ZWQgb2JzZXJ2ZXJzXG4gICAgaXNCZWluZ09ic2VydmVkXyA9IGZhbHNlXG4gICAgaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl86IGJvb2xlYW4gPSBmYWxzZVxuICAgIG9ic2VydmVyc18gPSBuZXcgU2V0PElEZXJpdmF0aW9uPigpXG4gICAgZGlmZlZhbHVlXyA9IDBcbiAgICBydW5JZF8gPSAwXG4gICAgbGFzdEFjY2Vzc2VkQnlfID0gMFxuICAgIGxvd2VzdE9ic2VydmVyU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV9cbiAgICB1bmJvdW5kRGVwc0NvdW50XyA9IDBcbiAgICBwcm90ZWN0ZWQgdmFsdWVfOiBUIHwgdW5kZWZpbmVkIHwgQ2F1Z2h0RXhjZXB0aW9uID0gbmV3IENhdWdodEV4Y2VwdGlvbihudWxsKVxuICAgIG5hbWVfOiBzdHJpbmdcbiAgICB0cmlnZ2VyZWRCeV8/OiBzdHJpbmdcbiAgICBpc0NvbXB1dGluZ186IGJvb2xlYW4gPSBmYWxzZSAvLyB0byBjaGVjayBmb3IgY3ljbGVzXG4gICAgaXNSdW5uaW5nU2V0dGVyXzogYm9vbGVhbiA9IGZhbHNlXG4gICAgZGVyaXZhdGlvbjogKCkgPT4gVCAvLyBOLkI6IHVubWluaWZpZWQgYXMgaXQgaXMgdXNlZCBieSBNU1RcbiAgICBzZXR0ZXJfPzogKHZhbHVlOiBUKSA9PiB2b2lkXG4gICAgaXNUcmFjaW5nXzogVHJhY2VNb2RlID0gVHJhY2VNb2RlLk5PTkVcbiAgICBzY29wZV86IE9iamVjdCB8IHVuZGVmaW5lZFxuICAgIHByaXZhdGUgZXF1YWxzXzogSUVxdWFsc0NvbXBhcmVyPGFueT5cbiAgICBwcml2YXRlIHJlcXVpcmVzUmVhY3Rpb25fOiBib29sZWFuXG4gICAga2VlcEFsaXZlXzogYm9vbGVhblxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNvbXB1dGVkIHZhbHVlIGJhc2VkIG9uIGEgZnVuY3Rpb24gZXhwcmVzc2lvbi5cbiAgICAgKlxuICAgICAqIFRoZSBgbmFtZWAgcHJvcGVydHkgaXMgZm9yIGRlYnVnIHB1cnBvc2VzIG9ubHkuXG4gICAgICpcbiAgICAgKiBUaGUgYGVxdWFsc2AgcHJvcGVydHkgc3BlY2lmaWVzIHRoZSBjb21wYXJlciBmdW5jdGlvbiB0byB1c2UgdG8gZGV0ZXJtaW5lIGlmIGEgbmV3bHkgcHJvZHVjZWRcbiAgICAgKiB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHByZXZpb3VzIHZhbHVlLiBUd28gY29tcGFyZXJzIGFyZSBwcm92aWRlZCBpbiB0aGUgbGlicmFyeTsgYGRlZmF1bHRDb21wYXJlcmBcbiAgICAgKiBjb21wYXJlcyBiYXNlZCBvbiBpZGVudGl0eSBjb21wYXJpc29uICg9PT0pLCBhbmQgYHN0cnVjdHVyYWxDb21wYXJlcmAgZGVlcGx5IGNvbXBhcmVzIHRoZSBzdHJ1Y3R1cmUuXG4gICAgICogU3RydWN0dXJhbCBjb21wYXJpc29uIGNhbiBiZSBjb252ZW5pZW50IGlmIHlvdSBhbHdheXMgcHJvZHVjZSBhIG5ldyBhZ2dyZWdhdGVkIG9iamVjdCBhbmRcbiAgICAgKiBkb24ndCB3YW50IHRvIG5vdGlmeSBvYnNlcnZlcnMgaWYgaXQgaXMgc3RydWN0dXJhbGx5IHRoZSBzYW1lLlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciB3b3JraW5nIHdpdGggdmVjdG9ycywgbW91c2UgY29vcmRpbmF0ZXMgZXRjLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElDb21wdXRlZFZhbHVlT3B0aW9uczxUPikge1xuICAgICAgICBpZiAoIW9wdGlvbnMuZ2V0KSBkaWUoMzEpXG4gICAgICAgIHRoaXMuZGVyaXZhdGlvbiA9IG9wdGlvbnMuZ2V0IVxuICAgICAgICB0aGlzLm5hbWVfID0gb3B0aW9ucy5uYW1lIHx8IChfX0RFVl9fID8gXCJDb21wdXRlZFZhbHVlQFwiICsgZ2V0TmV4dElkKCkgOiBcIkNvbXB1dGVkVmFsdWVcIilcbiAgICAgICAgaWYgKG9wdGlvbnMuc2V0KSB7XG4gICAgICAgICAgICB0aGlzLnNldHRlcl8gPSBjcmVhdGVBY3Rpb24oXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IHRoaXMubmFtZV8gKyBcIi1zZXR0ZXJcIiA6IFwiQ29tcHV0ZWRWYWx1ZS1zZXR0ZXJcIixcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNldFxuICAgICAgICAgICAgKSBhcyBhbnlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVxdWFsc18gPVxuICAgICAgICAgICAgb3B0aW9ucy5lcXVhbHMgfHxcbiAgICAgICAgICAgICgob3B0aW9ucyBhcyBhbnkpLmNvbXBhcmVTdHJ1Y3R1cmFsIHx8IChvcHRpb25zIGFzIGFueSkuc3RydWN0XG4gICAgICAgICAgICAgICAgPyBjb21wYXJlci5zdHJ1Y3R1cmFsXG4gICAgICAgICAgICAgICAgOiBjb21wYXJlci5kZWZhdWx0KVxuICAgICAgICB0aGlzLnNjb3BlXyA9IG9wdGlvbnMuY29udGV4dFxuICAgICAgICB0aGlzLnJlcXVpcmVzUmVhY3Rpb25fID0gISFvcHRpb25zLnJlcXVpcmVzUmVhY3Rpb25cbiAgICAgICAgdGhpcy5rZWVwQWxpdmVfID0gISFvcHRpb25zLmtlZXBBbGl2ZVxuICAgIH1cblxuICAgIG9uQmVjb21lU3RhbGVfKCkge1xuICAgICAgICBwcm9wYWdhdGVNYXliZUNoYW5nZWQodGhpcylcbiAgICB9XG5cbiAgICBwdWJsaWMgb25CT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG4gICAgcHVibGljIG9uQlVPTDogU2V0PExhbWJkYT4gfCB1bmRlZmluZWRcblxuICAgIHB1YmxpYyBvbkJPKCkge1xuICAgICAgICBpZiAodGhpcy5vbkJPTCkge1xuICAgICAgICAgICAgdGhpcy5vbkJPTC5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKCkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25CVU8oKSB7XG4gICAgICAgIGlmICh0aGlzLm9uQlVPTCkge1xuICAgICAgICAgICAgdGhpcy5vbkJVT0wuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGlzIGNvbXB1dGVkIHZhbHVlLlxuICAgICAqIFdpbGwgZXZhbHVhdGUgaXRzIGNvbXB1dGF0aW9uIGZpcnN0IGlmIG5lZWRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0KCk6IFQge1xuICAgICAgICBpZiAodGhpcy5pc0NvbXB1dGluZ18pIGRpZSgzMiwgdGhpcy5uYW1lXywgdGhpcy5kZXJpdmF0aW9uKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoID09PSAwICYmXG4gICAgICAgICAgICAvLyAhZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0cGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnNfLnNpemUgPT09IDAgJiZcbiAgICAgICAgICAgICF0aGlzLmtlZXBBbGl2ZV9cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29tcHV0ZSh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2FybkFib3V0VW50cmFja2VkUmVhZF8oKVxuICAgICAgICAgICAgICAgIHN0YXJ0QmF0Y2goKSAvLyBTZWUgcGVyZiB0ZXN0ICdjb21wdXRlZCBtZW1vaXphdGlvbidcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlXyA9IHRoaXMuY29tcHV0ZVZhbHVlXyhmYWxzZSlcbiAgICAgICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXBvcnRPYnNlcnZlZCh0aGlzKVxuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJldlRyYWNraW5nQ29udGV4dCA9IGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmtlZXBBbGl2ZV8gJiYgIXByZXZUcmFja2luZ0NvbnRleHQpIGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dCA9IHRoaXNcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja0FuZENvbXB1dGUoKSkgcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkKHRoaXMpXG4gICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gcHJldlRyYWNraW5nQ29udGV4dFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMudmFsdWVfIVxuXG4gICAgICAgIGlmIChpc0NhdWdodEV4Y2VwdGlvbihyZXN1bHQpKSB0aHJvdyByZXN1bHQuY2F1c2VcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIHB1YmxpYyBzZXQodmFsdWU6IFQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGVyXykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nU2V0dGVyXykgZGllKDMzLCB0aGlzLm5hbWVfKVxuICAgICAgICAgICAgdGhpcy5pc1J1bm5pbmdTZXR0ZXJfID0gdHJ1ZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRlcl8uY2FsbCh0aGlzLnNjb3BlXywgdmFsdWUpXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nU2V0dGVyXyA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBkaWUoMzQsIHRoaXMubmFtZV8pXG4gICAgfVxuXG4gICAgdHJhY2tBbmRDb21wdXRlKCk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBOLkI6IHVubWluaWZpZWQgYXMgaXQgaXMgdXNlZCBieSBNU1RcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnZhbHVlX1xuICAgICAgICBjb25zdCB3YXNTdXNwZW5kZWQgPVxuICAgICAgICAgICAgLyogc2VlICMxMjA4ICovIHRoaXMuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5jb21wdXRlVmFsdWVfKHRydWUpXG5cbiAgICAgICAgaWYgKF9fREVWX18gJiYgaXNTcHlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwiY29tcHV0ZWRcIixcbiAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnNjb3BlXyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB0aGlzLnZhbHVlXyxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgfSBhcyBJQ29tcHV0ZWREaWRDaGFuZ2UpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGFuZ2VkID1cbiAgICAgICAgICAgIHdhc1N1c3BlbmRlZCB8fFxuICAgICAgICAgICAgaXNDYXVnaHRFeGNlcHRpb24ob2xkVmFsdWUpIHx8XG4gICAgICAgICAgICBpc0NhdWdodEV4Y2VwdGlvbihuZXdWYWx1ZSkgfHxcbiAgICAgICAgICAgICF0aGlzLmVxdWFsc18ob2xkVmFsdWUsIG5ld1ZhbHVlKVxuXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlXyA9IG5ld1ZhbHVlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hhbmdlZFxuICAgIH1cblxuICAgIGNvbXB1dGVWYWx1ZV8odHJhY2s6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5pc0NvbXB1dGluZ18gPSB0cnVlXG4gICAgICAgIC8vIGRvbid0IGFsbG93IHN0YXRlIGNoYW5nZXMgZHVyaW5nIGNvbXB1dGF0aW9uXG4gICAgICAgIGNvbnN0IHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KGZhbHNlKVxuICAgICAgICBsZXQgcmVzOiBUIHwgQ2F1Z2h0RXhjZXB0aW9uXG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgICAgcmVzID0gdHJhY2tEZXJpdmVkRnVuY3Rpb24odGhpcywgdGhpcy5kZXJpdmF0aW9uLCB0aGlzLnNjb3BlXylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gdGhpcy5kZXJpdmF0aW9uLmNhbGwodGhpcy5zY29wZV8pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IHRoaXMuZGVyaXZhdGlvbi5jYWxsKHRoaXMuc2NvcGVfKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gbmV3IENhdWdodEV4Y2VwdGlvbihlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChwcmV2KVxuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nXyA9IGZhbHNlXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9XG5cbiAgICBzdXNwZW5kXygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmtlZXBBbGl2ZV8pIHtcbiAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpXG4gICAgICAgICAgICB0aGlzLnZhbHVlXyA9IHVuZGVmaW5lZCAvLyBkb24ndCBob2xkIG9uIHRvIGNvbXB1dGVkIHZhbHVlIVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JzZXJ2ZV8obGlzdGVuZXI6IChjaGFuZ2U6IElDb21wdXRlZERpZENoYW5nZTxUPikgPT4gdm9pZCwgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhbik6IExhbWJkYSB7XG4gICAgICAgIGxldCBmaXJzdFRpbWUgPSB0cnVlXG4gICAgICAgIGxldCBwcmV2VmFsdWU6IFQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIGF1dG9ydW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETzogd2h5IGlzIHRoaXMgaW4gYSBkaWZmZXJlbnQgcGxhY2UgdGhhbiB0aGUgc3B5UmVwb3J0KCkgZnVuY3Rpb24/IGluIGFsbCBvdGhlciBvYnNlcnZhYmxlcyBpdCdzIGNhbGxlZCBpbiB0aGUgc2FtZSBwbGFjZVxuICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gdGhpcy5nZXQoKVxuICAgICAgICAgICAgaWYgKCFmaXJzdFRpbWUgfHwgZmlyZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJjb21wdXRlZFwiLFxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHByZXZWYWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2VcbiAgICAgICAgICAgIHByZXZWYWx1ZSA9IG5ld1ZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgd2FybkFib3V0VW50cmFja2VkUmVhZF8oKSB7XG4gICAgICAgIGlmICghX19ERVZfXykgcmV0dXJuXG4gICAgICAgIGlmICh0aGlzLnJlcXVpcmVzUmVhY3Rpb25fID09PSB0cnVlKSB7XG4gICAgICAgICAgICBkaWUoYFttb2J4XSBDb21wdXRlZCB2YWx1ZSAke3RoaXMubmFtZV99IGlzIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRgKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzVHJhY2luZ18gIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBgW21vYngudHJhY2VdICcke3RoaXMubmFtZV99JyBpcyBiZWluZyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0LiBEb2luZyBhIGZ1bGwgcmVjb21wdXRlYFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS5jb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICBgW21vYnhdIENvbXB1dGVkIHZhbHVlICR7dGhpcy5uYW1lX30gaXMgYmVpbmcgcmVhZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dC4gRG9pbmcgYSBmdWxsIHJlY29tcHV0ZWBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5uYW1lX31bJHt0aGlzLmRlcml2YXRpb24udG9TdHJpbmcoKX1dYFxuICAgIH1cblxuICAgIHZhbHVlT2YoKTogVCB7XG4gICAgICAgIHJldHVybiB0b1ByaW1pdGl2ZSh0aGlzLmdldCgpKVxuICAgIH1cblxuICAgIFtTeW1ib2wudG9QcmltaXRpdmVdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKClcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBpc0NvbXB1dGVkVmFsdWUgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiQ29tcHV0ZWRWYWx1ZVwiLCBDb21wdXRlZFZhbHVlKVxuIiwiaW1wb3J0IHtcbiAgICBJQXRvbSxcbiAgICBJRGVwVHJlZU5vZGUsXG4gICAgSU9ic2VydmFibGUsXG4gICAgYWRkT2JzZXJ2ZXIsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNDb21wdXRlZFZhbHVlLFxuICAgIHJlbW92ZU9ic2VydmVyXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBlbnVtIElEZXJpdmF0aW9uU3RhdGVfIHtcbiAgICAvLyBiZWZvcmUgYmVpbmcgcnVuIG9yIChvdXRzaWRlIGJhdGNoIGFuZCBub3QgYmVpbmcgb2JzZXJ2ZWQpXG4gICAgLy8gYXQgdGhpcyBwb2ludCBkZXJpdmF0aW9uIGlzIG5vdCBob2xkaW5nIGFueSBkYXRhIGFib3V0IGRlcGVuZGVuY3kgdHJlZVxuICAgIE5PVF9UUkFDS0lOR18gPSAtMSxcbiAgICAvLyBubyBzaGFsbG93IGRlcGVuZGVuY3kgY2hhbmdlZCBzaW5jZSBsYXN0IGNvbXB1dGF0aW9uXG4gICAgLy8gd29uJ3QgcmVjYWxjdWxhdGUgZGVyaXZhdGlvblxuICAgIC8vIHRoaXMgaXMgd2hhdCBtYWtlcyBtb2J4IGZhc3RcbiAgICBVUF9UT19EQVRFXyA9IDAsXG4gICAgLy8gc29tZSBkZWVwIGRlcGVuZGVuY3kgY2hhbmdlZCwgYnV0IGRvbid0IGtub3cgaWYgc2hhbGxvdyBkZXBlbmRlbmN5IGNoYW5nZWRcbiAgICAvLyB3aWxsIHJlcXVpcmUgdG8gY2hlY2sgZmlyc3QgaWYgVVBfVE9fREFURSBvciBQT1NTSUJMWV9TVEFMRVxuICAgIC8vIGN1cnJlbnRseSBvbmx5IENvbXB1dGVkVmFsdWUgd2lsbCBwcm9wYWdhdGUgUE9TU0lCTFlfU1RBTEVcbiAgICAvL1xuICAgIC8vIGhhdmluZyB0aGlzIHN0YXRlIGlzIHNlY29uZCBiaWcgb3B0aW1pemF0aW9uOlxuICAgIC8vIGRvbid0IGhhdmUgdG8gcmVjb21wdXRlIG9uIGV2ZXJ5IGRlcGVuZGVuY3kgY2hhbmdlLCBidXQgb25seSB3aGVuIGl0J3MgbmVlZGVkXG4gICAgUE9TU0lCTFlfU1RBTEVfID0gMSxcbiAgICAvLyBBIHNoYWxsb3cgZGVwZW5kZW5jeSBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0IGNvbXB1dGF0aW9uIGFuZCB0aGUgZGVyaXZhdGlvblxuICAgIC8vIHdpbGwgbmVlZCB0byByZWNvbXB1dGUgd2hlbiBpdCdzIG5lZWRlZCBuZXh0LlxuICAgIFNUQUxFXyA9IDJcbn1cblxuZXhwb3J0IGVudW0gVHJhY2VNb2RlIHtcbiAgICBOT05FLFxuICAgIExPRyxcbiAgICBCUkVBS1xufVxuXG4vKipcbiAqIEEgZGVyaXZhdGlvbiBpcyBldmVyeXRoaW5nIHRoYXQgY2FuIGJlIGRlcml2ZWQgZnJvbSB0aGUgc3RhdGUgKGFsbCB0aGUgYXRvbXMpIGluIGEgcHVyZSBtYW5uZXIuXG4gKiBTZWUgaHR0cHM6Ly9tZWRpdW0uY29tL0Btd2VzdHN0cmF0ZS9iZWNvbWluZy1mdWxseS1yZWFjdGl2ZS1hbi1pbi1kZXB0aC1leHBsYW5hdGlvbi1vZi1tb2JzZXJ2YWJsZS01NTk5NTI2MmEyNTQjLnh2Ymg2cWQ3NFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEZXJpdmF0aW9uIGV4dGVuZHMgSURlcFRyZWVOb2RlIHtcbiAgICBvYnNlcnZpbmdfOiBJT2JzZXJ2YWJsZVtdXG4gICAgbmV3T2JzZXJ2aW5nXzogbnVsbCB8IElPYnNlcnZhYmxlW11cbiAgICBkZXBlbmRlbmNpZXNTdGF0ZV86IElEZXJpdmF0aW9uU3RhdGVfXG4gICAgLyoqXG4gICAgICogSWQgb2YgdGhlIGN1cnJlbnQgcnVuIG9mIGEgZGVyaXZhdGlvbi4gRWFjaCB0aW1lIHRoZSBkZXJpdmF0aW9uIGlzIHRyYWNrZWRcbiAgICAgKiB0aGlzIG51bWJlciBpcyBpbmNyZWFzZWQgYnkgb25lLiBUaGlzIG51bWJlciBpcyBnbG9iYWxseSB1bmlxdWVcbiAgICAgKi9cbiAgICBydW5JZF86IG51bWJlclxuICAgIC8qKlxuICAgICAqIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgdXNlZCBieSB0aGUgZGVyaXZhdGlvbiBpbiB0aGlzIHJ1biwgd2hpY2ggaGFzIG5vdCBiZWVuIGJvdW5kIHlldC5cbiAgICAgKi9cbiAgICB1bmJvdW5kRGVwc0NvdW50XzogbnVtYmVyXG4gICAgb25CZWNvbWVTdGFsZV8oKTogdm9pZFxuICAgIGlzVHJhY2luZ186IFRyYWNlTW9kZVxuXG4gICAgLyoqXG4gICAgICogIHdhcm4gaWYgdGhlIGRlcml2YXRpb24gaGFzIG5vIGRlcGVuZGVuY2llcyBhZnRlciBjcmVhdGlvbi91cGRhdGVcbiAgICAgKi9cbiAgICByZXF1aXJlc09ic2VydmFibGVfPzogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgQ2F1Z2h0RXhjZXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgY2F1c2U6IGFueSkge1xuICAgICAgICAvLyBFbXB0eVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2F1Z2h0RXhjZXB0aW9uKGU6IGFueSk6IGUgaXMgQ2F1Z2h0RXhjZXB0aW9uIHtcbiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENhdWdodEV4Y2VwdGlvblxufVxuXG4vKipcbiAqIEZpbmRzIG91dCB3aGV0aGVyIGFueSBkZXBlbmRlbmN5IG9mIHRoZSBkZXJpdmF0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuICogSWYgZGVwZW5kZW5jaWVzU3RhdGUgaXMgMSB0aGVuIGl0IHdpbGwgcmVjYWxjdWxhdGUgZGVwZW5kZW5jaWVzLFxuICogaWYgYW55IGRlcGVuZGVuY3kgY2hhbmdlZCBpdCB3aWxsIHByb3BhZ2F0ZSBpdCBieSBjaGFuZ2luZyBkZXBlbmRlbmNpZXNTdGF0ZSB0byAyLlxuICpcbiAqIEJ5IGl0ZXJhdGluZyBvdmVyIHRoZSBkZXBlbmRlbmNpZXMgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IHdlcmUgcmVwb3J0ZWQgYW5kXG4gKiBzdG9wcGluZyBvbiB0aGUgZmlyc3QgY2hhbmdlLCBhbGwgdGhlIHJlY2FsY3VsYXRpb25zIGFyZSBvbmx5IGNhbGxlZCBmb3IgQ29tcHV0ZWRWYWx1ZXNcbiAqIHRoYXQgd2lsbCBiZSB0cmFja2VkIGJ5IGRlcml2YXRpb24uIFRoYXQgaXMgYmVjYXVzZSB3ZSBhc3N1bWUgdGhhdCBpZiB0aGUgZmlyc3QgeFxuICogZGVwZW5kZW5jaWVzIG9mIHRoZSBkZXJpdmF0aW9uIGRvZXNuJ3QgY2hhbmdlIHRoZW4gdGhlIGRlcml2YXRpb24gc2hvdWxkIHJ1biB0aGUgc2FtZSB3YXlcbiAqIHVwIHVudGlsIGFjY2Vzc2luZyB4LXRoIGRlcGVuZGVuY3kuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRDb21wdXRlKGRlcml2YXRpb246IElEZXJpdmF0aW9uKTogYm9vbGVhbiB7XG4gICAgc3dpdGNoIChkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlXykge1xuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HXzpcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV86XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGVfLlBPU1NJQkxZX1NUQUxFXzoge1xuICAgICAgICAgICAgLy8gc3RhdGUgcHJvcGFnYXRpb24gY2FuIG9jY3VyIG91dHNpZGUgb2YgYWN0aW9uL3JlYWN0aXZlIGNvbnRleHQgIzIxOTVcbiAgICAgICAgICAgIGNvbnN0IHByZXZBbGxvd1N0YXRlUmVhZHMgPSBhbGxvd1N0YXRlUmVhZHNTdGFydCh0cnVlKVxuICAgICAgICAgICAgY29uc3QgcHJldlVudHJhY2tlZCA9IHVudHJhY2tlZFN0YXJ0KCkgLy8gbm8gbmVlZCBmb3IgdGhvc2UgY29tcHV0ZWRzIHRvIGJlIHJlcG9ydGVkLCB0aGV5IHdpbGwgYmUgcGlja2VkIHVwIGluIHRyYWNrRGVyaXZlZEZ1bmN0aW9uLlxuICAgICAgICAgICAgY29uc3Qgb2JzID0gZGVyaXZhdGlvbi5vYnNlcnZpbmdfLFxuICAgICAgICAgICAgICAgIGwgPSBvYnMubGVuZ3RoXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IG9ic1tpXVxuICAgICAgICAgICAgICAgIGlmIChpc0NvbXB1dGVkVmFsdWUob2JqKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmdldCgpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5nZXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBub3QgaW50ZXJlc3RlZCBpbiB0aGUgdmFsdWUgKm9yKiBleGNlcHRpb24gYXQgdGhpcyBtb21lbnQsIGJ1dCBpZiB0aGVyZSBpcyBvbmUsIG5vdGlmeSBhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIENvbXB1dGVkVmFsdWUgYG9iamAgYWN0dWFsbHkgY2hhbmdlZCBpdCB3aWxsIGJlIGNvbXB1dGVkIGFuZCBwcm9wYWdhdGVkIHRvIGl0cyBvYnNlcnZlcnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBgZGVyaXZhdGlvbmAgaXMgYW4gb2JzZXJ2ZXIgb2YgYG9iamBcbiAgICAgICAgICAgICAgICAgICAgLy8gaW52YXJpYW50U2hvdWxkQ29tcHV0ZShkZXJpdmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfIGFzIGFueSkgPT09IElEZXJpdmF0aW9uU3RhdGVfLlNUQUxFXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVbnRyYWNrZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMChkZXJpdmF0aW9uKVxuICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVbnRyYWNrZWQpXG4gICAgICAgICAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wdXRpbmdEZXJpdmF0aW9uKCkge1xuICAgIHJldHVybiBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gIT09IG51bGwgLy8gZmlsdGVyIG91dCBhY3Rpb25zIGluc2lkZSBjb21wdXRhdGlvbnNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkKGF0b206IElBdG9tKSB7XG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBoYXNPYnNlcnZlcnMgPSBhdG9tLm9ic2VydmVyc18uc2l6ZSA+IDBcbiAgICAvLyBTaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIGNoYW5nZSBvYnNlcnZlZCBzdGF0ZSBvdXRzaWRlIHN0cmljdCBtb2RlLCBleGNlcHQgZHVyaW5nIGluaXRpYWxpemF0aW9uLCBzZWUgIzU2M1xuICAgIGlmICghZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgJiYgKGhhc09ic2VydmVycyB8fCBnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9ucyA9PT0gXCJhbHdheXNcIikpXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiW01vYlhdIFwiICtcbiAgICAgICAgICAgICAgICAoZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgPyBcIlNpbmNlIHN0cmljdC1tb2RlIGlzIGVuYWJsZWQsIGNoYW5naW5nIChvYnNlcnZlZCkgb2JzZXJ2YWJsZSB2YWx1ZXMgd2l0aG91dCB1c2luZyBhbiBhY3Rpb24gaXMgbm90IGFsbG93ZWQuIFRyaWVkIHRvIG1vZGlmeTogXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIlNpZGUgZWZmZWN0cyBsaWtlIGNoYW5naW5nIHN0YXRlIGFyZSBub3QgYWxsb3dlZCBhdCB0aGlzIHBvaW50LiBBcmUgeW91IHRyeWluZyB0byBtb2RpZnkgc3RhdGUgZnJvbSwgZm9yIGV4YW1wbGUsIGEgY29tcHV0ZWQgdmFsdWUgb3IgdGhlIHJlbmRlciBmdW5jdGlvbiBvZiBhIFJlYWN0IGNvbXBvbmVudD8gWW91IGNhbiB3cmFwIHNpZGUgZWZmZWN0cyBpbiAncnVuSW5BY3Rpb24nIChvciBkZWNvcmF0ZSBmdW5jdGlvbnMgd2l0aCAnYWN0aW9uJykgaWYgbmVlZGVkLiBUcmllZCB0byBtb2RpZnk6IFwiKSArXG4gICAgICAgICAgICAgICAgYXRvbS5uYW1lX1xuICAgICAgICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lmU3RhdGVSZWFkc0FyZUFsbG93ZWQob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzICYmIGdsb2JhbFN0YXRlLm9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW21vYnhdIE9ic2VydmFibGUgJHtvYnNlcnZhYmxlLm5hbWVffSBiZWluZyByZWFkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0YClcbiAgICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGBmYCBhbmQgdHJhY2tzIHdoaWNoIG9ic2VydmFibGVzIGFyZSBiZWluZyBhY2Nlc3NlZC5cbiAqIFRoZSB0cmFja2luZyBpbmZvcm1hdGlvbiBpcyBzdG9yZWQgb24gdGhlIGBkZXJpdmF0aW9uYCBvYmplY3QgYW5kIHRoZSBkZXJpdmF0aW9uIGlzIHJlZ2lzdGVyZWRcbiAqIGFzIG9ic2VydmVyIG9mIGFueSBvZiB0aGUgYWNjZXNzZWQgb2JzZXJ2YWJsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFja0Rlcml2ZWRGdW5jdGlvbjxUPihkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbiwgZjogKCkgPT4gVCwgY29udGV4dDogYW55KSB7XG4gICAgY29uc3QgcHJldkFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpXG4gICAgLy8gcHJlIGFsbG9jYXRlIGFycmF5IGFsbG9jYXRpb24gKyByb29tIGZvciB2YXJpYXRpb24gaW4gZGVwc1xuICAgIC8vIGFycmF5IHdpbGwgYmUgdHJpbW1lZCBieSBiaW5kRGVwZW5kZW5jaWVzXG4gICAgY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAoZGVyaXZhdGlvbilcbiAgICBkZXJpdmF0aW9uLm5ld09ic2VydmluZ18gPSBuZXcgQXJyYXkoZGVyaXZhdGlvbi5vYnNlcnZpbmdfLmxlbmd0aCArIDEwMClcbiAgICBkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnRfID0gMFxuICAgIGRlcml2YXRpb24ucnVuSWRfID0gKytnbG9iYWxTdGF0ZS5ydW5JZFxuICAgIGNvbnN0IHByZXZUcmFja2luZyA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvblxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IGRlcml2YXRpb25cbiAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoKytcbiAgICBsZXQgcmVzdWx0XG4gICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPT09IHRydWUpIHtcbiAgICAgICAgcmVzdWx0ID0gZi5jYWxsKGNvbnRleHQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGYuY2FsbChjb250ZXh0KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQ2F1Z2h0RXhjZXB0aW9uKGUpXG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuaW5CYXRjaC0tXG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gcHJldlRyYWNraW5nXG4gICAgYmluZERlcGVuZGVuY2llcyhkZXJpdmF0aW9uKVxuXG4gICAgd2FybkFib3V0RGVyaXZhdGlvbldpdGhvdXREZXBlbmRlbmNpZXMoZGVyaXZhdGlvbilcbiAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcylcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHdhcm5BYm91dERlcml2YXRpb25XaXRob3V0RGVwZW5kZW5jaWVzKGRlcml2YXRpb246IElEZXJpdmF0aW9uKSB7XG4gICAgaWYgKCFfX0RFVl9fKSByZXR1cm5cblxuICAgIGlmIChkZXJpdmF0aW9uLm9ic2VydmluZ18ubGVuZ3RoICE9PSAwKSByZXR1cm5cblxuICAgIGlmIChnbG9iYWxTdGF0ZS5yZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZSB8fCBkZXJpdmF0aW9uLnJlcXVpcmVzT2JzZXJ2YWJsZV8pIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgYFttb2J4XSBEZXJpdmF0aW9uICR7ZGVyaXZhdGlvbi5uYW1lX30gaXMgY3JlYXRlZC91cGRhdGVkIHdpdGhvdXQgcmVhZGluZyBhbnkgb2JzZXJ2YWJsZSB2YWx1ZWBcbiAgICAgICAgKVxuICAgIH1cbn1cblxuLyoqXG4gKiBkaWZmcyBuZXdPYnNlcnZpbmcgd2l0aCBvYnNlcnZpbmcuXG4gKiB1cGRhdGUgb2JzZXJ2aW5nIHRvIGJlIG5ld09ic2VydmluZyB3aXRoIHVuaXF1ZSBvYnNlcnZhYmxlc1xuICogbm90aWZ5IG9ic2VydmVycyB0aGF0IGJlY29tZSBvYnNlcnZlZC91bm9ic2VydmVkXG4gKi9cbmZ1bmN0aW9uIGJpbmREZXBlbmRlbmNpZXMoZGVyaXZhdGlvbjogSURlcml2YXRpb24pIHtcbiAgICAvLyBpbnZhcmlhbnQoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZSAhPT0gSURlcml2YXRpb25TdGF0ZS5OT1RfVFJBQ0tJTkcsIFwiSU5URVJOQUwgRVJST1IgYmluZERlcGVuZGVuY2llcyBleHBlY3RzIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgIT09IC0xXCIpO1xuICAgIGNvbnN0IHByZXZPYnNlcnZpbmcgPSBkZXJpdmF0aW9uLm9ic2VydmluZ19cbiAgICBjb25zdCBvYnNlcnZpbmcgPSAoZGVyaXZhdGlvbi5vYnNlcnZpbmdfID0gZGVyaXZhdGlvbi5uZXdPYnNlcnZpbmdfISlcbiAgICBsZXQgbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlID0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV9cblxuICAgIC8vIEdvIHRocm91Z2ggYWxsIG5ldyBvYnNlcnZhYmxlcyBhbmQgY2hlY2sgZGlmZlZhbHVlOiAodGhpcyBsaXN0IGNhbiBjb250YWluIGR1cGxpY2F0ZXMpOlxuICAgIC8vICAgMDogZmlyc3Qgb2NjdXJyZW5jZSwgY2hhbmdlIHRvIDEgYW5kIGtlZXAgaXRcbiAgICAvLyAgIDE6IGV4dHJhIG9jY3VycmVuY2UsIGRyb3AgaXRcbiAgICBsZXQgaTAgPSAwLFxuICAgICAgICBsID0gZGVyaXZhdGlvbi51bmJvdW5kRGVwc0NvdW50X1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGRlcCA9IG9ic2VydmluZ1tpXVxuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZV8gPT09IDApIHtcbiAgICAgICAgICAgIGRlcC5kaWZmVmFsdWVfID0gMVxuICAgICAgICAgICAgaWYgKGkwICE9PSBpKSBvYnNlcnZpbmdbaTBdID0gZGVwXG4gICAgICAgICAgICBpMCsrXG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGNhc3QgaXMgJ3NhZmUnIGhlcmUsIGJlY2F1c2UgaWYgZGVwIGlzIElPYnNlcnZhYmxlLCBgZGVwZW5kZW5jaWVzU3RhdGVgIHdpbGwgYmUgdW5kZWZpbmVkLFxuICAgICAgICAvLyBub3QgaGl0dGluZyB0aGUgY29uZGl0aW9uXG4gICAgICAgIGlmICgoKGRlcCBhcyBhbnkpIGFzIElEZXJpdmF0aW9uKS5kZXBlbmRlbmNpZXNTdGF0ZV8gPiBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSA9ICgoZGVwIGFzIGFueSkgYXMgSURlcml2YXRpb24pLmRlcGVuZGVuY2llc1N0YXRlX1xuICAgICAgICB9XG4gICAgfVxuICAgIG9ic2VydmluZy5sZW5ndGggPSBpMFxuXG4gICAgZGVyaXZhdGlvbi5uZXdPYnNlcnZpbmdfID0gbnVsbCAvLyBuZXdPYnNlcnZpbmcgc2hvdWxkbid0IGJlIG5lZWRlZCBvdXRzaWRlIHRyYWNraW5nIChzdGF0ZW1lbnQgbW92ZWQgZG93biB0byB3b3JrIGFyb3VuZCBGRiBidWcsIHNlZSAjNjE0KVxuXG4gICAgLy8gR28gdGhyb3VnaCBhbGwgb2xkIG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6IChpdCBpcyB1bmlxdWUgYWZ0ZXIgbGFzdCBiaW5kRGVwZW5kZW5jaWVzKVxuICAgIC8vICAgMDogaXQncyBub3QgaW4gbmV3IG9ic2VydmFibGVzLCB1bm9ic2VydmUgaXRcbiAgICAvLyAgIDE6IGl0IGtlZXBzIGJlaW5nIG9ic2VydmVkLCBkb24ndCB3YW50IHRvIG5vdGlmeSBpdC4gY2hhbmdlIHRvIDBcbiAgICBsID0gcHJldk9ic2VydmluZy5sZW5ndGhcbiAgICB3aGlsZSAobC0tKSB7XG4gICAgICAgIGNvbnN0IGRlcCA9IHByZXZPYnNlcnZpbmdbbF1cbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWVfID09PSAwKSB7XG4gICAgICAgICAgICByZW1vdmVPYnNlcnZlcihkZXAsIGRlcml2YXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgZGVwLmRpZmZWYWx1ZV8gPSAwXG4gICAgfVxuXG4gICAgLy8gR28gdGhyb3VnaCBhbGwgbmV3IG9ic2VydmFibGVzIGFuZCBjaGVjayBkaWZmVmFsdWU6IChub3cgaXQgc2hvdWxkIGJlIHVuaXF1ZSlcbiAgICAvLyAgIDA6IGl0IHdhcyBzZXQgdG8gMCBpbiBsYXN0IGxvb3AuIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcuXG4gICAgLy8gICAxOiBpdCB3YXNuJ3Qgb2JzZXJ2ZWQsIGxldCdzIG9ic2VydmUgaXQuIHNldCBiYWNrIHRvIDBcbiAgICB3aGlsZSAoaTAtLSkge1xuICAgICAgICBjb25zdCBkZXAgPSBvYnNlcnZpbmdbaTBdXG4gICAgICAgIGlmIChkZXAuZGlmZlZhbHVlXyA9PT0gMSkge1xuICAgICAgICAgICAgZGVwLmRpZmZWYWx1ZV8gPSAwXG4gICAgICAgICAgICBhZGRPYnNlcnZlcihkZXAsIGRlcml2YXRpb24pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTb21lIG5ldyBvYnNlcnZlZCBkZXJpdmF0aW9ucyBtYXkgYmVjb21lIHN0YWxlIGR1cmluZyB0aGlzIGRlcml2YXRpb24gY29tcHV0YXRpb25cbiAgICAvLyBzbyB0aGV5IGhhdmUgaGFkIG5vIGNoYW5jZSB0byBwcm9wYWdhdGUgc3RhbGVuZXNzICgjOTE2KVxuICAgIGlmIChsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUgIT09IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfKSB7XG4gICAgICAgIGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfID0gbG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlXG4gICAgICAgIGRlcml2YXRpb24ub25CZWNvbWVTdGFsZV8oKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyT2JzZXJ2aW5nKGRlcml2YXRpb246IElEZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwLCBcIklOVEVSTkFMIEVSUk9SIGNsZWFyT2JzZXJ2aW5nIHNob3VsZCBiZSBjYWxsZWQgb25seSBpbnNpZGUgYmF0Y2hcIik7XG4gICAgY29uc3Qgb2JzID0gZGVyaXZhdGlvbi5vYnNlcnZpbmdfXG4gICAgZGVyaXZhdGlvbi5vYnNlcnZpbmdfID0gW11cbiAgICBsZXQgaSA9IG9icy5sZW5ndGhcbiAgICB3aGlsZSAoaS0tKSByZW1vdmVPYnNlcnZlcihvYnNbaV0sIGRlcml2YXRpb24pXG5cbiAgICBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLk5PVF9UUkFDS0lOR19cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVudHJhY2tlZDxUPihhY3Rpb246ICgpID0+IFQpOiBUIHtcbiAgICBjb25zdCBwcmV2ID0gdW50cmFja2VkU3RhcnQoKVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24oKVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVudHJhY2tlZEVuZChwcmV2KVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVudHJhY2tlZFN0YXJ0KCk6IElEZXJpdmF0aW9uIHwgbnVsbCB7XG4gICAgY29uc3QgcHJldiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvblxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IG51bGxcbiAgICByZXR1cm4gcHJldlxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW50cmFja2VkRW5kKHByZXY6IElEZXJpdmF0aW9uIHwgbnVsbCkge1xuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IHByZXZcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93U3RhdGVSZWFkc1N0YXJ0KGFsbG93U3RhdGVSZWFkczogYm9vbGVhbikge1xuICAgIGNvbnN0IHByZXYgPSBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHNcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHMgPSBhbGxvd1N0YXRlUmVhZHNcbiAgICByZXR1cm4gcHJldlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsb3dTdGF0ZVJlYWRzRW5kKHByZXY6IGJvb2xlYW4pIHtcbiAgICBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlUmVhZHMgPSBwcmV2XG59XG5cbi8qKlxuICogbmVlZGVkIHRvIGtlZXAgYGxvd2VzdE9ic2VydmVyU3RhdGVgIGNvcnJlY3QuIHdoZW4gY2hhbmdpbmcgZnJvbSAoMiBvciAxKSB0byAwXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAoZGVyaXZhdGlvbjogSURlcml2YXRpb24pIHtcbiAgICBpZiAoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZV8gPT09IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfKSByZXR1cm5cbiAgICBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfXG5cbiAgICBjb25zdCBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZ19cbiAgICBsZXQgaSA9IG9icy5sZW5ndGhcbiAgICB3aGlsZSAoaS0tKSBvYnNbaV0ubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFX1xufVxuIiwiaW1wb3J0IHsgSURlcml2YXRpb24sIElPYnNlcnZhYmxlLCBSZWFjdGlvbiwgZGllLCBnZXRHbG9iYWwgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuaW1wb3J0IHsgQ29tcHV0ZWRWYWx1ZSB9IGZyb20gXCIuL2NvbXB1dGVkdmFsdWVcIlxuXG4vKipcbiAqIFRoZXNlIHZhbHVlcyB3aWxsIHBlcnNpc3QgaWYgZ2xvYmFsIHN0YXRlIGlzIHJlc2V0XG4gKi9cbmNvbnN0IHBlcnNpc3RlbnRLZXlzOiAoa2V5b2YgTW9iWEdsb2JhbHMpW10gPSBbXG4gICAgXCJtb2J4R3VpZFwiLFxuICAgIFwic3B5TGlzdGVuZXJzXCIsXG4gICAgXCJlbmZvcmNlQWN0aW9uc1wiLFxuICAgIFwiY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uXCIsXG4gICAgXCJyZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZVwiLFxuICAgIFwib2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb25cIixcbiAgICBcImFsbG93U3RhdGVSZWFkc1wiLFxuICAgIFwiZGlzYWJsZUVycm9yQm91bmRhcmllc1wiLFxuICAgIFwicnVuSWRcIixcbiAgICBcIlVOQ0hBTkdFRFwiLFxuICAgIFwidXNlUHJveGllc1wiXG5dXG5cbmV4cG9ydCB0eXBlIElVTkNIQU5HRUQgPSB7fVxuXG5leHBvcnQgY2xhc3MgTW9iWEdsb2JhbHMge1xuICAgIC8qKlxuICAgICAqIE1vYlhHbG9iYWxzIHZlcnNpb24uXG4gICAgICogTW9iWCBjb21wYXRpYmxpdHkgd2l0aCBvdGhlciB2ZXJzaW9ucyBsb2FkZWQgaW4gbWVtb3J5IGFzIGxvbmcgYXMgdGhpcyB2ZXJzaW9uIG1hdGNoZXMuXG4gICAgICogSXQgaW5kaWNhdGVzIHRoYXQgdGhlIGdsb2JhbCBzdGF0ZSBzdGlsbCBzdG9yZXMgc2ltaWxhciBpbmZvcm1hdGlvblxuICAgICAqXG4gICAgICogTi5COiB0aGlzIHZlcnNpb24gaXMgdW5yZWxhdGVkIHRvIHRoZSBwYWNrYWdlIHZlcnNpb24gb2YgTW9iWCwgYW5kIGlzIG9ubHkgdGhlIHZlcnNpb24gb2YgdGhlXG4gICAgICogaW50ZXJuYWwgc3RhdGUgc3RvcmFnZSBvZiBNb2JYLCBhbmQgY2FuIGJlIHRoZSBzYW1lIGFjcm9zcyBtYW55IGRpZmZlcmVudCBwYWNrYWdlIHZlcnNpb25zXG4gICAgICovXG4gICAgdmVyc2lvbiA9IDZcblxuICAgIC8qKlxuICAgICAqIGdsb2JhbGx5IHVuaXF1ZSB0b2tlbiB0byBzaWduYWwgdW5jaGFuZ2VkXG4gICAgICovXG4gICAgVU5DSEFOR0VEOiBJVU5DSEFOR0VEID0ge31cblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnRseSBydW5uaW5nIGRlcml2YXRpb25cbiAgICAgKi9cbiAgICB0cmFja2luZ0Rlcml2YXRpb246IElEZXJpdmF0aW9uIHwgbnVsbCA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnRseSBydW5uaW5nIHJlYWN0aW9uLiBUaGlzIGRldGVybWluZXMgaWYgd2UgY3VycmVudGx5IGhhdmUgYSByZWFjdGl2ZSBjb250ZXh0LlxuICAgICAqIChUcmFja2luZyBkZXJpdmF0aW9uIGlzIGFsc28gc2V0IGZvciB0ZW1wb3JhbCB0cmFja2luZyBvZiBjb21wdXRlZCB2YWx1ZXMgaW5zaWRlIGFjdGlvbnMsXG4gICAgICogYnV0IHRyYWNraW5nUmVhY3Rpb24gY2FuIG9ubHkgYmUgc2V0IGJ5IGEgZm9ybSBvZiBSZWFjdGlvbilcbiAgICAgKi9cbiAgICB0cmFja2luZ0NvbnRleHQ6IFJlYWN0aW9uIHwgQ29tcHV0ZWRWYWx1ZTxhbnk+IHwgbnVsbCA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEVhY2ggdGltZSBhIGRlcml2YXRpb24gaXMgdHJhY2tlZCwgaXQgaXMgYXNzaWduZWQgYSB1bmlxdWUgcnVuLWlkXG4gICAgICovXG4gICAgcnVuSWQgPSAwXG5cbiAgICAvKipcbiAgICAgKiAnZ3VpZCcgZm9yIGdlbmVyYWwgcHVycG9zZS4gV2lsbCBiZSBwZXJzaXN0ZWQgYW1vbmdzdCByZXNldHMuXG4gICAgICovXG4gICAgbW9ieEd1aWQgPSAwXG5cbiAgICAvKipcbiAgICAgKiBBcmUgd2UgaW4gYSBiYXRjaCBibG9jaz8gKGFuZCBob3cgbWFueSBvZiB0aGVtKVxuICAgICAqL1xuICAgIGluQmF0Y2g6IG51bWJlciA9IDBcblxuICAgIC8qKlxuICAgICAqIE9ic2VydmFibGVzIHRoYXQgZG9uJ3QgaGF2ZSBvYnNlcnZlcnMgYW55bW9yZSwgYW5kIGFyZSBhYm91dCB0byBiZVxuICAgICAqIHN1c3BlbmRlZCwgdW5sZXNzIHNvbWVib2R5IGVsc2UgYWNjZXNzZXMgaXQgaW4gdGhlIHNhbWUgYmF0Y2hcbiAgICAgKlxuICAgICAqIEB0eXBlIHtJT2JzZXJ2YWJsZVtdfVxuICAgICAqL1xuICAgIHBlbmRpbmdVbm9ic2VydmF0aW9uczogSU9ic2VydmFibGVbXSA9IFtdXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHNjaGVkdWxlZCwgbm90IHlldCBleGVjdXRlZCwgcmVhY3Rpb25zLlxuICAgICAqL1xuICAgIHBlbmRpbmdSZWFjdGlvbnM6IFJlYWN0aW9uW10gPSBbXVxuXG4gICAgLyoqXG4gICAgICogQXJlIHdlIGN1cnJlbnRseSBwcm9jZXNzaW5nIHJlYWN0aW9ucz9cbiAgICAgKi9cbiAgICBpc1J1bm5pbmdSZWFjdGlvbnMgPSBmYWxzZVxuXG4gICAgLyoqXG4gICAgICogSXMgaXQgYWxsb3dlZCB0byBjaGFuZ2Ugb2JzZXJ2YWJsZXMgYXQgdGhpcyBwb2ludD9cbiAgICAgKiBJbiBnZW5lcmFsLCBNb2JYIGRvZXNuJ3QgYWxsb3cgdGhhdCB3aGVuIHJ1bm5pbmcgY29tcHV0YXRpb25zIGFuZCBSZWFjdC5yZW5kZXIuXG4gICAgICogVG8gZW5zdXJlIHRoYXQgdGhvc2UgZnVuY3Rpb25zIHN0YXkgcHVyZS5cbiAgICAgKi9cbiAgICBhbGxvd1N0YXRlQ2hhbmdlcyA9IGZhbHNlXG5cbiAgICAvKipcbiAgICAgKiBJcyBpdCBhbGxvd2VkIHRvIHJlYWQgb2JzZXJ2YWJsZXMgYXQgdGhpcyBwb2ludD9cbiAgICAgKiBVc2VkIHRvIGhvbGQgdGhlIHN0YXRlIG5lZWRlZCBmb3IgYG9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uYFxuICAgICAqL1xuICAgIGFsbG93U3RhdGVSZWFkcyA9IHRydWVcblxuICAgIC8qKlxuICAgICAqIElmIHN0cmljdCBtb2RlIGlzIGVuYWJsZWQsIHN0YXRlIGNoYW5nZXMgYXJlIGJ5IGRlZmF1bHQgbm90IGFsbG93ZWRcbiAgICAgKi9cbiAgICBlbmZvcmNlQWN0aW9uczogYm9vbGVhbiB8IFwiYWx3YXlzXCIgPSB0cnVlXG5cbiAgICAvKipcbiAgICAgKiBTcHkgY2FsbGJhY2tzXG4gICAgICovXG4gICAgc3B5TGlzdGVuZXJzOiB7IChjaGFuZ2U6IGFueSk6IHZvaWQgfVtdID0gW11cblxuICAgIC8qKlxuICAgICAqIEdsb2JhbGx5IGF0dGFjaGVkIGVycm9yIGhhbmRsZXJzIHRoYXQgcmVhY3Qgc3BlY2lmaWNhbGx5IHRvIGVycm9ycyBpbiByZWFjdGlvbnNcbiAgICAgKi9cbiAgICBnbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnM6ICgoZXJyb3I6IGFueSwgZGVyaXZhdGlvbjogSURlcml2YXRpb24pID0+IHZvaWQpW10gPSBbXVxuXG4gICAgLyoqXG4gICAgICogV2FybiBpZiBjb21wdXRlZCB2YWx1ZXMgYXJlIGFjY2Vzc2VkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0XG4gICAgICovXG4gICAgY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIChFeHBlcmltZW50YWwpXG4gICAgICogV2FybiBpZiB5b3UgdHJ5IHRvIGNyZWF0ZSB0byBkZXJpdmF0aW9uIC8gcmVhY3RpdmUgY29udGV4dCB3aXRob3V0IGFjY2Vzc2luZyBhbnkgb2JzZXJ2YWJsZS5cbiAgICAgKi9cbiAgICByZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZSA9IGZhbHNlXG5cbiAgICAvKipcbiAgICAgKiAoRXhwZXJpbWVudGFsKVxuICAgICAqIFdhcm4gaWYgb2JzZXJ2YWJsZXMgYXJlIGFjY2Vzc2VkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0XG4gICAgICovXG4gICAgb2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24gPSBmYWxzZVxuXG4gICAgLypcbiAgICAgKiBEb24ndCBjYXRjaCBhbmQgcmV0aHJvdyBleGNlcHRpb25zLiBUaGlzIGlzIHVzZWZ1bCBmb3IgaW5zcGVjdGluZyB0aGUgc3RhdGUgb2ZcbiAgICAgKiB0aGUgc3RhY2sgd2hlbiBhbiBleGNlcHRpb24gb2NjdXJzIHdoaWxlIGRlYnVnZ2luZy5cbiAgICAgKi9cbiAgICBkaXNhYmxlRXJyb3JCb3VuZGFyaWVzID0gZmFsc2VcblxuICAgIC8qXG4gICAgICogSWYgdHJ1ZSwgd2UgYXJlIGFscmVhZHkgaGFuZGxpbmcgYW4gZXhjZXB0aW9uIGluIGFuIGFjdGlvbi4gQW55IGVycm9ycyBpbiByZWFjdGlvbnMgc2hvdWxkIGJlIHN1cHByZXNzZWQsIGFzXG4gICAgICogdGhleSBhcmUgbm90IHRoZSBjYXVzZSwgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzE4MzZcbiAgICAgKi9cbiAgICBzdXBwcmVzc1JlYWN0aW9uRXJyb3JzID0gZmFsc2VcblxuICAgIHVzZVByb3hpZXMgPSB0cnVlXG4gICAgLypcbiAgICAgKiBwcmludCB3YXJuaW5ncyBhYm91dCBjb2RlIHRoYXQgd291bGQgZmFpbCBpZiBwcm94aWVzIHdlcmVuJ3QgYXZhaWxhYmxlXG4gICAgICovXG4gICAgdmVyaWZ5UHJveGllcyA9IGZhbHNlXG5cbiAgICAvKipcbiAgICAgKiBGYWxzZSBmb3JjZXMgYWxsIG9iamVjdCdzIGRlc2NyaXB0b3JzIHRvXG4gICAgICogd3JpdGFibGU6IHRydWVcbiAgICAgKiBjb25maWd1cmFibGU6IHRydWVcbiAgICAgKi9cbiAgICBzYWZlRGVzY3JpcHRvcnMgPSB0cnVlXG59XG5cbmxldCBjYW5NZXJnZUdsb2JhbFN0YXRlID0gdHJ1ZVxubGV0IGlzb2xhdGVDYWxsZWQgPSBmYWxzZVxuXG5leHBvcnQgbGV0IGdsb2JhbFN0YXRlOiBNb2JYR2xvYmFscyA9IChmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGdsb2JhbCA9IGdldEdsb2JhbCgpXG4gICAgaWYgKGdsb2JhbC5fX21vYnhJbnN0YW5jZUNvdW50ID4gMCAmJiAhZ2xvYmFsLl9fbW9ieEdsb2JhbHMpIGNhbk1lcmdlR2xvYmFsU3RhdGUgPSBmYWxzZVxuICAgIGlmIChnbG9iYWwuX19tb2J4R2xvYmFscyAmJiBnbG9iYWwuX19tb2J4R2xvYmFscy52ZXJzaW9uICE9PSBuZXcgTW9iWEdsb2JhbHMoKS52ZXJzaW9uKVxuICAgICAgICBjYW5NZXJnZUdsb2JhbFN0YXRlID0gZmFsc2VcblxuICAgIGlmICghY2FuTWVyZ2VHbG9iYWxTdGF0ZSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNvbGF0ZUNhbGxlZCkge1xuICAgICAgICAgICAgICAgIGRpZSgzNSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMSlcbiAgICAgICAgcmV0dXJuIG5ldyBNb2JYR2xvYmFscygpXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuX19tb2J4R2xvYmFscykge1xuICAgICAgICBnbG9iYWwuX19tb2J4SW5zdGFuY2VDb3VudCArPSAxXG4gICAgICAgIGlmICghZ2xvYmFsLl9fbW9ieEdsb2JhbHMuVU5DSEFOR0VEKSBnbG9iYWwuX19tb2J4R2xvYmFscy5VTkNIQU5HRUQgPSB7fSAvLyBtYWtlIG1lcmdlIGJhY2t3YXJkIGNvbXBhdGlibGVcbiAgICAgICAgcmV0dXJuIGdsb2JhbC5fX21vYnhHbG9iYWxzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPSAxXG4gICAgICAgIHJldHVybiAoZ2xvYmFsLl9fbW9ieEdsb2JhbHMgPSBuZXcgTW9iWEdsb2JhbHMoKSlcbiAgICB9XG59KSgpXG5cbmV4cG9ydCBmdW5jdGlvbiBpc29sYXRlR2xvYmFsU3RhdGUoKSB7XG4gICAgaWYgKFxuICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nUmVhY3Rpb25zLmxlbmd0aCB8fFxuICAgICAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoIHx8XG4gICAgICAgIGdsb2JhbFN0YXRlLmlzUnVubmluZ1JlYWN0aW9uc1xuICAgIClcbiAgICAgICAgZGllKDM2KVxuICAgIGlzb2xhdGVDYWxsZWQgPSB0cnVlXG4gICAgaWYgKGNhbk1lcmdlR2xvYmFsU3RhdGUpIHtcbiAgICAgICAgbGV0IGdsb2JhbCA9IGdldEdsb2JhbCgpXG4gICAgICAgIGlmICgtLWdsb2JhbC5fX21vYnhJbnN0YW5jZUNvdW50ID09PSAwKSBnbG9iYWwuX19tb2J4R2xvYmFscyA9IHVuZGVmaW5lZFxuICAgICAgICBnbG9iYWxTdGF0ZSA9IG5ldyBNb2JYR2xvYmFscygpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsU3RhdGUoKTogYW55IHtcbiAgICByZXR1cm4gZ2xvYmFsU3RhdGVcbn1cblxuLyoqXG4gKiBGb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5OyB0aGlzIHdpbGwgYnJlYWsgdGhlIGludGVybmFsIHN0YXRlIG9mIGV4aXN0aW5nIG9ic2VydmFibGVzLFxuICogYnV0IGNhbiBiZSB1c2VkIHRvIGdldCBiYWNrIGF0IGEgc3RhYmxlIHN0YXRlIGFmdGVyIHRocm93aW5nIGVycm9yc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRHbG9iYWxTdGF0ZSgpIHtcbiAgICBjb25zdCBkZWZhdWx0R2xvYmFscyA9IG5ldyBNb2JYR2xvYmFscygpXG4gICAgZm9yIChsZXQga2V5IGluIGRlZmF1bHRHbG9iYWxzKVxuICAgICAgICBpZiAocGVyc2lzdGVudEtleXMuaW5kZXhPZihrZXkgYXMgYW55KSA9PT0gLTEpIGdsb2JhbFN0YXRlW2tleV0gPSBkZWZhdWx0R2xvYmFsc1trZXldXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSAhZ2xvYmFsU3RhdGUuZW5mb3JjZUFjdGlvbnNcbn1cbiIsImltcG9ydCB7XG4gICAgTGFtYmRhLFxuICAgIENvbXB1dGVkVmFsdWUsXG4gICAgSURlcGVuZGVuY3lUcmVlLFxuICAgIElEZXJpdmF0aW9uLFxuICAgIElEZXJpdmF0aW9uU3RhdGVfLFxuICAgIFRyYWNlTW9kZSxcbiAgICBnZXREZXBlbmRlbmN5VHJlZSxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBydW5SZWFjdGlvbnMsXG4gICAgY2hlY2tJZlN0YXRlUmVhZHNBcmVBbGxvd2VkXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlcFRyZWVOb2RlIHtcbiAgICBuYW1lXzogc3RyaW5nXG4gICAgb2JzZXJ2aW5nXz86IElPYnNlcnZhYmxlW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZSBleHRlbmRzIElEZXBUcmVlTm9kZSB7XG4gICAgZGlmZlZhbHVlXzogbnVtYmVyXG4gICAgLyoqXG4gICAgICogSWQgb2YgdGhlIGRlcml2YXRpb24gKnJ1biogdGhhdCBsYXN0IGFjY2Vzc2VkIHRoaXMgb2JzZXJ2YWJsZS5cbiAgICAgKiBJZiB0aGlzIGlkIGVxdWFscyB0aGUgKnJ1biogaWQgb2YgdGhlIGN1cnJlbnQgZGVyaXZhdGlvbixcbiAgICAgKiB0aGUgZGVwZW5kZW5jeSBpcyBhbHJlYWR5IGVzdGFibGlzaGVkXG4gICAgICovXG4gICAgbGFzdEFjY2Vzc2VkQnlfOiBudW1iZXJcbiAgICBpc0JlaW5nT2JzZXJ2ZWRfOiBib29sZWFuXG5cbiAgICBsb3dlc3RPYnNlcnZlclN0YXRlXzogSURlcml2YXRpb25TdGF0ZV8gLy8gVXNlZCB0byBhdm9pZCByZWR1bmRhbnQgcHJvcGFnYXRpb25zXG4gICAgaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl86IGJvb2xlYW4gLy8gVXNlZCB0byBwdXNoIGl0c2VsZiB0byBnbG9iYWwucGVuZGluZ1Vub2JzZXJ2YXRpb25zIGF0IG1vc3Qgb25jZSBwZXIgYmF0Y2guXG5cbiAgICBvYnNlcnZlcnNfOiBTZXQ8SURlcml2YXRpb24+XG5cbiAgICBvbkJVTygpOiB2b2lkXG4gICAgb25CTygpOiB2b2lkXG5cbiAgICBvbkJVT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG4gICAgb25CT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNPYnNlcnZlcnMob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYnNlcnZlcnNfICYmIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5zaXplID4gMFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T2JzZXJ2ZXJzKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKTogU2V0PElEZXJpdmF0aW9uPiB7XG4gICAgcmV0dXJuIG9ic2VydmFibGUub2JzZXJ2ZXJzX1xufVxuXG4vLyBmdW5jdGlvbiBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbi8vICAgICBjb25zdCBsaXN0ID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnNcbi8vICAgICBjb25zdCBtYXAgPSBvYnNlcnZhYmxlLm9ic2VydmVyc0luZGV4ZXNcbi8vICAgICBjb25zdCBsID0gbGlzdC5sZW5ndGhcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuLy8gICAgICAgICBjb25zdCBpZCA9IGxpc3RbaV0uX19tYXBpZFxuLy8gICAgICAgICBpZiAoaSkge1xuLy8gICAgICAgICAgICAgaW52YXJpYW50KG1hcFtpZF0gPT09IGksIFwiSU5URVJOQUwgRVJST1IgbWFwcyBkZXJpdmF0aW9uLl9fbWFwaWQgdG8gaW5kZXggaW4gbGlzdFwiKSAvLyBmb3IgcGVyZm9ybWFuY2Vcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIGludmFyaWFudCghKGlkIGluIG1hcCksIFwiSU5URVJOQUwgRVJST1Igb2JzZXJ2ZXIgb24gaW5kZXggMCBzaG91bGRuJ3QgYmUgaGVsZCBpbiBtYXAuXCIpIC8vIGZvciBwZXJmb3JtYW5jZVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIGludmFyaWFudChcbi8vICAgICAgICAgbGlzdC5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMobWFwKS5sZW5ndGggPT09IGxpc3QubGVuZ3RoIC0gMSxcbi8vICAgICAgICAgXCJJTlRFUk5BTCBFUlJPUiB0aGVyZSBpcyBubyBqdW5rIGluIG1hcFwiXG4vLyAgICAgKVxuLy8gfVxuZXhwb3J0IGZ1bmN0aW9uIGFkZE9ic2VydmVyKG9ic2VydmFibGU6IElPYnNlcnZhYmxlLCBub2RlOiBJRGVyaXZhdGlvbikge1xuICAgIC8vIGludmFyaWFudChub2RlLmRlcGVuZGVuY2llc1N0YXRlICE9PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiwgY2FuIGFkZCBvbmx5IGRlcGVuZGVuY2llc1N0YXRlICE9PSAtMVwiKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgPT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIGFkZCBhbHJlYWR5IGFkZGVkIG5vZGVcIik7XG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmFkZChub2RlKVxuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID4gbm9kZS5kZXBlbmRlbmNpZXNTdGF0ZV8pXG4gICAgICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBub2RlLmRlcGVuZGVuY2llc1N0YXRlX1xuXG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IgZGlkbid0IGFkZCBub2RlXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2YWJsZTogSU9ic2VydmFibGUsIG5vZGU6IElEZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwLCBcIklOVEVSTkFMIEVSUk9SLCByZW1vdmUgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGluc2lkZSBiYXRjaFwiKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgIT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIHJlbW92ZSBhbHJlYWR5IHJlbW92ZWQgbm9kZVwiKTtcbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmRlbGV0ZShub2RlKVxuICAgIGlmIChvYnNlcnZhYmxlLm9ic2VydmVyc18uc2l6ZSA9PT0gMCkge1xuICAgICAgICAvLyBkZWxldGluZyBsYXN0IG9ic2VydmVyXG4gICAgICAgIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKVxuICAgIH1cbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpID09PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiByZW1vdmUgYWxyZWFkeSByZW1vdmVkIG5vZGUyXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgaWYgKG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl8gPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMubGVuZ3RoID09PSAwLCBcIklOVEVSTkFMIEVSUk9SLCBzaG91bGQgb25seSBxdWV1ZSBmb3IgdW5vYnNlcnZhdGlvbiB1bm9ic2VydmVkIG9ic2VydmFibGVzXCIpO1xuICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fID0gdHJ1ZVxuICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nVW5vYnNlcnZhdGlvbnMucHVzaChvYnNlcnZhYmxlKVxuICAgIH1cbn1cblxuLyoqXG4gKiBCYXRjaCBzdGFydHMgYSB0cmFuc2FjdGlvbiwgYXQgbGVhc3QgZm9yIHB1cnBvc2VzIG9mIG1lbW9pemluZyBDb21wdXRlZFZhbHVlcyB3aGVuIG5vdGhpbmcgZWxzZSBkb2VzLlxuICogRHVyaW5nIGEgYmF0Y2ggYG9uQmVjb21lVW5vYnNlcnZlZGAgd2lsbCBiZSBjYWxsZWQgYXQgbW9zdCBvbmNlIHBlciBvYnNlcnZhYmxlLlxuICogQXZvaWRzIHVubmVjZXNzYXJ5IHJlY2FsY3VsYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRCYXRjaCgpIHtcbiAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoKytcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZEJhdGNoKCkge1xuICAgIGlmICgtLWdsb2JhbFN0YXRlLmluQmF0Y2ggPT09IDApIHtcbiAgICAgICAgcnVuUmVhY3Rpb25zKClcbiAgICAgICAgLy8gdGhlIGJhdGNoIGlzIGFjdHVhbGx5IGFib3V0IHRvIGZpbmlzaCwgYWxsIHVub2JzZXJ2aW5nIHNob3VsZCBoYXBwZW4gaGVyZS5cbiAgICAgICAgY29uc3QgbGlzdCA9IGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9uc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBsaXN0W2ldXG4gICAgICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlLm9ic2VydmVyc18uc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZF8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBvYnNlcnZhYmxlIGhhZCByZWFjdGl2ZSBvYnNlcnZlcnMsIHRyaWdnZXIgdGhlIGhvb2tzXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkXyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUub25CVU8oKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcHV0ZWQgdmFsdWVzIGFyZSBhdXRvbWF0aWNhbGx5IHRlYXJlZCBkb3duIHdoZW4gdGhlIGxhc3Qgb2JzZXJ2ZXIgbGVhdmVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcHJvY2VzcyBoYXBwZW5zIHJlY3Vyc2l2ZWx5LCB0aGlzIGNvbXB1dGVkIG1pZ2h0IGJlIHRoZSBsYXN0IG9ic2VydmFiZSBvZiBhbm90aGVyLCBldGMuLlxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnN1c3BlbmRfKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zID0gW11cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRPYnNlcnZlZChvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSk6IGJvb2xlYW4ge1xuICAgIGNoZWNrSWZTdGF0ZVJlYWRzQXJlQWxsb3dlZChvYnNlcnZhYmxlKVxuXG4gICAgY29uc3QgZGVyaXZhdGlvbiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvblxuICAgIGlmIChkZXJpdmF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaW1wbGUgb3B0aW1pemF0aW9uLCBnaXZlIGVhY2ggZGVyaXZhdGlvbiBydW4gYW4gdW5pcXVlIGlkIChydW5JZClcbiAgICAgICAgICogQ2hlY2sgaWYgbGFzdCB0aW1lIHRoaXMgb2JzZXJ2YWJsZSB3YXMgYWNjZXNzZWQgdGhlIHNhbWUgcnVuSWQgaXMgdXNlZFxuICAgICAgICAgKiBpZiB0aGlzIGlzIHRoZSBjYXNlLCB0aGUgcmVsYXRpb24gaXMgYWxyZWFkeSBrbm93blxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGRlcml2YXRpb24ucnVuSWRfICE9PSBvYnNlcnZhYmxlLmxhc3RBY2Nlc3NlZEJ5Xykge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5sYXN0QWNjZXNzZWRCeV8gPSBkZXJpdmF0aW9uLnJ1bklkX1xuICAgICAgICAgICAgLy8gVHJpZWQgc3RvcmluZyBuZXdPYnNlcnZpbmcsIG9yIG9ic2VydmluZywgb3IgYm90aCBhcyBTZXQsIGJ1dCBwZXJmb3JtYW5jZSBkaWRuJ3QgY29tZSBjbG9zZS4uLlxuICAgICAgICAgICAgZGVyaXZhdGlvbi5uZXdPYnNlcnZpbmdfIVtkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnRfKytdID0gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgaWYgKCFvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZF8gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5pc0JlaW5nT2JzZXJ2ZWRfID0gdHJ1ZVxuICAgICAgICAgICAgICAgIG9ic2VydmFibGUub25CTygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKG9ic2VydmFibGUub2JzZXJ2ZXJzXy5zaXplID09PSAwICYmIGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwKSB7XG4gICAgICAgIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxufVxuXG4vLyBmdW5jdGlvbiBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZTogSU9ic2VydmFibGUsIG1zZzogc3RyaW5nKSB7XG4vLyAgICAgLy8gaXQncyBleHBlbnNpdmUgc28gYmV0dGVyIG5vdCBydW4gaXQgaW4gcHJvZHVjaXRvbi4gYnV0IHRlbXBvcmFyaWx5IGhlbHBmdWwgZm9yIHRlc3Rpbmdcbi8vICAgICBjb25zdCBtaW4gPSBnZXRPYnNlcnZlcnMob2JzZXJ2YWJsZSkucmVkdWNlKChhLCBiKSA9PiBNYXRoLm1pbihhLCBiLmRlcGVuZGVuY2llc1N0YXRlKSwgMilcbi8vICAgICBpZiAobWluID49IG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZSkgcmV0dXJuIC8vIDwtIHRoZSBvbmx5IGFzc3VtcHRpb24gYWJvdXQgYGxvd2VzdE9ic2VydmVyU3RhdGVgXG4vLyAgICAgdGhyb3cgbmV3IEVycm9yKFxuLy8gICAgICAgICBcImxvd2VzdE9ic2VydmVyU3RhdGUgaXMgd3JvbmcgZm9yIFwiICtcbi8vICAgICAgICAgICAgIG1zZyArXG4vLyAgICAgICAgICAgICBcIiBiZWNhdXNlIFwiICtcbi8vICAgICAgICAgICAgIG1pbiArXG4vLyAgICAgICAgICAgICBcIiA8IFwiICtcbi8vICAgICAgICAgICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZVxuLy8gICAgIClcbi8vIH1cblxuLyoqXG4gKiBOT1RFOiBjdXJyZW50IHByb3BhZ2F0aW9uIG1lY2hhbmlzbSB3aWxsIGluIGNhc2Ugb2Ygc2VsZiByZXJ1bmluZyBhdXRvcnVucyBiZWhhdmUgdW5leHBlY3RlZGx5XG4gKiBJdCB3aWxsIHByb3BhZ2F0ZSBjaGFuZ2VzIHRvIG9ic2VydmVycyBmcm9tIHByZXZpb3VzIHJ1blxuICogSXQncyBoYXJkIG9yIG1heWJlIGltcG9zc2libGUgKHdpdGggcmVhc29uYWJsZSBwZXJmKSB0byBnZXQgaXQgcmlnaHQgd2l0aCBjdXJyZW50IGFwcHJvYWNoXG4gKiBIb3BlZnVsbHkgc2VsZiByZXJ1bmluZyBhdXRvcnVucyBhcmVuJ3QgYSBmZWF0dXJlIHBlb3BsZSBzaG91bGQgZGVwZW5kIG9uXG4gKiBBbHNvIG1vc3QgYmFzaWMgdXNlIGNhc2VzIHNob3VsZCBiZSBva1xuICovXG5cbi8vIENhbGxlZCBieSBBdG9tIHdoZW4gaXRzIHZhbHVlIGNoYW5nZXNcbmV4cG9ydCBmdW5jdGlvbiBwcm9wYWdhdGVDaGFuZ2VkKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY2hhbmdlZCBzdGFydFwiKTtcbiAgICBpZiAob2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9PT0gSURlcml2YXRpb25TdGF0ZV8uU1RBTEVfKSByZXR1cm5cbiAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uU1RBTEVfXG5cbiAgICAvLyBJZGVhbGx5IHdlIHVzZSBmb3IuLm9mIGhlcmUsIGJ1dCB0aGUgZG93bmNvbXBpbGVkIHZlcnNpb24gaXMgcmVhbGx5IHNsb3cuLi5cbiAgICBvYnNlcnZhYmxlLm9ic2VydmVyc18uZm9yRWFjaChkID0+IHtcbiAgICAgICAgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXykge1xuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgZC5pc1RyYWNpbmdfICE9PSBUcmFjZU1vZGUuTk9ORSkge1xuICAgICAgICAgICAgICAgIGxvZ1RyYWNlSW5mbyhkLCBvYnNlcnZhYmxlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZC5vbkJlY29tZVN0YWxlXygpXG4gICAgICAgIH1cbiAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cbiAgICB9KVxuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcImNoYW5nZWQgZW5kXCIpO1xufVxuXG4vLyBDYWxsZWQgYnkgQ29tcHV0ZWRWYWx1ZSB3aGVuIGl0IHJlY2FsY3VsYXRlIGFuZCBpdHMgdmFsdWUgY2hhbmdlZFxuZXhwb3J0IGZ1bmN0aW9uIHByb3BhZ2F0ZUNoYW5nZUNvbmZpcm1lZChvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSkge1xuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcImNvbmZpcm1lZCBzdGFydFwiKTtcbiAgICBpZiAob2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9PT0gSURlcml2YXRpb25TdGF0ZV8uU1RBTEVfKSByZXR1cm5cbiAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uU1RBTEVfXG5cbiAgICBvYnNlcnZhYmxlLm9ic2VydmVyc18uZm9yRWFjaChkID0+IHtcbiAgICAgICAgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5QT1NTSUJMWV9TVEFMRV8pXG4gICAgICAgICAgICBkLmRlcGVuZGVuY2llc1N0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlNUQUxFX1xuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXyAvLyB0aGlzIGhhcHBlbnMgZHVyaW5nIGNvbXB1dGluZyBvZiBgZGAsIGp1c3Qga2VlcCBsb3dlc3RPYnNlcnZlclN0YXRlIHVwIHRvIGRhdGUuXG4gICAgICAgIClcbiAgICAgICAgICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFX1xuICAgIH0pXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY29uZmlybWVkIGVuZFwiKTtcbn1cblxuLy8gVXNlZCBieSBjb21wdXRlZCB3aGVuIGl0cyBkZXBlbmRlbmN5IGNoYW5nZWQsIGJ1dCB3ZSBkb24ndCB3YW4ndCB0byBpbW1lZGlhdGVseSByZWNvbXB1dGUuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGFnYXRlTWF5YmVDaGFuZ2VkKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwibWF5YmUgc3RhcnRcIik7XG4gICAgaWYgKG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gIT09IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfKSByZXR1cm5cbiAgICBvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uUE9TU0lCTFlfU1RBTEVfXG5cbiAgICBvYnNlcnZhYmxlLm9ic2VydmVyc18uZm9yRWFjaChkID0+IHtcbiAgICAgICAgaWYgKGQuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXykge1xuICAgICAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5QT1NTSUJMWV9TVEFMRV9cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIGQuaXNUcmFjaW5nXyAhPT0gVHJhY2VNb2RlLk5PTkUpIHtcbiAgICAgICAgICAgICAgICBsb2dUcmFjZUluZm8oZCwgb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGQub25CZWNvbWVTdGFsZV8oKVxuICAgICAgICB9XG4gICAgfSlcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJtYXliZSBlbmRcIik7XG59XG5cbmZ1bmN0aW9uIGxvZ1RyYWNlSW5mbyhkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbiwgb2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYFttb2J4LnRyYWNlXSAnJHtkZXJpdmF0aW9uLm5hbWVffScgaXMgaW52YWxpZGF0ZWQgZHVlIHRvIGEgY2hhbmdlIGluOiAnJHtvYnNlcnZhYmxlLm5hbWVffSdgXG4gICAgKVxuICAgIGlmIChkZXJpdmF0aW9uLmlzVHJhY2luZ18gPT09IFRyYWNlTW9kZS5CUkVBSykge1xuICAgICAgICBjb25zdCBsaW5lcyA9IFtdXG4gICAgICAgIHByaW50RGVwVHJlZShnZXREZXBlbmRlbmN5VHJlZShkZXJpdmF0aW9uKSwgbGluZXMsIDEpXG5cbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIG5ldyBGdW5jdGlvbihcbmBkZWJ1Z2dlcjtcbi8qXG5UcmFjaW5nICcke2Rlcml2YXRpb24ubmFtZV99J1xuXG5Zb3UgYXJlIGVudGVyaW5nIHRoaXMgYnJlYWsgcG9pbnQgYmVjYXVzZSBkZXJpdmF0aW9uICcke2Rlcml2YXRpb24ubmFtZV99JyBpcyBiZWluZyB0cmFjZWQgYW5kICcke29ic2VydmFibGUubmFtZV99JyBpcyBub3cgZm9yY2luZyBpdCB0byB1cGRhdGUuXG5KdXN0IGZvbGxvdyB0aGUgc3RhY2t0cmFjZSB5b3Ugc2hvdWxkIG5vdyBzZWUgaW4gdGhlIGRldnRvb2xzIHRvIHNlZSBwcmVjaXNlbHkgd2hhdCBwaWVjZSBvZiB5b3VyIGNvZGUgaXMgY2F1c2luZyB0aGlzIHVwZGF0ZVxuVGhlIHN0YWNrZnJhbWUgeW91IGFyZSBsb29raW5nIGZvciBpcyBhdCBsZWFzdCB+Ni04IHN0YWNrLWZyYW1lcyB1cC5cblxuJHtkZXJpdmF0aW9uIGluc3RhbmNlb2YgQ29tcHV0ZWRWYWx1ZSA/IGRlcml2YXRpb24uZGVyaXZhdGlvbi50b1N0cmluZygpLnJlcGxhY2UoL1sqXVxcLy9nLCBcIi9cIikgOiBcIlwifVxuXG5UaGUgZGVwZW5kZW5jaWVzIGZvciB0aGlzIGRlcml2YXRpb24gYXJlOlxuXG4ke2xpbmVzLmpvaW4oXCJcXG5cIil9XG4qL1xuICAgIGApKClcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByaW50RGVwVHJlZSh0cmVlOiBJRGVwZW5kZW5jeVRyZWUsIGxpbmVzOiBzdHJpbmdbXSwgZGVwdGg6IG51bWJlcikge1xuICAgIGlmIChsaW5lcy5sZW5ndGggPj0gMTAwMCkge1xuICAgICAgICBsaW5lcy5wdXNoKFwiKGFuZCBtYW55IG1vcmUpXCIpXG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBsaW5lcy5wdXNoKGAke25ldyBBcnJheShkZXB0aCkuam9pbihcIlxcdFwiKX0ke3RyZWUubmFtZX1gKSAvLyBNV0U6IG5vdCB0aGUgZmFzdGVzdCwgYnV0IHRoZSBlYXNpZXN0IHdheSA6KVxuICAgIGlmICh0cmVlLmRlcGVuZGVuY2llcykgdHJlZS5kZXBlbmRlbmNpZXMuZm9yRWFjaChjaGlsZCA9PiBwcmludERlcFRyZWUoY2hpbGQsIGxpbmVzLCBkZXB0aCArIDEpKVxufVxuIiwiaW1wb3J0IHtcbiAgICAkbW9ieCxcbiAgICBJRGVyaXZhdGlvbixcbiAgICBJRGVyaXZhdGlvblN0YXRlXyxcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBMYW1iZGEsXG4gICAgVHJhY2VNb2RlLFxuICAgIGNsZWFyT2JzZXJ2aW5nLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZW5kQmF0Y2gsXG4gICAgZ2V0TmV4dElkLFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIGlzQ2F1Z2h0RXhjZXB0aW9uLFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBzaG91bGRDb21wdXRlLFxuICAgIHNweVJlcG9ydCxcbiAgICBzcHlSZXBvcnRFbmQsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgc3RhcnRCYXRjaCxcbiAgICB0cmFjZSxcbiAgICB0cmFja0Rlcml2ZWRGdW5jdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vKipcbiAqIFJlYWN0aW9ucyBhcmUgYSBzcGVjaWFsIGtpbmQgb2YgZGVyaXZhdGlvbnMuIFNldmVyYWwgdGhpbmdzIGRpc3Rpbmd1aXNoZXMgdGhlbSBmcm9tIG5vcm1hbCByZWFjdGl2ZSBjb21wdXRhdGlvbnNcbiAqXG4gKiAxKSBUaGV5IHdpbGwgYWx3YXlzIHJ1biwgd2hldGhlciB0aGV5IGFyZSB1c2VkIGJ5IG90aGVyIGNvbXB1dGF0aW9ucyBvciBub3QuXG4gKiBUaGlzIG1lYW5zIHRoYXQgdGhleSBhcmUgdmVyeSBzdWl0YWJsZSBmb3IgdHJpZ2dlcmluZyBzaWRlIGVmZmVjdHMgbGlrZSBsb2dnaW5nLCB1cGRhdGluZyB0aGUgRE9NIGFuZCBtYWtpbmcgbmV0d29yayByZXF1ZXN0cy5cbiAqIDIpIFRoZXkgYXJlIG5vdCBvYnNlcnZhYmxlIHRoZW1zZWx2ZXNcbiAqIDMpIFRoZXkgd2lsbCBhbHdheXMgcnVuIGFmdGVyIGFueSAnbm9ybWFsJyBkZXJpdmF0aW9uc1xuICogNCkgVGhleSBhcmUgYWxsb3dlZCB0byBjaGFuZ2UgdGhlIHN0YXRlIGFuZCB0aGVyZWJ5IHRyaWdnZXJpbmcgdGhlbXNlbHZlcyBhZ2FpbiwgYXMgbG9uZyBhcyB0aGV5IG1ha2Ugc3VyZSB0aGUgc3RhdGUgcHJvcGFnYXRlcyB0byBhIHN0YWJsZSBzdGF0ZSBpbiBhIHJlYXNvbmFibGUgYW1vdW50IG9mIGl0ZXJhdGlvbnMuXG4gKlxuICogVGhlIHN0YXRlIG1hY2hpbmUgb2YgYSBSZWFjdGlvbiBpcyBhcyBmb2xsb3dzOlxuICpcbiAqIDEpIGFmdGVyIGNyZWF0aW5nLCB0aGUgcmVhY3Rpb24gc2hvdWxkIGJlIHN0YXJ0ZWQgYnkgY2FsbGluZyBgcnVuUmVhY3Rpb25gIG9yIGJ5IHNjaGVkdWxpbmcgaXQgKHNlZSBhbHNvIGBhdXRvcnVuYClcbiAqIDIpIHRoZSBgb25JbnZhbGlkYXRlYCBoYW5kbGVyIHNob3VsZCBzb21laG93IHJlc3VsdCBpbiBhIGNhbGwgdG8gYHRoaXMudHJhY2soc29tZUZ1bmN0aW9uKWBcbiAqIDMpIGFsbCBvYnNlcnZhYmxlcyBhY2Nlc3NlZCBpbiBgc29tZUZ1bmN0aW9uYCB3aWxsIGJlIG9ic2VydmVkIGJ5IHRoaXMgcmVhY3Rpb24uXG4gKiA0KSBhcyBzb29uIGFzIHNvbWUgb2YgdGhlIGRlcGVuZGVuY2llcyBoYXMgY2hhbmdlZCB0aGUgUmVhY3Rpb24gd2lsbCBiZSByZXNjaGVkdWxlZCBmb3IgYW5vdGhlciBydW4gKGFmdGVyIHRoZSBjdXJyZW50IG11dGF0aW9uIG9yIHRyYW5zYWN0aW9uKS4gYGlzU2NoZWR1bGVkYCB3aWxsIHlpZWxkIHRydWUgb25jZSBhIGRlcGVuZGVuY3kgaXMgc3RhbGUgYW5kIGR1cmluZyB0aGlzIHBlcmlvZFxuICogNSkgYG9uSW52YWxpZGF0ZWAgd2lsbCBiZSBjYWxsZWQsIGFuZCB3ZSBhcmUgYmFjayBhdCBzdGVwIDEuXG4gKlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlYWN0aW9uUHVibGljIHtcbiAgICBkaXNwb3NlKCk6IHZvaWRcbiAgICB0cmFjZShlbnRlckJyZWFrUG9pbnQ/OiBib29sZWFuKTogdm9pZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZWFjdGlvbkRpc3Bvc2VyIHtcbiAgICAoKTogdm9pZFxuICAgICRtb2J4OiBSZWFjdGlvblxufVxuXG5leHBvcnQgY2xhc3MgUmVhY3Rpb24gaW1wbGVtZW50cyBJRGVyaXZhdGlvbiwgSVJlYWN0aW9uUHVibGljIHtcbiAgICBvYnNlcnZpbmdfOiBJT2JzZXJ2YWJsZVtdID0gW10gLy8gbm9kZXMgd2UgYXJlIGxvb2tpbmcgYXQuIE91ciB2YWx1ZSBkZXBlbmRzIG9uIHRoZXNlIG5vZGVzXG4gICAgbmV3T2JzZXJ2aW5nXzogSU9ic2VydmFibGVbXSA9IFtdXG4gICAgZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HX1xuICAgIGRpZmZWYWx1ZV8gPSAwXG4gICAgcnVuSWRfID0gMFxuICAgIHVuYm91bmREZXBzQ291bnRfID0gMFxuICAgIGlzRGlzcG9zZWRfID0gZmFsc2VcbiAgICBpc1NjaGVkdWxlZF8gPSBmYWxzZVxuICAgIGlzVHJhY2tQZW5kaW5nXyA9IGZhbHNlXG4gICAgaXNSdW5uaW5nXyA9IGZhbHNlXG4gICAgaXNUcmFjaW5nXzogVHJhY2VNb2RlID0gVHJhY2VNb2RlLk5PTkVcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgbmFtZV86IHN0cmluZyA9IF9fREVWX18gPyBcIlJlYWN0aW9uQFwiICsgZ2V0TmV4dElkKCkgOiBcIlJlYWN0aW9uXCIsXG4gICAgICAgIHByaXZhdGUgb25JbnZhbGlkYXRlXzogKCkgPT4gdm9pZCxcbiAgICAgICAgcHJpdmF0ZSBlcnJvckhhbmRsZXJfPzogKGVycm9yOiBhbnksIGRlcml2YXRpb246IElEZXJpdmF0aW9uKSA9PiB2b2lkLFxuICAgICAgICBwdWJsaWMgcmVxdWlyZXNPYnNlcnZhYmxlXyA9IGZhbHNlXG4gICAgKSB7fVxuXG4gICAgb25CZWNvbWVTdGFsZV8oKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVfKClcbiAgICB9XG5cbiAgICBzY2hlZHVsZV8oKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1NjaGVkdWxlZF8pIHtcbiAgICAgICAgICAgIHRoaXMuaXNTY2hlZHVsZWRfID0gdHJ1ZVxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1JlYWN0aW9ucy5wdXNoKHRoaXMpXG4gICAgICAgICAgICBydW5SZWFjdGlvbnMoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNTY2hlZHVsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2NoZWR1bGVkX1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGludGVybmFsLCB1c2Ugc2NoZWR1bGUoKSBpZiB5b3UgaW50ZW5kIHRvIGtpY2sgb2ZmIGEgcmVhY3Rpb25cbiAgICAgKi9cbiAgICBydW5SZWFjdGlvbl8oKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0Rpc3Bvc2VkXykge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpXG4gICAgICAgICAgICB0aGlzLmlzU2NoZWR1bGVkXyA9IGZhbHNlXG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0NvbnRleHQgPSB0aGlzXG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29tcHV0ZSh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNUcmFja1BlbmRpbmdfID0gdHJ1ZVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkludmFsaWRhdGVfKClcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgdGhpcy5pc1RyYWNrUGVuZGluZ18gJiYgaXNTcHlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uSW52YWxpZGF0ZSBkaWRuJ3QgdHJpZ2dlciB0cmFjayByaWdodCBhd2F5Li5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInNjaGVkdWxlZC1yZWFjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbl8oZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0NvbnRleHQgPSBwcmV2XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cmFjayhmbjogKCkgPT4gdm9pZCkge1xuICAgICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkXykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJSZWFjdGlvbiBhbHJlYWR5IGRpc3Bvc2VkXCIpIC8vIE5vdGU6IE5vdCBhIHdhcm5pbmcgLyBlcnJvciBpbiBtb2J4IDQgZWl0aGVyXG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRCYXRjaCgpXG4gICAgICAgIGNvbnN0IG5vdGlmeSA9IGlzU3B5RW5hYmxlZCgpXG4gICAgICAgIGxldCBzdGFydFRpbWVcbiAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5KSB7XG4gICAgICAgICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpXG4gICAgICAgICAgICBzcHlSZXBvcnRTdGFydCh7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlYWN0aW9uXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1J1bm5pbmdfID0gdHJ1ZVxuICAgICAgICBjb25zdCBwcmV2UmVhY3Rpb24gPSBnbG9iYWxTdGF0ZS50cmFja2luZ0NvbnRleHQgLy8gcmVhY3Rpb25zIGNvdWxkIGNyZWF0ZSByZWFjdGlvbnMuLi5cbiAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gdGhpc1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0cmFja0Rlcml2ZWRGdW5jdGlvbih0aGlzLCBmbiwgdW5kZWZpbmVkKVxuICAgICAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0NvbnRleHQgPSBwcmV2UmVhY3Rpb25cbiAgICAgICAgdGhpcy5pc1J1bm5pbmdfID0gZmFsc2VcbiAgICAgICAgdGhpcy5pc1RyYWNrUGVuZGluZ18gPSBmYWxzZVxuICAgICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkXykge1xuICAgICAgICAgICAgLy8gZGlzcG9zZWQgZHVyaW5nIGxhc3QgcnVuLiBDbGVhbiB1cCBldmVyeXRoaW5nIHRoYXQgd2FzIGJvdW5kIGFmdGVyIHRoZSBkaXNwb3NlIGNhbGwuXG4gICAgICAgICAgICBjbGVhck9ic2VydmluZyh0aGlzKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NhdWdodEV4Y2VwdGlvbihyZXN1bHQpKSB0aGlzLnJlcG9ydEV4Y2VwdGlvbkluRGVyaXZhdGlvbl8ocmVzdWx0LmNhdXNlKVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCh7XG4gICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxuXG4gICAgcmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uXyhlcnJvcjogYW55KSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlcl8pIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyXyhlcnJvciwgdGhpcylcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMpIHRocm93IGVycm9yXG5cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IF9fREVWX19cbiAgICAgICAgICAgID8gYFttb2J4XSBFbmNvdW50ZXJlZCBhbiB1bmNhdWdodCBleGNlcHRpb24gdGhhdCB3YXMgdGhyb3duIGJ5IGEgcmVhY3Rpb24gb3Igb2JzZXJ2ZXIgY29tcG9uZW50LCBpbjogJyR7dGhpc30nYFxuICAgICAgICAgICAgOiBgW21vYnhdIHVuY2F1Z2h0IGVycm9yIGluICcke3RoaXN9J2BcbiAgICAgICAgaWYgKCFnbG9iYWxTdGF0ZS5zdXBwcmVzc1JlYWN0aW9uRXJyb3JzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGVycm9yKVxuICAgICAgICAgICAgLyoqIElmIGRlYnVnZ2luZyBicm91Z2h0IHlvdSBoZXJlLCBwbGVhc2UsIHJlYWQgdGhlIGFib3ZlIG1lc3NhZ2UgOi0pLiBUbnghICovXG4gICAgICAgIH0gZWxzZSBpZiAoX19ERVZfXykgY29uc29sZS53YXJuKGBbbW9ieF0gKGVycm9yIGluIHJlYWN0aW9uICcke3RoaXMubmFtZV99JyBzdXBwcmVzc2VkLCBmaXggZXJyb3Igb2YgY2F1c2luZyBhY3Rpb24gYmVsb3cpYCkgLy8gcHJldHRpZXItaWdub3JlXG5cbiAgICAgICAgaWYgKF9fREVWX18gJiYgaXNTcHlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogXCJcIiArIGVycm9yXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLmZvckVhY2goZiA9PiBmKGVycm9yLCB0aGlzKSlcbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHRoaXMuaXNEaXNwb3NlZF8gPSB0cnVlXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nXykge1xuICAgICAgICAgICAgICAgIC8vIGlmIGRpc3Bvc2VkIHdoaWxlIHJ1bm5pbmcsIGNsZWFuIHVwIGxhdGVyLiBNYXliZSBub3Qgb3B0aW1hbCwgYnV0IHJhcmUgY2FzZVxuICAgICAgICAgICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpXG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RGlzcG9zZXJfKCk6IElSZWFjdGlvbkRpc3Bvc2VyIHtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuZGlzcG9zZS5iaW5kKHRoaXMpIGFzIElSZWFjdGlvbkRpc3Bvc2VyXG4gICAgICAgIHJbJG1vYnhdID0gdGhpc1xuICAgICAgICByZXR1cm4gclxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFJlYWN0aW9uWyR7dGhpcy5uYW1lX31dYFxuICAgIH1cblxuICAgIHRyYWNlKGVudGVyQnJlYWtQb2ludDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHRyYWNlKHRoaXMsIGVudGVyQnJlYWtQb2ludClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblJlYWN0aW9uRXJyb3IoaGFuZGxlcjogKGVycm9yOiBhbnksIGRlcml2YXRpb246IElEZXJpdmF0aW9uKSA9PiB2b2lkKTogTGFtYmRhIHtcbiAgICBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMucHVzaChoYW5kbGVyKVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpXG4gICAgICAgIGlmIChpZHggPj0gMCkgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLnNwbGljZShpZHgsIDEpXG4gICAgfVxufVxuXG4vKipcbiAqIE1hZ2ljIG51bWJlciBhbGVydCFcbiAqIERlZmluZXMgd2l0aGluIGhvdyBtYW55IHRpbWVzIGEgcmVhY3Rpb24gaXMgYWxsb3dlZCB0byByZS10cmlnZ2VyIGl0c2VsZlxuICogdW50aWwgaXQgaXMgYXNzdW1lZCB0aGF0IHRoaXMgaXMgZ29ubmEgYmUgYSBuZXZlciBlbmRpbmcgbG9vcC4uLlxuICovXG5jb25zdCBNQVhfUkVBQ1RJT05fSVRFUkFUSU9OUyA9IDEwMFxuXG5sZXQgcmVhY3Rpb25TY2hlZHVsZXI6IChmbjogKCkgPT4gdm9pZCkgPT4gdm9pZCA9IGYgPT4gZigpXG5cbmV4cG9ydCBmdW5jdGlvbiBydW5SZWFjdGlvbnMoKSB7XG4gICAgLy8gVHJhbXBvbGluaW5nLCBpZiBydW5SZWFjdGlvbnMgYXJlIGFscmVhZHkgcnVubmluZywgbmV3IHJlYWN0aW9ucyB3aWxsIGJlIHBpY2tlZCB1cFxuICAgIGlmIChnbG9iYWxTdGF0ZS5pbkJhdGNoID4gMCB8fCBnbG9iYWxTdGF0ZS5pc1J1bm5pbmdSZWFjdGlvbnMpIHJldHVyblxuICAgIHJlYWN0aW9uU2NoZWR1bGVyKHJ1blJlYWN0aW9uc0hlbHBlcilcbn1cblxuZnVuY3Rpb24gcnVuUmVhY3Rpb25zSGVscGVyKCkge1xuICAgIGdsb2JhbFN0YXRlLmlzUnVubmluZ1JlYWN0aW9ucyA9IHRydWVcbiAgICBjb25zdCBhbGxSZWFjdGlvbnMgPSBnbG9iYWxTdGF0ZS5wZW5kaW5nUmVhY3Rpb25zXG4gICAgbGV0IGl0ZXJhdGlvbnMgPSAwXG5cbiAgICAvLyBXaGlsZSBydW5uaW5nIHJlYWN0aW9ucywgbmV3IHJlYWN0aW9ucyBtaWdodCBiZSB0cmlnZ2VyZWQuXG4gICAgLy8gSGVuY2Ugd2Ugd29yayB3aXRoIHR3byB2YXJpYWJsZXMgYW5kIGNoZWNrIHdoZXRoZXJcbiAgICAvLyB3ZSBjb252ZXJnZSB0byBubyByZW1haW5pbmcgcmVhY3Rpb25zIGFmdGVyIGEgd2hpbGUuXG4gICAgd2hpbGUgKGFsbFJlYWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICgrK2l0ZXJhdGlvbnMgPT09IE1BWF9SRUFDVElPTl9JVEVSQVRJT05TKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIF9fREVWX19cbiAgICAgICAgICAgICAgICAgICAgPyBgUmVhY3Rpb24gZG9lc24ndCBjb252ZXJnZSB0byBhIHN0YWJsZSBzdGF0ZSBhZnRlciAke01BWF9SRUFDVElPTl9JVEVSQVRJT05TfSBpdGVyYXRpb25zLmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBgIFByb2JhYmx5IHRoZXJlIGlzIGEgY3ljbGUgaW4gdGhlIHJlYWN0aXZlIGZ1bmN0aW9uOiAke2FsbFJlYWN0aW9uc1swXX1gXG4gICAgICAgICAgICAgICAgICAgIDogYFttb2J4XSBjeWNsZSBpbiByZWFjdGlvbjogJHthbGxSZWFjdGlvbnNbMF19YFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgYWxsUmVhY3Rpb25zLnNwbGljZSgwKSAvLyBjbGVhciByZWFjdGlvbnNcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVtYWluaW5nUmVhY3Rpb25zID0gYWxsUmVhY3Rpb25zLnNwbGljZSgwKVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHJlbWFpbmluZ1JlYWN0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICByZW1haW5pbmdSZWFjdGlvbnNbaV0ucnVuUmVhY3Rpb25fKClcbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zID0gZmFsc2Vcbn1cblxuZXhwb3J0IGNvbnN0IGlzUmVhY3Rpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiUmVhY3Rpb25cIiwgUmVhY3Rpb24pXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRSZWFjdGlvblNjaGVkdWxlcihmbjogKGY6ICgpID0+IHZvaWQpID0+IHZvaWQpIHtcbiAgICBjb25zdCBiYXNlU2NoZWR1bGVyID0gcmVhY3Rpb25TY2hlZHVsZXJcbiAgICByZWFjdGlvblNjaGVkdWxlciA9IGYgPT4gZm4oKCkgPT4gYmFzZVNjaGVkdWxlcihmKSlcbn1cbiIsImltcG9ydCB7IElDb21wdXRlZERpZENoYW5nZSB9IGZyb20gXCIuL2NvbXB1dGVkdmFsdWVcIlxuaW1wb3J0IHsgSVZhbHVlRGlkQ2hhbmdlLCBJQm94RGlkQ2hhbmdlIH0gZnJvbSBcIi4vLi4vdHlwZXMvb2JzZXJ2YWJsZXZhbHVlXCJcbmltcG9ydCB7IElPYmplY3REaWRDaGFuZ2UgfSBmcm9tIFwiLi8uLi90eXBlcy9vYnNlcnZhYmxlb2JqZWN0XCJcbmltcG9ydCB7IElBcnJheURpZENoYW5nZSB9IGZyb20gXCIuLy4uL3R5cGVzL29ic2VydmFibGVhcnJheVwiXG5pbXBvcnQgeyBMYW1iZGEsIGdsb2JhbFN0YXRlLCBvbmNlLCBJU2V0RGlkQ2hhbmdlLCBJTWFwRGlkQ2hhbmdlIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3B5RW5hYmxlZCgpIHtcbiAgICByZXR1cm4gX19ERVZfXyAmJiAhIWdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5sZW5ndGhcbn1cblxuZXhwb3J0IHR5cGUgUHVyZVNweUV2ZW50ID1cbiAgICB8IHsgdHlwZTogXCJhY3Rpb25cIjsgbmFtZTogc3RyaW5nOyBvYmplY3Q6IHVua25vd247IGFyZ3VtZW50czogdW5rbm93bltdIH1cbiAgICB8IHsgdHlwZTogXCJzY2hlZHVsZWQtcmVhY3Rpb25cIjsgbmFtZTogc3RyaW5nIH1cbiAgICB8IHsgdHlwZTogXCJyZWFjdGlvblwiOyBuYW1lOiBzdHJpbmcgfVxuICAgIHwgeyB0eXBlOiBcImVycm9yXCI7IG5hbWU6IHN0cmluZzsgbWVzc2FnZTogc3RyaW5nOyBlcnJvcjogc3RyaW5nIH1cbiAgICB8IElDb21wdXRlZERpZENoYW5nZTx1bmtub3duPlxuICAgIHwgSU9iamVjdERpZENoYW5nZTx1bmtub3duPlxuICAgIHwgSUFycmF5RGlkQ2hhbmdlPHVua25vd24+XG4gICAgfCBJTWFwRGlkQ2hhbmdlPHVua25vd24sIHVua25vd24+XG4gICAgfCBJU2V0RGlkQ2hhbmdlPHVua25vd24+XG4gICAgfCBJVmFsdWVEaWRDaGFuZ2U8dW5rbm93bj5cbiAgICB8IElCb3hEaWRDaGFuZ2U8dW5rbm93bj5cbiAgICB8IHsgdHlwZTogXCJyZXBvcnQtZW5kXCI7IHNweVJlcG9ydEVuZDogdHJ1ZTsgdGltZT86IG51bWJlciB9XG5cbnR5cGUgU3B5RXZlbnQgPSBQdXJlU3B5RXZlbnQgJiB7IHNweVJlcG9ydFN0YXJ0PzogdHJ1ZSB9XG5cbmV4cG9ydCBmdW5jdGlvbiBzcHlSZXBvcnQoZXZlbnQ6IFNweUV2ZW50KSB7XG4gICAgaWYgKCFfX0RFVl9fKSByZXR1cm4gLy8gZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGNhbiBkbyB0aGUgcmVzdFxuICAgIGlmICghZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmxlbmd0aCkgcmV0dXJuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSBsaXN0ZW5lcnNbaV0oZXZlbnQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcHlSZXBvcnRTdGFydChldmVudDogUHVyZVNweUV2ZW50KSB7XG4gICAgaWYgKCFfX0RFVl9fKSByZXR1cm5cbiAgICBjb25zdCBjaGFuZ2UgPSB7IC4uLmV2ZW50LCBzcHlSZXBvcnRTdGFydDogdHJ1ZSBhcyBjb25zdCB9XG4gICAgc3B5UmVwb3J0KGNoYW5nZSlcbn1cblxuY29uc3QgRU5EX0VWRU5UOiBTcHlFdmVudCA9IHsgdHlwZTogXCJyZXBvcnQtZW5kXCIsIHNweVJlcG9ydEVuZDogdHJ1ZSB9XG5cbmV4cG9ydCBmdW5jdGlvbiBzcHlSZXBvcnRFbmQoY2hhbmdlPzogeyB0aW1lPzogbnVtYmVyIH0pIHtcbiAgICBpZiAoIV9fREVWX18pIHJldHVyblxuICAgIGlmIChjaGFuZ2UpIHNweVJlcG9ydCh7IC4uLmNoYW5nZSwgdHlwZTogXCJyZXBvcnQtZW5kXCIsIHNweVJlcG9ydEVuZDogdHJ1ZSB9KVxuICAgIGVsc2Ugc3B5UmVwb3J0KEVORF9FVkVOVClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNweShsaXN0ZW5lcjogKGNoYW5nZTogU3B5RXZlbnQpID0+IHZvaWQpOiBMYW1iZGEge1xuICAgIGlmICghX19ERVZfXykge1xuICAgICAgICBjb25zb2xlLndhcm4oYFttb2J4LnNweV0gSXMgYSBuby1vcCBpbiBwcm9kdWN0aW9uIGJ1aWxkc2ApXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKVxuICAgICAgICByZXR1cm4gb25jZSgoKSA9PiB7XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMgPSBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMuZmlsdGVyKGwgPT4gbCAhPT0gbGlzdGVuZXIpXG4gICAgICAgIH0pXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBjcmVhdGVBY3Rpb24sXG4gICAgZXhlY3V0ZUFjdGlvbixcbiAgICBBbm5vdGF0aW9uLFxuICAgIHN0b3JlQW5ub3RhdGlvbixcbiAgICBkaWUsXG4gICAgaXNGdW5jdGlvbixcbiAgICBpc1N0cmluZ2lzaCxcbiAgICBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUFjdGlvbkFubm90YXRpb25cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGNvbnN0IEFDVElPTiA9IFwiYWN0aW9uXCJcbmV4cG9ydCBjb25zdCBBQ1RJT05fQk9VTkQgPSBcImFjdGlvbi5ib3VuZFwiXG5leHBvcnQgY29uc3QgQVVUT0FDVElPTiA9IFwiYXV0b0FjdGlvblwiXG5leHBvcnQgY29uc3QgQVVUT0FDVElPTl9CT1VORCA9IFwiYXV0b0FjdGlvbi5ib3VuZFwiXG5cbmNvbnN0IERFRkFVTFRfQUNUSU9OX05BTUUgPSBcIjx1bm5hbWVkIGFjdGlvbj5cIlxuXG5jb25zdCBhY3Rpb25Bbm5vdGF0aW9uID0gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihBQ1RJT04pXG5jb25zdCBhY3Rpb25Cb3VuZEFubm90YXRpb24gPSBjcmVhdGVBY3Rpb25Bbm5vdGF0aW9uKEFDVElPTl9CT1VORCwge1xuICAgIGJvdW5kOiB0cnVlXG59KVxuY29uc3QgYXV0b0FjdGlvbkFubm90YXRpb24gPSBjcmVhdGVBY3Rpb25Bbm5vdGF0aW9uKEFVVE9BQ1RJT04sIHtcbiAgICBhdXRvQWN0aW9uOiB0cnVlXG59KVxuY29uc3QgYXV0b0FjdGlvbkJvdW5kQW5ub3RhdGlvbiA9IGNyZWF0ZUFjdGlvbkFubm90YXRpb24oQVVUT0FDVElPTl9CT1VORCwge1xuICAgIGF1dG9BY3Rpb246IHRydWUsXG4gICAgYm91bmQ6IHRydWVcbn0pXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFjdGlvbkZhY3RvcnkgZXh0ZW5kcyBBbm5vdGF0aW9uLCBQcm9wZXJ0eURlY29yYXRvciB7XG4gICAgLy8gbmFtZWxlc3MgYWN0aW9uc1xuICAgIDxUIGV4dGVuZHMgRnVuY3Rpb24gfCB1bmRlZmluZWQgfCBudWxsPihmbjogVCk6IFRcbiAgICAvLyBuYW1lZCBhY3Rpb25zXG4gICAgPFQgZXh0ZW5kcyBGdW5jdGlvbiB8IHVuZGVmaW5lZCB8IG51bGw+KG5hbWU6IHN0cmluZywgZm46IFQpOiBUXG5cbiAgICAvLyBuYW1lZCBkZWNvcmF0b3JcbiAgICAoY3VzdG9tTmFtZTogc3RyaW5nKTogUHJvcGVydHlEZWNvcmF0b3IgJiBBbm5vdGF0aW9uXG5cbiAgICAvLyBkZWNvcmF0b3IgKG5hbWUgbm8gbG9uZ2VyIHN1cHBvcnRlZClcbiAgICBib3VuZDogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbkZhY3RvcnkoYXV0b0FjdGlvbjogYm9vbGVhbik6IElBY3Rpb25GYWN0b3J5IHtcbiAgICBjb25zdCByZXM6IElBY3Rpb25GYWN0b3J5ID0gZnVuY3Rpb24gYWN0aW9uKGFyZzEsIGFyZzI/KTogYW55IHtcbiAgICAgICAgLy8gYWN0aW9uKGZuKCkge30pXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGFyZzEpKVxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUFjdGlvbihhcmcxLm5hbWUgfHwgREVGQVVMVF9BQ1RJT05fTkFNRSwgYXJnMSwgYXV0b0FjdGlvbilcbiAgICAgICAgLy8gYWN0aW9uKFwibmFtZVwiLCBmbigpIHt9KVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihhcmcyKSkgcmV0dXJuIGNyZWF0ZUFjdGlvbihhcmcxLCBhcmcyLCBhdXRvQWN0aW9uKVxuICAgICAgICAvLyBAYWN0aW9uXG4gICAgICAgIGlmIChpc1N0cmluZ2lzaChhcmcyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0b3JlQW5ub3RhdGlvbihhcmcxLCBhcmcyLCBhdXRvQWN0aW9uID8gYXV0b0FjdGlvbkFubm90YXRpb24gOiBhY3Rpb25Bbm5vdGF0aW9uKVxuICAgICAgICB9XG4gICAgICAgIC8vIGFjdGlvbihcIm5hbWVcIikgJiBAYWN0aW9uKFwibmFtZVwiKVxuICAgICAgICBpZiAoaXNTdHJpbmdpc2goYXJnMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUFjdGlvbkFubm90YXRpb24oYXV0b0FjdGlvbiA/IEFVVE9BQ1RJT04gOiBBQ1RJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogYXJnMSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b0FjdGlvblxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX19ERVZfXykgZGllKFwiSW52YWxpZCBhcmd1bWVudHMgZm9yIGBhY3Rpb25gXCIpXG4gICAgfSBhcyBJQWN0aW9uRmFjdG9yeVxuICAgIHJldHVybiByZXNcbn1cblxuZXhwb3J0IGNvbnN0IGFjdGlvbjogSUFjdGlvbkZhY3RvcnkgPSBjcmVhdGVBY3Rpb25GYWN0b3J5KGZhbHNlKVxuT2JqZWN0LmFzc2lnbihhY3Rpb24sIGFjdGlvbkFubm90YXRpb24pXG5leHBvcnQgY29uc3QgYXV0b0FjdGlvbjogSUFjdGlvbkZhY3RvcnkgPSBjcmVhdGVBY3Rpb25GYWN0b3J5KHRydWUpXG5PYmplY3QuYXNzaWduKGF1dG9BY3Rpb24sIGF1dG9BY3Rpb25Bbm5vdGF0aW9uKVxuXG5hY3Rpb24uYm91bmQgPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGFjdGlvbkJvdW5kQW5ub3RhdGlvbilcbmF1dG9BY3Rpb24uYm91bmQgPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGF1dG9BY3Rpb25Cb3VuZEFubm90YXRpb24pXG5cbmV4cG9ydCBmdW5jdGlvbiBydW5JbkFjdGlvbjxUPihmbjogKCkgPT4gVCk6IFQge1xuICAgIHJldHVybiBleGVjdXRlQWN0aW9uKGZuLm5hbWUgfHwgREVGQVVMVF9BQ1RJT05fTkFNRSwgZmFsc2UsIGZuLCB0aGlzLCB1bmRlZmluZWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FjdGlvbih0aGluZzogYW55KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGhpbmcpICYmIHRoaW5nLmlzTW9ieEFjdGlvbiA9PT0gdHJ1ZVxufVxuIiwiaW1wb3J0IHtcbiAgICBFTVBUWV9PQkpFQ1QsXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIElSZWFjdGlvbkRpc3Bvc2VyLFxuICAgIElSZWFjdGlvblB1YmxpYyxcbiAgICBMYW1iZGEsXG4gICAgUmVhY3Rpb24sXG4gICAgYWN0aW9uLFxuICAgIGNvbXBhcmVyLFxuICAgIGdldE5leHRJZCxcbiAgICBpc0FjdGlvbixcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgZGllLFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUF1dG9ydW5PcHRpb25zIHtcbiAgICBkZWxheT86IG51bWJlclxuICAgIG5hbWU/OiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBFeHBlcmltZW50YWwuXG4gICAgICogV2FybnMgaWYgdGhlIHZpZXcgZG9lc24ndCB0cmFjayBvYnNlcnZhYmxlc1xuICAgICAqL1xuICAgIHJlcXVpcmVzT2JzZXJ2YWJsZT86IGJvb2xlYW5cbiAgICBzY2hlZHVsZXI/OiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IGFueVxuICAgIG9uRXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZFxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuYW1lZCByZWFjdGl2ZSB2aWV3IGFuZCBrZWVwcyBpdCBhbGl2ZSwgc28gdGhhdCB0aGUgdmlldyBpcyBhbHdheXNcbiAqIHVwZGF0ZWQgaWYgb25lIG9mIHRoZSBkZXBlbmRlbmNpZXMgY2hhbmdlcywgZXZlbiB3aGVuIHRoZSB2aWV3IGlzIG5vdCBmdXJ0aGVyIHVzZWQgYnkgc29tZXRoaW5nIGVsc2UuXG4gKiBAcGFyYW0gdmlldyBUaGUgcmVhY3RpdmUgdmlld1xuICogQHJldHVybnMgZGlzcG9zZXIgZnVuY3Rpb24sIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHN0b3AgdGhlIHZpZXcgZnJvbSBiZWluZyB1cGRhdGVkIGluIHRoZSBmdXR1cmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdXRvcnVuKFxuICAgIHZpZXc6IChyOiBJUmVhY3Rpb25QdWJsaWMpID0+IGFueSxcbiAgICBvcHRzOiBJQXV0b3J1bk9wdGlvbnMgPSBFTVBUWV9PQkpFQ1Rcbik6IElSZWFjdGlvbkRpc3Bvc2VyIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoIWlzRnVuY3Rpb24odmlldykpIGRpZShcIkF1dG9ydW4gZXhwZWN0cyBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XCIpXG4gICAgICAgIGlmIChpc0FjdGlvbih2aWV3KSkgZGllKFwiQXV0b3J1biBkb2VzIG5vdCBhY2NlcHQgYWN0aW9ucyBzaW5jZSBhY3Rpb25zIGFyZSB1bnRyYWNrYWJsZVwiKVxuICAgIH1cblxuICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9XG4gICAgICAgIG9wdHM/Lm5hbWUgPz8gKF9fREVWX18gPyAodmlldyBhcyBhbnkpLm5hbWUgfHwgXCJBdXRvcnVuQFwiICsgZ2V0TmV4dElkKCkgOiBcIkF1dG9ydW5cIilcbiAgICBjb25zdCBydW5TeW5jID0gIW9wdHMuc2NoZWR1bGVyICYmICFvcHRzLmRlbGF5XG4gICAgbGV0IHJlYWN0aW9uOiBSZWFjdGlvblxuXG4gICAgaWYgKHJ1blN5bmMpIHtcbiAgICAgICAgLy8gbm9ybWFsIGF1dG9ydW5cbiAgICAgICAgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24oXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IFJlYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFjayhyZWFjdGlvblJ1bm5lcilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRzLm9uRXJyb3IsXG4gICAgICAgICAgICBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZVxuICAgICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NoZWR1bGVyID0gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0cylcbiAgICAgICAgLy8gZGVib3VuY2VkIGF1dG9ydW5cbiAgICAgICAgbGV0IGlzU2NoZWR1bGVkID0gZmFsc2VcblxuICAgICAgICByZWFjdGlvbiA9IG5ldyBSZWFjdGlvbihcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1NjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBpc1NjaGVkdWxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2NoZWR1bGVkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVhY3Rpb24uaXNEaXNwb3NlZF8pIHJlYWN0aW9uLnRyYWNrKHJlYWN0aW9uUnVubmVyKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRzLm9uRXJyb3IsXG4gICAgICAgICAgICBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZVxuICAgICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhY3Rpb25SdW5uZXIoKSB7XG4gICAgICAgIHZpZXcocmVhY3Rpb24pXG4gICAgfVxuXG4gICAgcmVhY3Rpb24uc2NoZWR1bGVfKClcbiAgICByZXR1cm4gcmVhY3Rpb24uZ2V0RGlzcG9zZXJfKClcbn1cblxuZXhwb3J0IHR5cGUgSVJlYWN0aW9uT3B0aW9ucyA9IElBdXRvcnVuT3B0aW9ucyAmIHtcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4gICAgZXF1YWxzPzogSUVxdWFsc0NvbXBhcmVyPGFueT5cbn1cblxuY29uc3QgcnVuID0gKGY6IExhbWJkYSkgPT4gZigpXG5cbmZ1bmN0aW9uIGNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zKG9wdHM6IElSZWFjdGlvbk9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0cy5zY2hlZHVsZXJcbiAgICAgICAgPyBvcHRzLnNjaGVkdWxlclxuICAgICAgICA6IG9wdHMuZGVsYXlcbiAgICAgICAgPyAoZjogTGFtYmRhKSA9PiBzZXRUaW1lb3V0KGYsIG9wdHMuZGVsYXkhKVxuICAgICAgICA6IHJ1blxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhY3Rpb248VD4oXG4gICAgZXhwcmVzc2lvbjogKHI6IElSZWFjdGlvblB1YmxpYykgPT4gVCxcbiAgICBlZmZlY3Q6IChhcmc6IFQsIHByZXY6IFQsIHI6IElSZWFjdGlvblB1YmxpYykgPT4gdm9pZCxcbiAgICBvcHRzOiBJUmVhY3Rpb25PcHRpb25zID0gRU1QVFlfT0JKRUNUXG4pOiBJUmVhY3Rpb25EaXNwb3NlciB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGV4cHJlc3Npb24pIHx8ICFpc0Z1bmN0aW9uKGVmZmVjdCkpXG4gICAgICAgICAgICBkaWUoXCJGaXJzdCBhbmQgc2Vjb25kIGFyZ3VtZW50IHRvIHJlYWN0aW9uIHNob3VsZCBiZSBmdW5jdGlvbnNcIilcbiAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KG9wdHMpKSBkaWUoXCJUaGlyZCBhcmd1bWVudCBvZiByZWFjdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdFwiKVxuICAgIH1cbiAgICBjb25zdCBuYW1lID0gb3B0cy5uYW1lID8/IChfX0RFVl9fID8gXCJSZWFjdGlvbkBcIiArIGdldE5leHRJZCgpIDogXCJSZWFjdGlvblwiKVxuICAgIGNvbnN0IGVmZmVjdEFjdGlvbiA9IGFjdGlvbihcbiAgICAgICAgbmFtZSxcbiAgICAgICAgb3B0cy5vbkVycm9yID8gd3JhcEVycm9ySGFuZGxlcihvcHRzLm9uRXJyb3IsIGVmZmVjdCkgOiBlZmZlY3RcbiAgICApXG4gICAgY29uc3QgcnVuU3luYyA9ICFvcHRzLnNjaGVkdWxlciAmJiAhb3B0cy5kZWxheVxuICAgIGNvbnN0IHNjaGVkdWxlciA9IGNyZWF0ZVNjaGVkdWxlckZyb21PcHRpb25zKG9wdHMpXG5cbiAgICBsZXQgZmlyc3RUaW1lID0gdHJ1ZVxuICAgIGxldCBpc1NjaGVkdWxlZCA9IGZhbHNlXG4gICAgbGV0IHZhbHVlOiBUXG4gICAgbGV0IG9sZFZhbHVlOiBUID0gdW5kZWZpbmVkIGFzIGFueSAvLyBvbmx5IGFuIGlzc3VlIHdpdGggZmlyZUltbWVkaWF0ZWx5XG5cbiAgICBjb25zdCBlcXVhbHMgPSAob3B0cyBhcyBhbnkpLmNvbXBhcmVTdHJ1Y3R1cmFsXG4gICAgICAgID8gY29tcGFyZXIuc3RydWN0dXJhbFxuICAgICAgICA6IG9wdHMuZXF1YWxzIHx8IGNvbXBhcmVyLmRlZmF1bHRcblxuICAgIGNvbnN0IHIgPSBuZXcgUmVhY3Rpb24oXG4gICAgICAgIG5hbWUsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUgfHwgcnVuU3luYykge1xuICAgICAgICAgICAgICAgIHJlYWN0aW9uUnVubmVyKClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgaXNTY2hlZHVsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyIShyZWFjdGlvblJ1bm5lcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3B0cy5vbkVycm9yLFxuICAgICAgICBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZVxuICAgIClcblxuICAgIGZ1bmN0aW9uIHJlYWN0aW9uUnVubmVyKCkge1xuICAgICAgICBpc1NjaGVkdWxlZCA9IGZhbHNlXG4gICAgICAgIGlmIChyLmlzRGlzcG9zZWRfKSByZXR1cm5cbiAgICAgICAgbGV0IGNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICAgICAgICByLnRyYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRWYWx1ZSA9IGFsbG93U3RhdGVDaGFuZ2VzKGZhbHNlLCAoKSA9PiBleHByZXNzaW9uKHIpKVxuICAgICAgICAgICAgY2hhbmdlZCA9IGZpcnN0VGltZSB8fCAhZXF1YWxzKHZhbHVlLCBuZXh0VmFsdWUpXG4gICAgICAgICAgICBvbGRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICB2YWx1ZSA9IG5leHRWYWx1ZVxuICAgICAgICB9KVxuICAgICAgICBpZiAoZmlyc3RUaW1lICYmIG9wdHMuZmlyZUltbWVkaWF0ZWx5ISkgZWZmZWN0QWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSwgcilcbiAgICAgICAgZWxzZSBpZiAoIWZpcnN0VGltZSAmJiBjaGFuZ2VkKSBlZmZlY3RBY3Rpb24odmFsdWUsIG9sZFZhbHVlLCByKVxuICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZVxuICAgIH1cblxuICAgIHIuc2NoZWR1bGVfKClcbiAgICByZXR1cm4gci5nZXREaXNwb3Nlcl8oKVxufVxuXG5mdW5jdGlvbiB3cmFwRXJyb3JIYW5kbGVyKGVycm9ySGFuZGxlciwgYmFzZUZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIuY2FsbCh0aGlzLCBlKVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBJQ29tcHV0ZWRWYWx1ZSxcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEF0b20sXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIElPYnNlcnZhYmxlVmFsdWVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgT05fQkVDT01FX09CU0VSVkVEID0gXCJvbkJPXCJcbmNvbnN0IE9OX0JFQ09NRV9VTk9CU0VSVkVEID0gXCJvbkJVT1wiXG5cbmV4cG9ydCBmdW5jdGlvbiBvbkJlY29tZU9ic2VydmVkKFxuICAgIHZhbHVlOlxuICAgICAgICB8IElPYnNlcnZhYmxlXG4gICAgICAgIHwgSUNvbXB1dGVkVmFsdWU8YW55PlxuICAgICAgICB8IElPYnNlcnZhYmxlQXJyYXk8YW55PlxuICAgICAgICB8IE9ic2VydmFibGVNYXA8YW55LCBhbnk+XG4gICAgICAgIHwgT2JzZXJ2YWJsZVNldDxhbnk+XG4gICAgICAgIHwgSU9ic2VydmFibGVWYWx1ZTxhbnk+LFxuICAgIGxpc3RlbmVyOiBMYW1iZGFcbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9uQmVjb21lT2JzZXJ2ZWQ8SywgViA9IGFueT4oXG4gICAgdmFsdWU6IE9ic2VydmFibGVNYXA8SywgVj4gfCBPYmplY3QsXG4gICAgcHJvcGVydHk6IEssXG4gICAgbGlzdGVuZXI6IExhbWJkYVxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb25CZWNvbWVPYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMz8pOiBMYW1iZGEge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKE9OX0JFQ09NRV9PQlNFUlZFRCwgdGhpbmcsIGFyZzIsIGFyZzMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkJlY29tZVVub2JzZXJ2ZWQoXG4gICAgdmFsdWU6XG4gICAgICAgIHwgSU9ic2VydmFibGVcbiAgICAgICAgfCBJQ29tcHV0ZWRWYWx1ZTxhbnk+XG4gICAgICAgIHwgSU9ic2VydmFibGVBcnJheTxhbnk+XG4gICAgICAgIHwgT2JzZXJ2YWJsZU1hcDxhbnksIGFueT5cbiAgICAgICAgfCBPYnNlcnZhYmxlU2V0PGFueT5cbiAgICAgICAgfCBJT2JzZXJ2YWJsZVZhbHVlPGFueT4sXG4gICAgbGlzdGVuZXI6IExhbWJkYVxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb25CZWNvbWVVbm9ic2VydmVkPEssIFYgPSBhbnk+KFxuICAgIHZhbHVlOiBPYnNlcnZhYmxlTWFwPEssIFY+IHwgT2JqZWN0LFxuICAgIHByb3BlcnR5OiBLLFxuICAgIGxpc3RlbmVyOiBMYW1iZGFcbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9uQmVjb21lVW5vYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMz8pOiBMYW1iZGEge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKE9OX0JFQ09NRV9VTk9CU0VSVkVELCB0aGluZywgYXJnMiwgYXJnMylcbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0SG9vayhob29rOiBcIm9uQk9cIiB8IFwib25CVU9cIiwgdGhpbmcsIGFyZzIsIGFyZzMpIHtcbiAgICBjb25zdCBhdG9tOiBJT2JzZXJ2YWJsZSA9XG4gICAgICAgIHR5cGVvZiBhcmczID09PSBcImZ1bmN0aW9uXCIgPyBnZXRBdG9tKHRoaW5nLCBhcmcyKSA6IChnZXRBdG9tKHRoaW5nKSBhcyBhbnkpXG4gICAgY29uc3QgY2IgPSBpc0Z1bmN0aW9uKGFyZzMpID8gYXJnMyA6IGFyZzJcbiAgICBjb25zdCBsaXN0ZW5lcnNLZXkgPSBgJHtob29rfUxgIGFzIFwib25CT0xcIiB8IFwib25CVU9MXCJcblxuICAgIGlmIChhdG9tW2xpc3RlbmVyc0tleV0pIHtcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldIS5hZGQoY2IpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldID0gbmV3IFNldDxMYW1iZGE+KFtjYl0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaG9va0xpc3RlbmVycyA9IGF0b21bbGlzdGVuZXJzS2V5XVxuICAgICAgICBpZiAoaG9va0xpc3RlbmVycykge1xuICAgICAgICAgICAgaG9va0xpc3RlbmVycy5kZWxldGUoY2IpXG4gICAgICAgICAgICBpZiAoaG9va0xpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGF0b21bbGlzdGVuZXJzS2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2xvYmFsU3RhdGUsIGlzb2xhdGVHbG9iYWxTdGF0ZSwgc2V0UmVhY3Rpb25TY2hlZHVsZXIgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5jb25zdCBORVZFUiA9IFwibmV2ZXJcIlxuY29uc3QgQUxXQVlTID0gXCJhbHdheXNcIlxuY29uc3QgT0JTRVJWRUQgPSBcIm9ic2VydmVkXCJcbi8vIGNvbnN0IElGX0FWQUlMQUJMRSA9IFwiaWZhdmFpbGFibGVcIlxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlKG9wdGlvbnM6IHtcbiAgICBlbmZvcmNlQWN0aW9ucz86IFwibmV2ZXJcIiB8IFwiYWx3YXlzXCIgfCBcIm9ic2VydmVkXCJcbiAgICBjb21wdXRlZFJlcXVpcmVzUmVhY3Rpb24/OiBib29sZWFuXG4gICAgLyoqXG4gICAgICogV2FybiBpZiB5b3UgdHJ5IHRvIGNyZWF0ZSB0byBkZXJpdmF0aW9uIC8gcmVhY3RpdmUgY29udGV4dCB3aXRob3V0IGFjY2Vzc2luZyBhbnkgb2JzZXJ2YWJsZS5cbiAgICAgKi9cbiAgICByZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZT86IGJvb2xlYW5cbiAgICAvKipcbiAgICAgKiBXYXJuIGlmIG9ic2VydmFibGVzIGFyZSBhY2Nlc3NlZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dFxuICAgICAqL1xuICAgIG9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uPzogYm9vbGVhblxuICAgIGlzb2xhdGVHbG9iYWxTdGF0ZT86IGJvb2xlYW5cbiAgICBkaXNhYmxlRXJyb3JCb3VuZGFyaWVzPzogYm9vbGVhblxuICAgIHNhZmVEZXNjcmlwdG9ycz86IGJvb2xlYW5cbiAgICByZWFjdGlvblNjaGVkdWxlcj86IChmOiAoKSA9PiB2b2lkKSA9PiB2b2lkXG4gICAgdXNlUHJveGllcz86IFwiYWx3YXlzXCIgfCBcIm5ldmVyXCIgfCBcImlmYXZhaWxhYmxlXCJcbn0pOiB2b2lkIHtcbiAgICBpZiAob3B0aW9ucy5pc29sYXRlR2xvYmFsU3RhdGUgPT09IHRydWUpIHtcbiAgICAgICAgaXNvbGF0ZUdsb2JhbFN0YXRlKClcbiAgICB9XG4gICAgY29uc3QgeyB1c2VQcm94aWVzLCBlbmZvcmNlQWN0aW9ucyB9ID0gb3B0aW9uc1xuICAgIGlmICh1c2VQcm94aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUudXNlUHJveGllcyA9XG4gICAgICAgICAgICB1c2VQcm94aWVzID09PSBBTFdBWVNcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6IHVzZVByb3hpZXMgPT09IE5FVkVSXG4gICAgICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgICAgIDogdHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgfVxuICAgIGlmICh1c2VQcm94aWVzID09PSBcImlmYXZhaWxhYmxlXCIpIGdsb2JhbFN0YXRlLnZlcmlmeVByb3hpZXMgPSB0cnVlXG4gICAgaWYgKGVuZm9yY2VBY3Rpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZWEgPSBlbmZvcmNlQWN0aW9ucyA9PT0gQUxXQVlTID8gQUxXQVlTIDogZW5mb3JjZUFjdGlvbnMgPT09IE9CU0VSVkVEXG4gICAgICAgIGdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zID0gZWFcbiAgICAgICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgPSBlYSA9PT0gdHJ1ZSB8fCBlYSA9PT0gQUxXQVlTID8gZmFsc2UgOiB0cnVlXG4gICAgfVxuICAgIDtbXG4gICAgICAgIFwiY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uXCIsXG4gICAgICAgIFwicmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGVcIixcbiAgICAgICAgXCJvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvblwiLFxuICAgICAgICBcImRpc2FibGVFcnJvckJvdW5kYXJpZXNcIixcbiAgICAgICAgXCJzYWZlRGVzY3JpcHRvcnNcIlxuICAgIF0uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoa2V5IGluIG9wdGlvbnMpIGdsb2JhbFN0YXRlW2tleV0gPSAhIW9wdGlvbnNba2V5XVxuICAgIH0pXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzID0gIWdsb2JhbFN0YXRlLm9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uXG4gICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIldBUk5JTkc6IERlYnVnIGZlYXR1cmUgb25seS4gTW9iWCB3aWxsIE5PVCByZWNvdmVyIGZyb20gZXJyb3JzIHdoZW4gYGRpc2FibGVFcnJvckJvdW5kYXJpZXNgIGlzIGVuYWJsZWQuXCJcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5yZWFjdGlvblNjaGVkdWxlcikge1xuICAgICAgICBzZXRSZWFjdGlvblNjaGVkdWxlcihvcHRpb25zLnJlYWN0aW9uU2NoZWR1bGVyKVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMsXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIEFubm90YXRpb25zTWFwLFxuICAgIHN0YXJ0QmF0Y2gsXG4gICAgZW5kQmF0Y2gsXG4gICAgYXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGlzT2JzZXJ2YWJsZSxcbiAgICBkaWUsXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyxcbiAgICAkbW9ieCxcbiAgICBvd25LZXlzXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRPYnNlcnZhYmxlPEEgZXh0ZW5kcyBPYmplY3QsIEIgZXh0ZW5kcyBPYmplY3Q+KFxuICAgIHRhcmdldDogQSxcbiAgICBwcm9wZXJ0aWVzOiBCLFxuICAgIGFubm90YXRpb25zPzogQW5ub3RhdGlvbnNNYXA8QiwgbmV2ZXI+LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogQSAmIEIge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCkgZGllKFwiJ2V4dGVuZE9ic2VydmFibGUnIGV4cGVjdGVkIDItNCBhcmd1bWVudHNcIilcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICBkaWUoXCInZXh0ZW5kT2JzZXJ2YWJsZScgZXhwZWN0cyBhbiBvYmplY3QgYXMgZmlyc3QgYXJndW1lbnRcIilcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0YXJnZXQpKVxuICAgICAgICAgICAgZGllKFwiJ2V4dGVuZE9ic2VydmFibGUnIHNob3VsZCBub3QgYmUgdXNlZCBvbiBtYXBzLCB1c2UgbWFwLm1lcmdlIGluc3RlYWRcIilcbiAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHByb3BlcnRpZXMpKVxuICAgICAgICAgICAgZGllKGAnZXh0ZW5kT2JzZXJ2YWJlJyBvbmx5IGFjY2VwdHMgcGxhaW4gb2JqZWN0cyBhcyBzZWNvbmQgYXJndW1lbnRgKVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlKHByb3BlcnRpZXMpIHx8IGlzT2JzZXJ2YWJsZShhbm5vdGF0aW9ucykpXG4gICAgICAgICAgICBkaWUoYEV4dGVuZGluZyBhbiBvYmplY3Qgd2l0aCBhbm90aGVyIG9ic2VydmFibGUgKG9iamVjdCkgaXMgbm90IHN1cHBvcnRlZGApXG4gICAgfVxuICAgIC8vIFB1bGwgZGVzY3JpcHRvcnMgZmlyc3QsIHNvIHdlIGRvbid0IGhhdmUgdG8gZGVhbCB3aXRoIHByb3BzIGFkZGVkIGJ5IGFkbWluaXN0cmF0aW9uICgkbW9ieClcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvcGVydGllcylcblxuICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uID0gYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucylbJG1vYnhdXG4gICAgc3RhcnRCYXRjaCgpXG4gICAgdHJ5IHtcbiAgICAgICAgb3duS2V5cyhkZXNjcmlwdG9ycykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgYWRtLmV4dGVuZF8oXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JzW2tleSBhcyBhbnldLFxuICAgICAgICAgICAgICAgIC8vIG11c3QgcGFzcyBcInVuZGVmaW5lZFwiIGZvciB7IGtleTogdW5kZWZpbmVkIH1cbiAgICAgICAgICAgICAgICAhYW5ub3RhdGlvbnMgPyB0cnVlIDoga2V5IGluIGFubm90YXRpb25zID8gYW5ub3RhdGlvbnNba2V5XSA6IHRydWVcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQgYXMgYW55XG59XG4iLCJpbXBvcnQgeyBJRGVwVHJlZU5vZGUsIGdldEF0b20sIGdldE9ic2VydmVycywgaGFzT2JzZXJ2ZXJzIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJRGVwZW5kZW5jeVRyZWUge1xuICAgIG5hbWU6IHN0cmluZ1xuICAgIGRlcGVuZGVuY2llcz86IElEZXBlbmRlbmN5VHJlZVtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmVyVHJlZSB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgb2JzZXJ2ZXJzPzogSU9ic2VydmVyVHJlZVtdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRlbmN5VHJlZSh0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IElEZXBlbmRlbmN5VHJlZSB7XG4gICAgcmV0dXJuIG5vZGVUb0RlcGVuZGVuY3lUcmVlKGdldEF0b20odGhpbmcsIHByb3BlcnR5KSlcbn1cblxuZnVuY3Rpb24gbm9kZVRvRGVwZW5kZW5jeVRyZWUobm9kZTogSURlcFRyZWVOb2RlKTogSURlcGVuZGVuY3lUcmVlIHtcbiAgICBjb25zdCByZXN1bHQ6IElEZXBlbmRlbmN5VHJlZSA9IHtcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lX1xuICAgIH1cbiAgICBpZiAobm9kZS5vYnNlcnZpbmdfICYmIG5vZGUub2JzZXJ2aW5nXy5sZW5ndGggPiAwKVxuICAgICAgICByZXN1bHQuZGVwZW5kZW5jaWVzID0gdW5pcXVlKG5vZGUub2JzZXJ2aW5nXykubWFwKG5vZGVUb0RlcGVuZGVuY3lUcmVlKVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9ic2VydmVyVHJlZSh0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IElPYnNlcnZlclRyZWUge1xuICAgIHJldHVybiBub2RlVG9PYnNlcnZlclRyZWUoZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKVxufVxuXG5mdW5jdGlvbiBub2RlVG9PYnNlcnZlclRyZWUobm9kZTogSURlcFRyZWVOb2RlKTogSU9ic2VydmVyVHJlZSB7XG4gICAgY29uc3QgcmVzdWx0OiBJT2JzZXJ2ZXJUcmVlID0ge1xuICAgICAgICBuYW1lOiBub2RlLm5hbWVfXG4gICAgfVxuICAgIGlmIChoYXNPYnNlcnZlcnMobm9kZSBhcyBhbnkpKVxuICAgICAgICByZXN1bHQub2JzZXJ2ZXJzID0gQXJyYXkuZnJvbSg8YW55PmdldE9ic2VydmVycyhub2RlIGFzIGFueSkpLm1hcCg8YW55Pm5vZGVUb09ic2VydmVyVHJlZSlcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZTxUPihsaXN0OiBUW10pOiBUW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQobGlzdCkpXG59XG4iLCJpbXBvcnQge1xuICAgIGFjdGlvbixcbiAgICBub29wLFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIEFubm90YXRpb24sXG4gICAgaXNTdHJpbmdpc2gsXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUZsb3dBbm5vdGF0aW9uXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBjb25zdCBGTE9XID0gXCJmbG93XCJcblxubGV0IGdlbmVyYXRvcklkID0gMFxuXG5leHBvcnQgZnVuY3Rpb24gRmxvd0NhbmNlbGxhdGlvbkVycm9yKCkge1xuICAgIHRoaXMubWVzc2FnZSA9IFwiRkxPV19DQU5DRUxMRURcIlxufVxuRmxvd0NhbmNlbGxhdGlvbkVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGbG93Q2FuY2VsbGF0aW9uRXJyb3IoZXJyb3I6IEVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRmxvd0NhbmNlbGxhdGlvbkVycm9yXG59XG5cbmV4cG9ydCB0eXBlIENhbmNlbGxhYmxlUHJvbWlzZTxUPiA9IFByb21pc2U8VD4gJiB7IGNhbmNlbCgpOiB2b2lkIH1cblxuaW50ZXJmYWNlIEZsb3cgZXh0ZW5kcyBBbm5vdGF0aW9uLCBQcm9wZXJ0eURlY29yYXRvciB7XG4gICAgPFIsIEFyZ3MgZXh0ZW5kcyBhbnlbXT4oXG4gICAgICAgIGdlbmVyYXRvcjogKC4uLmFyZ3M6IEFyZ3MpID0+IEdlbmVyYXRvcjxhbnksIFIsIGFueT4gfCBBc3luY0dlbmVyYXRvcjxhbnksIFIsIGFueT5cbiAgICApOiAoLi4uYXJnczogQXJncykgPT4gQ2FuY2VsbGFibGVQcm9taXNlPFI+XG59XG5cbmNvbnN0IGZsb3dBbm5vdGF0aW9uID0gY3JlYXRlRmxvd0Fubm90YXRpb24oXCJmbG93XCIpXG5cbmV4cG9ydCBjb25zdCBmbG93OiBGbG93ID0gT2JqZWN0LmFzc2lnbihcbiAgICBmdW5jdGlvbiBmbG93KGFyZzEsIGFyZzI/KSB7XG4gICAgICAgIC8vIEBmbG93XG4gICAgICAgIGlmIChpc1N0cmluZ2lzaChhcmcyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0b3JlQW5ub3RhdGlvbihhcmcxLCBhcmcyLCBmbG93QW5ub3RhdGlvbilcbiAgICAgICAgfVxuICAgICAgICAvLyBmbG93KGZuKVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBhcmd1bWVudHMubGVuZ3RoICE9PSAxKVxuICAgICAgICAgICAgZGllKGBGbG93IGV4cGVjdHMgc2luZ2xlIGFyZ3VtZW50IHdpdGggZ2VuZXJhdG9yIGZ1bmN0aW9uYClcbiAgICAgICAgY29uc3QgZ2VuZXJhdG9yID0gYXJnMVxuICAgICAgICBjb25zdCBuYW1lID0gZ2VuZXJhdG9yLm5hbWUgfHwgXCI8dW5uYW1lZCBmbG93PlwiXG5cbiAgICAgICAgLy8gSW1wbGVtZW50YXRpb24gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RqL2NvL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gICAgICAgIGNvbnN0IHJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXNcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHNcbiAgICAgICAgICAgIGNvbnN0IHJ1bklkID0gKytnZW5lcmF0b3JJZFxuICAgICAgICAgICAgY29uc3QgZ2VuID0gYWN0aW9uKGAke25hbWV9IC0gcnVuaWQ6ICR7cnVuSWR9IC0gaW5pdGAsIGdlbmVyYXRvcikuYXBwbHkoY3R4LCBhcmdzKVxuICAgICAgICAgICAgbGV0IHJlamVjdG9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZFxuICAgICAgICAgICAgbGV0IHBlbmRpbmdQcm9taXNlOiBDYW5jZWxsYWJsZVByb21pc2U8YW55PiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuXG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIGxldCBzdGVwSWQgPSAwXG4gICAgICAgICAgICAgICAgcmVqZWN0b3IgPSByZWplY3RcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uRnVsZmlsbGVkKHJlczogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9taXNlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXRcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGFjdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtuYW1lfSAtIHJ1bmlkOiAke3J1bklkfSAtIHlpZWxkICR7c3RlcElkKyt9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW4ubmV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgKS5jYWxsKGdlbiwgcmVzKVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGUpXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBuZXh0KHJldClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBvblJlamVjdGVkKGVycjogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9taXNlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXRcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGFjdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtuYW1lfSAtIHJ1bmlkOiAke3J1bklkfSAtIHlpZWxkICR7c3RlcElkKyt9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW4udGhyb3chXG4gICAgICAgICAgICAgICAgICAgICAgICApLmNhbGwoZ2VuLCBlcnIpXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXh0KHJldClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBuZXh0KHJldDogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHJldD8udGhlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuIGFzeW5jIGl0ZXJhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICByZXQudGhlbihuZXh0LCByZWplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmV0LmRvbmUpIHJldHVybiByZXNvbHZlKHJldC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUocmV0LnZhbHVlKSBhcyBhbnlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBlbmRpbmdQcm9taXNlIS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG9uRnVsZmlsbGVkKHVuZGVmaW5lZCkgLy8ga2ljayBvZmYgdGhlIHByb2Nlc3NcbiAgICAgICAgICAgIH0pIGFzIGFueVxuXG4gICAgICAgICAgICBwcm9taXNlLmNhbmNlbCA9IGFjdGlvbihgJHtuYW1lfSAtIHJ1bmlkOiAke3J1bklkfSAtIGNhbmNlbGAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1Byb21pc2UpIGNhbmNlbFByb21pc2UocGVuZGluZ1Byb21pc2UpXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmFsbHkgYmxvY2sgY2FuIHJldHVybiAob3IgeWllbGQpIHN0dWZmLi5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gZ2VuLnJldHVybiEodW5kZWZpbmVkIGFzIGFueSlcbiAgICAgICAgICAgICAgICAgICAgLy8gZWF0IGFueXRoaW5nIHRoYXQgcHJvbWlzZSB3b3VsZCBkbywgaXQncyBjYW5jZWxsZWQhXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHlpZWxkZWRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJlcy52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgeWllbGRlZFByb21pc2UudGhlbihub29wLCBub29wKVxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxQcm9taXNlKHlpZWxkZWRQcm9taXNlKSAvLyBtYXliZSBpdCBjYW4gYmUgY2FuY2VsbGVkIDopXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlamVjdCBvdXIgb3JpZ2luYWwgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICByZWplY3RvcihuZXcgRmxvd0NhbmNlbGxhdGlvbkVycm9yKCkpXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3RvcihlKSAvLyB0aGVyZSBjb3VsZCBiZSBhIHRocm93aW5nIGZpbmFsbHkgYmxvY2tcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgfVxuICAgICAgICByZXMuaXNNb2JYRmxvdyA9IHRydWVcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH0gYXMgYW55LFxuICAgIGZsb3dBbm5vdGF0aW9uXG4pXG5cbmZ1bmN0aW9uIGNhbmNlbFByb21pc2UocHJvbWlzZSkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHByb21pc2UuY2FuY2VsKSkgcHJvbWlzZS5jYW5jZWwoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxvd1Jlc3VsdDxUPihcbiAgICByZXN1bHQ6IFRcbik6IFQgZXh0ZW5kcyBHZW5lcmF0b3I8YW55LCBpbmZlciBSLCBhbnk+XG4gICAgPyBDYW5jZWxsYWJsZVByb21pc2U8Uj5cbiAgICA6IFQgZXh0ZW5kcyBDYW5jZWxsYWJsZVByb21pc2U8YW55PlxuICAgID8gVFxuICAgIDogbmV2ZXIge1xuICAgIHJldHVybiByZXN1bHQgYXMgYW55IC8vIGp1c3QgdHJpY2tpbmcgVHlwZVNjcmlwdCA6KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGbG93KGZuOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZm4/LmlzTW9iWEZsb3cgPT09IHRydWVcbn1cbiIsImltcG9ydCB7XG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBJT2JzZXJ2YWJsZVZhbHVlLFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEFkbWluaXN0cmF0aW9uLFxuICAgIGlzT2JzZXJ2YWJsZUFycmF5LFxuICAgIGlzT2JzZXJ2YWJsZU1hcCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgaXNPYnNlcnZhYmxlVmFsdWUsXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBkaWUsXG4gICAgaXNTdHJpbmdpc2hcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IHR5cGUgUmVhZEludGVyY2VwdG9yPFQ+ID0gKHZhbHVlOiBhbnkpID0+IFRcblxuLyoqIEV4cGVyaW1lbnRhbCBmZWF0dXJlIHJpZ2h0IG5vdywgdGVzdGVkIGluZGlyZWN0bHkgdmlhIE1vYngtU3RhdGUtVHJlZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdFJlYWRzPFQ+KHZhbHVlOiBJT2JzZXJ2YWJsZVZhbHVlPFQ+LCBoYW5kbGVyOiBSZWFkSW50ZXJjZXB0b3I8VD4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHRSZWFkczxUPihcbiAgICBvYnNlcnZhYmxlQXJyYXk6IElPYnNlcnZhYmxlQXJyYXk8VD4sXG4gICAgaGFuZGxlcjogUmVhZEludGVyY2VwdG9yPFQ+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHRSZWFkczxLLCBWPihcbiAgICBvYnNlcnZhYmxlTWFwOiBPYnNlcnZhYmxlTWFwPEssIFY+LFxuICAgIGhhbmRsZXI6IFJlYWRJbnRlcmNlcHRvcjxWPlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0UmVhZHM8Vj4oXG4gICAgb2JzZXJ2YWJsZVNldDogT2JzZXJ2YWJsZVNldDxWPixcbiAgICBoYW5kbGVyOiBSZWFkSW50ZXJjZXB0b3I8Vj5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdFJlYWRzKFxuICAgIG9iamVjdDogT2JqZWN0LFxuICAgIHByb3BlcnR5OiBzdHJpbmcsXG4gICAgaGFuZGxlcjogUmVhZEludGVyY2VwdG9yPGFueT5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdFJlYWRzKHRoaW5nLCBwcm9wT3JIYW5kbGVyPywgaGFuZGxlcj8pOiBMYW1iZGEge1xuICAgIGxldCB0YXJnZXRcbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSB8fCBpc09ic2VydmFibGVBcnJheSh0aGluZykgfHwgaXNPYnNlcnZhYmxlVmFsdWUodGhpbmcpKSB7XG4gICAgICAgIHRhcmdldCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSkge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiAhaXNTdHJpbmdpc2gocHJvcE9ySGFuZGxlcikpXG4gICAgICAgICAgICByZXR1cm4gZGllKFxuICAgICAgICAgICAgICAgIGBJbnRlcmNlcHRSZWFkcyBjYW4gb25seSBiZSB1c2VkIHdpdGggYSBzcGVjaWZpYyBwcm9wZXJ0eSwgbm90IHdpdGggYW4gb2JqZWN0IGluIGdlbmVyYWxgXG4gICAgICAgICAgICApXG4gICAgICAgIHRhcmdldCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wT3JIYW5kbGVyKVxuICAgIH0gZWxzZSBpZiAoX19ERVZfXykge1xuICAgICAgICByZXR1cm4gZGllKGBFeHBlY3RlZCBvYnNlcnZhYmxlIG1hcCwgb2JqZWN0IG9yIGFycmF5IGFzIGZpcnN0IGFycmF5YClcbiAgICB9XG4gICAgaWYgKF9fREVWX18gJiYgdGFyZ2V0LmRlaGFuY2VyICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBkaWUoYEFuIGludGVyY2VwdCByZWFkZXIgd2FzIGFscmVhZHkgZXN0YWJsaXNoZWRgKVxuICAgIHRhcmdldC5kZWhhbmNlciA9IHR5cGVvZiBwcm9wT3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wT3JIYW5kbGVyIDogaGFuZGxlclxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHRhcmdldC5kZWhhbmNlciA9IHVuZGVmaW5lZFxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgSUFycmF5V2lsbENoYW5nZSxcbiAgICBJQXJyYXlXaWxsU3BsaWNlLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTWFwV2lsbENoYW5nZSxcbiAgICBJT2JqZWN0V2lsbENoYW5nZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIElPYnNlcnZhYmxlVmFsdWUsXG4gICAgSVZhbHVlV2lsbENoYW5nZSxcbiAgICBMYW1iZGEsXG4gICAgT2JzZXJ2YWJsZU1hcCxcbiAgICBnZXRBZG1pbmlzdHJhdGlvbixcbiAgICBPYnNlcnZhYmxlU2V0LFxuICAgIElTZXRXaWxsQ2hhbmdlLFxuICAgIGlzRnVuY3Rpb25cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdDxUPihcbiAgICB2YWx1ZTogSU9ic2VydmFibGVWYWx1ZTxUPixcbiAgICBoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVZhbHVlV2lsbENoYW5nZTxUPj5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdDxUPihcbiAgICBvYnNlcnZhYmxlQXJyYXk6IElPYnNlcnZhYmxlQXJyYXk8VD4sXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElBcnJheVdpbGxDaGFuZ2U8VD4gfCBJQXJyYXlXaWxsU3BsaWNlPFQ+PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0PEssIFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVNYXA8SywgVj4sXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElNYXBXaWxsQ2hhbmdlPEssIFY+PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0PFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVTZXQ8Vj4sXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElTZXRXaWxsQ2hhbmdlPFY+PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0PEssIFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVNYXA8SywgVj4sXG4gICAgcHJvcGVydHk6IEssXG4gICAgaGFuZGxlcjogSUludGVyY2VwdG9yPElWYWx1ZVdpbGxDaGFuZ2U8Vj4+XG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQob2JqZWN0OiBvYmplY3QsIGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJT2JqZWN0V2lsbENoYW5nZT4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcmNlcHQ8VCBleHRlbmRzIG9iamVjdCwgSyBleHRlbmRzIGtleW9mIFQ+KFxuICAgIG9iamVjdDogVCxcbiAgICBwcm9wZXJ0eTogSyxcbiAgICBoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVZhbHVlV2lsbENoYW5nZTxhbnk+PlxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0KHRoaW5nLCBwcm9wT3JIYW5kbGVyPywgaGFuZGxlcj8pOiBMYW1iZGEge1xuICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSByZXR1cm4gaW50ZXJjZXB0UHJvcGVydHkodGhpbmcsIHByb3BPckhhbmRsZXIsIGhhbmRsZXIpXG4gICAgZWxzZSByZXR1cm4gaW50ZXJjZXB0SW50ZXJjZXB0YWJsZSh0aGluZywgcHJvcE9ySGFuZGxlcilcbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0SW50ZXJjZXB0YWJsZSh0aGluZywgaGFuZGxlcikge1xuICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZykuaW50ZXJjZXB0XyhoYW5kbGVyKVxufVxuXG5mdW5jdGlvbiBpbnRlcmNlcHRQcm9wZXJ0eSh0aGluZywgcHJvcGVydHksIGhhbmRsZXIpIHtcbiAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcsIHByb3BlcnR5KS5pbnRlcmNlcHRfKGhhbmRsZXIpXG59XG4iLCJpbXBvcnQgeyAkbW9ieCwgZ2V0QXRvbSwgaXNDb21wdXRlZFZhbHVlLCBpc09ic2VydmFibGVPYmplY3QsIGRpZSwgaXNTdHJpbmdpc2ggfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gX2lzQ29tcHV0ZWQodmFsdWUsIHByb3BlcnR5PzogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHZhbHVlKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZVxuICAgICAgICBpZiAoIXZhbHVlWyRtb2J4XS52YWx1ZXNfLmhhcyhwcm9wZXJ0eSkpIHJldHVybiBmYWxzZVxuICAgICAgICBjb25zdCBhdG9tID0gZ2V0QXRvbSh2YWx1ZSwgcHJvcGVydHkpXG4gICAgICAgIHJldHVybiBpc0NvbXB1dGVkVmFsdWUoYXRvbSlcbiAgICB9XG4gICAgcmV0dXJuIGlzQ29tcHV0ZWRWYWx1ZSh2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcHV0ZWQodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChfX0RFVl9fICYmIGFyZ3VtZW50cy5sZW5ndGggPiAxKVxuICAgICAgICByZXR1cm4gZGllKFxuICAgICAgICAgICAgYGlzQ29tcHV0ZWQgZXhwZWN0cyBvbmx5IDEgYXJndW1lbnQuIFVzZSBpc0NvbXB1dGVkUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlgXG4gICAgICAgIClcbiAgICByZXR1cm4gX2lzQ29tcHV0ZWQodmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXB1dGVkUHJvcCh2YWx1ZTogYW55LCBwcm9wTmFtZTogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhaXNTdHJpbmdpc2gocHJvcE5hbWUpKVxuICAgICAgICByZXR1cm4gZGllKGBpc0NvbXB1dGVkIGV4cGVjdGVkIGEgcHJvcGVydHkgbmFtZSBhcyBzZWNvbmQgYXJndW1lbnRgKVxuICAgIHJldHVybiBfaXNDb21wdXRlZCh2YWx1ZSwgcHJvcE5hbWUpXG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIGlzQXRvbSxcbiAgICBpc0NvbXB1dGVkVmFsdWUsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBpc1JlYWN0aW9uLFxuICAgIGRpZSxcbiAgICBpc1N0cmluZ2lzaFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5mdW5jdGlvbiBfaXNPYnNlcnZhYmxlKHZhbHVlLCBwcm9wZXJ0eT86IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIGZhbHNlXG4gICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgKGlzT2JzZXJ2YWJsZU1hcCh2YWx1ZSkgfHwgaXNPYnNlcnZhYmxlQXJyYXkodmFsdWUpKSlcbiAgICAgICAgICAgIHJldHVybiBkaWUoXG4gICAgICAgICAgICAgICAgXCJpc09ic2VydmFibGUob2JqZWN0LCBwcm9wZXJ0eU5hbWUpIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIGFycmF5cyBhbmQgbWFwcy4gVXNlIG1hcC5oYXMgb3IgYXJyYXkubGVuZ3RoIGluc3RlYWQuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVskbW9ieF0udmFsdWVzXy5oYXMocHJvcGVydHkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIC8vIEZvciBmaXJzdCBjaGVjaywgc2VlICM3MDFcbiAgICByZXR1cm4gKFxuICAgICAgICBpc09ic2VydmFibGVPYmplY3QodmFsdWUpIHx8XG4gICAgICAgICEhdmFsdWVbJG1vYnhdIHx8XG4gICAgICAgIGlzQXRvbSh2YWx1ZSkgfHxcbiAgICAgICAgaXNSZWFjdGlvbih2YWx1ZSkgfHxcbiAgICAgICAgaXNDb21wdXRlZFZhbHVlKHZhbHVlKVxuICAgIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKF9fREVWX18gJiYgYXJndW1lbnRzLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYGlzT2JzZXJ2YWJsZSBleHBlY3RzIG9ubHkgMSBhcmd1bWVudC4gVXNlIGlzT2JzZXJ2YWJsZVByb3AgdG8gaW5zcGVjdCB0aGUgb2JzZXJ2YWJpbGl0eSBvZiBhIHByb3BlcnR5YFxuICAgICAgICApXG4gICAgcmV0dXJuIF9pc09ic2VydmFibGUodmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVQcm9wKHZhbHVlOiBhbnksIHByb3BOYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgIGlmIChfX0RFVl9fICYmICFpc1N0cmluZ2lzaChwcm9wTmFtZSkpIHJldHVybiBkaWUoYGV4cGVjdGVkIGEgcHJvcGVydHkgbmFtZSBhcyBzZWNvbmQgYXJndW1lbnRgKVxuICAgIHJldHVybiBfaXNPYnNlcnZhYmxlKHZhbHVlLCBwcm9wTmFtZSlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSUlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIE9ic2VydmFibGVNYXAsXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgZW5kQmF0Y2gsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgc3RhcnRCYXRjaCxcbiAgICBkaWVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGtleXM8Sz4obWFwOiBPYnNlcnZhYmxlTWFwPEssIGFueT4pOiBSZWFkb25seUFycmF5PEs+XG5leHBvcnQgZnVuY3Rpb24ga2V5czxUPihhcjogSU9ic2VydmFibGVBcnJheTxUPik6IFJlYWRvbmx5QXJyYXk8bnVtYmVyPlxuZXhwb3J0IGZ1bmN0aW9uIGtleXM8VD4oc2V0OiBPYnNlcnZhYmxlU2V0PFQ+KTogUmVhZG9ubHlBcnJheTxUPlxuZXhwb3J0IGZ1bmN0aW9uIGtleXM8VCBleHRlbmRzIE9iamVjdD4ob2JqOiBUKTogUmVhZG9ubHlBcnJheTxQcm9wZXJ0eUtleT5cbmV4cG9ydCBmdW5jdGlvbiBrZXlzKG9iajogYW55KTogYW55IHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuICgoKG9iaiBhcyBhbnkpIGFzIElJc09ic2VydmFibGVPYmplY3QpW1xuICAgICAgICAgICAgJG1vYnhcbiAgICAgICAgXSBhcyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24pLmtleXNfKClcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopIHx8IGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG9iai5rZXlzKCkpXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmoubWFwKChfLCBpbmRleCkgPT4gaW5kZXgpXG4gICAgfVxuICAgIGRpZSg1KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzPEssIFQ+KG1hcDogT2JzZXJ2YWJsZU1hcDxLLCBUPik6IFJlYWRvbmx5QXJyYXk8VD5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXM8VD4oc2V0OiBPYnNlcnZhYmxlU2V0PFQ+KTogUmVhZG9ubHlBcnJheTxUPlxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlczxUPihhcjogSU9ic2VydmFibGVBcnJheTxUPik6IFJlYWRvbmx5QXJyYXk8VD5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXM8VCA9IGFueT4ob2JqOiBUKTogUmVhZG9ubHlBcnJheTxUIGV4dGVuZHMgb2JqZWN0ID8gVFtrZXlvZiBUXSA6IGFueT5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXMob2JqOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGtleSA9PiBvYmpba2V5XSlcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGtleSA9PiBvYmouZ2V0KGtleSkpXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShvYmoudmFsdWVzKCkpXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmouc2xpY2UoKVxuICAgIH1cbiAgICBkaWUoNilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVudHJpZXM8SywgVD4obWFwOiBPYnNlcnZhYmxlTWFwPEssIFQ+KTogUmVhZG9ubHlBcnJheTxbSywgVF0+XG5leHBvcnQgZnVuY3Rpb24gZW50cmllczxUPihzZXQ6IE9ic2VydmFibGVTZXQ8VD4pOiBSZWFkb25seUFycmF5PFtULCBUXT5cbmV4cG9ydCBmdW5jdGlvbiBlbnRyaWVzPFQ+KGFyOiBJT2JzZXJ2YWJsZUFycmF5PFQ+KTogUmVhZG9ubHlBcnJheTxbbnVtYmVyLCBUXT5cbmV4cG9ydCBmdW5jdGlvbiBlbnRyaWVzPFQgPSBhbnk+KFxuICAgIG9iajogVFxuKTogUmVhZG9ubHlBcnJheTxbc3RyaW5nLCBUIGV4dGVuZHMgb2JqZWN0ID8gVFtrZXlvZiBUXSA6IGFueV0+XG5leHBvcnQgZnVuY3Rpb24gZW50cmllcyhvYmo6IGFueSk6IGFueSB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBrZXlzKG9iaikubWFwKGtleSA9PiBba2V5LCBvYmpba2V5XV0pXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xuICAgICAgICByZXR1cm4ga2V5cyhvYmopLm1hcChrZXkgPT4gW2tleSwgb2JqLmdldChrZXkpXSlcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG9iai5lbnRyaWVzKCkpXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmoubWFwKChrZXksIGluZGV4KSA9PiBbaW5kZXgsIGtleV0pXG4gICAgfVxuICAgIGRpZSg3KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0PFY+KG9iajogT2JzZXJ2YWJsZU1hcDxQcm9wZXJ0eUtleSwgVj4sIHZhbHVlczogeyBba2V5OiBzdHJpbmddOiBWIH0pXG5leHBvcnQgZnVuY3Rpb24gc2V0PEssIFY+KG9iajogT2JzZXJ2YWJsZU1hcDxLLCBWPiwga2V5OiBLLCB2YWx1ZTogVilcbmV4cG9ydCBmdW5jdGlvbiBzZXQ8VD4ob2JqOiBPYnNlcnZhYmxlU2V0PFQ+LCB2YWx1ZTogVClcbmV4cG9ydCBmdW5jdGlvbiBzZXQ8VD4ob2JqOiBJT2JzZXJ2YWJsZUFycmF5PFQ+LCBpbmRleDogbnVtYmVyLCB2YWx1ZTogVClcbmV4cG9ydCBmdW5jdGlvbiBzZXQ8VCBleHRlbmRzIE9iamVjdD4ob2JqOiBULCB2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pXG5leHBvcnQgZnVuY3Rpb24gc2V0PFQgZXh0ZW5kcyBPYmplY3Q+KG9iajogVCwga2V5OiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSlcbmV4cG9ydCBmdW5jdGlvbiBzZXQob2JqOiBhbnksIGtleTogYW55LCB2YWx1ZT86IGFueSk6IHZvaWQge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmICFpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICBzdGFydEJhdGNoKClcbiAgICAgICAgY29uc3QgdmFsdWVzID0ga2V5XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gdmFsdWVzKSBzZXQob2JqLCBrZXksIHZhbHVlc1trZXldKVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KG9iaikpIHtcbiAgICAgICAgOygob2JqIGFzIGFueSkgYXMgSUlzT2JzZXJ2YWJsZU9iamVjdClbJG1vYnhdLnNldF8oa2V5LCB2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIG9iai5zZXQoa2V5LCB2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIG9iai5hZGQoa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJudW1iZXJcIikga2V5ID0gcGFyc2VJbnQoa2V5LCAxMClcbiAgICAgICAgaWYgKGtleSA8IDApIGRpZShgSW52YWxpZCBpbmRleDogJyR7a2V5fSdgKVxuICAgICAgICBzdGFydEJhdGNoKClcbiAgICAgICAgaWYgKGtleSA+PSBvYmoubGVuZ3RoKSBvYmoubGVuZ3RoID0ga2V5ICsgMVxuICAgICAgICBvYmpba2V5XSA9IHZhbHVlXG4gICAgICAgIGVuZEJhdGNoKClcbiAgICB9IGVsc2UgZGllKDgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8SywgVj4ob2JqOiBPYnNlcnZhYmxlTWFwPEssIFY+LCBrZXk6IEspXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQ+KG9iajogT2JzZXJ2YWJsZVNldDxUPiwga2V5OiBUKVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZTxUPihvYmo6IElPYnNlcnZhYmxlQXJyYXk8VD4sIGluZGV4OiBudW1iZXIpXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQgZXh0ZW5kcyBPYmplY3Q+KG9iajogVCwga2V5OiBzdHJpbmcpXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKG9iajogYW55LCBrZXk6IGFueSk6IHZvaWQge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICA7KChvYmogYXMgYW55KSBhcyBJSXNPYnNlcnZhYmxlT2JqZWN0KVskbW9ieF0uZGVsZXRlXyhrZXkpXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xuICAgICAgICBvYmouZGVsZXRlKGtleSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZVNldChvYmopKSB7XG4gICAgICAgIG9iai5kZWxldGUoa2V5KVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJudW1iZXJcIikga2V5ID0gcGFyc2VJbnQoa2V5LCAxMClcbiAgICAgICAgb2JqLnNwbGljZShrZXksIDEpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGllKDkpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzPEs+KG9iajogT2JzZXJ2YWJsZU1hcDxLLCBhbnk+LCBrZXk6IEspOiBib29sZWFuXG5leHBvcnQgZnVuY3Rpb24gaGFzPFQ+KG9iajogT2JzZXJ2YWJsZVNldDxUPiwga2V5OiBUKTogYm9vbGVhblxuZXhwb3J0IGZ1bmN0aW9uIGhhczxUPihvYmo6IElPYnNlcnZhYmxlQXJyYXk8VD4sIGluZGV4OiBudW1iZXIpOiBib29sZWFuXG5leHBvcnQgZnVuY3Rpb24gaGFzPFQgZXh0ZW5kcyBPYmplY3Q+KG9iajogVCwga2V5OiBzdHJpbmcpOiBib29sZWFuXG5leHBvcnQgZnVuY3Rpb24gaGFzKG9iajogYW55LCBrZXk6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChpc09ic2VydmFibGVPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gKChvYmogYXMgYW55KSBhcyBJSXNPYnNlcnZhYmxlT2JqZWN0KVskbW9ieF0uaGFzXyhrZXkpXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVNYXAob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLmhhcyhrZXkpXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLmhhcyhrZXkpXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVBcnJheShvYmopKSB7XG4gICAgICAgIHJldHVybiBrZXkgPj0gMCAmJiBrZXkgPCBvYmoubGVuZ3RoXG4gICAgfVxuICAgIGRpZSgxMClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldDxLLCBWPihvYmo6IE9ic2VydmFibGVNYXA8SywgVj4sIGtleTogSyk6IFYgfCB1bmRlZmluZWRcbmV4cG9ydCBmdW5jdGlvbiBnZXQ8VD4ob2JqOiBJT2JzZXJ2YWJsZUFycmF5PFQ+LCBpbmRleDogbnVtYmVyKTogVCB8IHVuZGVmaW5lZFxuZXhwb3J0IGZ1bmN0aW9uIGdldDxUIGV4dGVuZHMgT2JqZWN0PihvYmo6IFQsIGtleTogc3RyaW5nKTogYW55XG5leHBvcnQgZnVuY3Rpb24gZ2V0KG9iajogYW55LCBrZXk6IGFueSk6IGFueSB7XG4gICAgaWYgKCFoYXMob2JqLCBrZXkpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiAoKG9iaiBhcyBhbnkpIGFzIElJc09ic2VydmFibGVPYmplY3QpWyRtb2J4XS5nZXRfKGtleSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU1hcChvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmouZ2V0KGtleSlcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrZXldXG4gICAgfVxuICAgIGRpZSgxMSlcbn1cbiIsImltcG9ydCB7XG4gICAgSUFycmF5RGlkQ2hhbmdlLFxuICAgIElDb21wdXRlZFZhbHVlLFxuICAgIElNYXBEaWRDaGFuZ2UsXG4gICAgSU9iamVjdERpZENoYW5nZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIElPYnNlcnZhYmxlVmFsdWUsXG4gICAgSVZhbHVlRGlkQ2hhbmdlLFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEFkbWluaXN0cmF0aW9uLFxuICAgIE9ic2VydmFibGVTZXQsXG4gICAgSVNldERpZENoYW5nZSxcbiAgICBpc0Z1bmN0aW9uXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlPFQ+KFxuICAgIHZhbHVlOiBJT2JzZXJ2YWJsZVZhbHVlPFQ+IHwgSUNvbXB1dGVkVmFsdWU8VD4sXG4gICAgbGlzdGVuZXI6IChjaGFuZ2U6IElWYWx1ZURpZENoYW5nZTxUPikgPT4gdm9pZCxcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlPFQ+KFxuICAgIG9ic2VydmFibGVBcnJheTogSU9ic2VydmFibGVBcnJheTxUPixcbiAgICBsaXN0ZW5lcjogKGNoYW5nZTogSUFycmF5RGlkQ2hhbmdlPFQ+KSA9PiB2b2lkLFxuICAgIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW5cbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmU8Vj4oXG4gICAgb2JzZXJ2YWJsZU1hcDogT2JzZXJ2YWJsZVNldDxWPixcbiAgICBsaXN0ZW5lcjogKGNoYW5nZTogSVNldERpZENoYW5nZTxWPikgPT4gdm9pZCxcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlPEssIFY+KFxuICAgIG9ic2VydmFibGVNYXA6IE9ic2VydmFibGVNYXA8SywgVj4sXG4gICAgbGlzdGVuZXI6IChjaGFuZ2U6IElNYXBEaWRDaGFuZ2U8SywgVj4pID0+IHZvaWQsXG4gICAgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhblxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZTxLLCBWPihcbiAgICBvYnNlcnZhYmxlTWFwOiBPYnNlcnZhYmxlTWFwPEssIFY+LFxuICAgIHByb3BlcnR5OiBLLFxuICAgIGxpc3RlbmVyOiAoY2hhbmdlOiBJVmFsdWVEaWRDaGFuZ2U8Vj4pID0+IHZvaWQsXG4gICAgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhblxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZShcbiAgICBvYmplY3Q6IE9iamVjdCxcbiAgICBsaXN0ZW5lcjogKGNoYW5nZTogSU9iamVjdERpZENoYW5nZSkgPT4gdm9pZCxcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBvYmplY3Q6IFQsXG4gICAgcHJvcGVydHk6IEssXG4gICAgbGlzdGVuZXI6IChjaGFuZ2U6IElWYWx1ZURpZENoYW5nZTxUW0tdPikgPT4gdm9pZCxcbiAgICBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuXG4pOiBMYW1iZGFcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlKHRoaW5nLCBwcm9wT3JDYj8sIGNiT3JGaXJlPywgZmlyZUltbWVkaWF0ZWx5Pyk6IExhbWJkYSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY2JPckZpcmUpKVxuICAgICAgICByZXR1cm4gb2JzZXJ2ZU9ic2VydmFibGVQcm9wZXJ0eSh0aGluZywgcHJvcE9yQ2IsIGNiT3JGaXJlLCBmaXJlSW1tZWRpYXRlbHkpXG4gICAgZWxzZSByZXR1cm4gb2JzZXJ2ZU9ic2VydmFibGUodGhpbmcsIHByb3BPckNiLCBjYk9yRmlyZSlcbn1cblxuZnVuY3Rpb24gb2JzZXJ2ZU9ic2VydmFibGUodGhpbmcsIGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHk6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gZ2V0QWRtaW5pc3RyYXRpb24odGhpbmcpLm9ic2VydmVfKGxpc3RlbmVyLCBmaXJlSW1tZWRpYXRlbHkpXG59XG5cbmZ1bmN0aW9uIG9ic2VydmVPYnNlcnZhYmxlUHJvcGVydHkodGhpbmcsIHByb3BlcnR5LCBsaXN0ZW5lciwgZmlyZUltbWVkaWF0ZWx5OiBib29sZWFuKSB7XG4gICAgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nLCBwcm9wZXJ0eSkub2JzZXJ2ZV8obGlzdGVuZXIsIGZpcmVJbW1lZGlhdGVseSlcbn1cbiIsImltcG9ydCB7XG4gICAga2V5cyxcbiAgICBpc09ic2VydmFibGUsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlVmFsdWUsXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBnZXRQbGFpbk9iamVjdEtleXMsXG4gICAgZGllXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmZ1bmN0aW9uIGNhY2hlPEssIFY+KG1hcDogTWFwPGFueSwgYW55Piwga2V5OiBLLCB2YWx1ZTogVik6IFYge1xuICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSlcbiAgICByZXR1cm4gdmFsdWVcbn1cblxuZnVuY3Rpb24gdG9KU0hlbHBlcihzb3VyY2UsIF9fYWxyZWFkeVNlZW46IE1hcDxhbnksIGFueT4pIHtcbiAgICBpZiAoXG4gICAgICAgIHNvdXJjZSA9PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBzb3VyY2UgIT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgc291cmNlIGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAhaXNPYnNlcnZhYmxlKHNvdXJjZSlcbiAgICApXG4gICAgICAgIHJldHVybiBzb3VyY2VcblxuICAgIGlmIChpc09ic2VydmFibGVWYWx1ZShzb3VyY2UpKSByZXR1cm4gdG9KU0hlbHBlcihzb3VyY2UuZ2V0KCksIF9fYWxyZWFkeVNlZW4pXG4gICAgaWYgKF9fYWxyZWFkeVNlZW4uaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIF9fYWxyZWFkeVNlZW4uZ2V0KHNvdXJjZSlcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZUFycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgY29uc3QgcmVzID0gY2FjaGUoX19hbHJlYWR5U2Vlbiwgc291cmNlLCBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCkpXG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKCh2YWx1ZSwgaWR4KSA9PiB7XG4gICAgICAgICAgICByZXNbaWR4XSA9IHRvSlNIZWxwZXIodmFsdWUsIF9fYWxyZWFkeVNlZW4pXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9XG4gICAgaWYgKGlzT2JzZXJ2YWJsZVNldChzb3VyY2UpKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGNhY2hlKF9fYWxyZWFkeVNlZW4sIHNvdXJjZSwgbmV3IFNldCgpKVxuICAgICAgICBzb3VyY2UuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICByZXMuYWRkKHRvSlNIZWxwZXIodmFsdWUsIF9fYWxyZWFkeVNlZW4pKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVNYXAoc291cmNlKSkge1xuICAgICAgICBjb25zdCByZXMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIG5ldyBNYXAoKSlcbiAgICAgICAgc291cmNlLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHJlcy5zZXQoa2V5LCB0b0pTSGVscGVyKHZhbHVlLCBfX2FscmVhZHlTZWVuKSlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG11c3QgYmUgb2JzZXJ2YWJsZSBvYmplY3RcbiAgICAgICAga2V5cyhzb3VyY2UpIC8vIG1ha2Ugc3VyZSBrZXlzIGFyZSBvYnNlcnZlZFxuICAgICAgICBjb25zdCByZXMgPSBjYWNoZShfX2FscmVhZHlTZWVuLCBzb3VyY2UsIHt9KVxuICAgICAgICBnZXRQbGFpbk9iamVjdEtleXMoc291cmNlKS5mb3JFYWNoKChrZXk6IGFueSkgPT4ge1xuICAgICAgICAgICAgcmVzW2tleV0gPSB0b0pTSGVscGVyKHNvdXJjZVtrZXldLCBfX2FscmVhZHlTZWVuKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgfVxufVxuXG4vKipcbiAqIEJhc2ljYWxseSwgYSBkZWVwIGNsb25lLCBzbyB0aGF0IG5vIHJlYWN0aXZlIHByb3BlcnR5IHdpbGwgZXhpc3QgYW55bW9yZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSlM8VD4oc291cmNlOiBULCBvcHRpb25zPzogYW55KTogVCB7XG4gICAgaWYgKF9fREVWX18gJiYgb3B0aW9ucykgZGllKFwidG9KUyBubyBsb25nZXIgc3VwcG9ydHMgb3B0aW9uc1wiKVxuICAgIHJldHVybiB0b0pTSGVscGVyKHNvdXJjZSwgbmV3IE1hcCgpKVxufVxuIiwiaW1wb3J0IHsgVHJhY2VNb2RlLCBkaWUsIGdldEF0b20sIGdsb2JhbFN0YXRlIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNlKHRoaW5nPzogYW55LCBwcm9wPzogc3RyaW5nLCBlbnRlckJyZWFrUG9pbnQ/OiBib29sZWFuKTogdm9pZFxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNlKHRoaW5nPzogYW55LCBlbnRlckJyZWFrUG9pbnQ/OiBib29sZWFuKTogdm9pZFxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNlKGVudGVyQnJlYWtQb2ludD86IGJvb2xlYW4pOiB2b2lkXG5leHBvcnQgZnVuY3Rpb24gdHJhY2UoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAoIV9fREVWX18pIGRpZShgdHJhY2UoKSBpcyBub3QgYXZhaWxhYmxlIGluIHByb2R1Y3Rpb24gYnVpbGRzYClcbiAgICBsZXQgZW50ZXJCcmVha1BvaW50ID0gZmFsc2VcbiAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gXCJib29sZWFuXCIpIGVudGVyQnJlYWtQb2ludCA9IGFyZ3MucG9wKClcbiAgICBjb25zdCBkZXJpdmF0aW9uID0gZ2V0QXRvbUZyb21BcmdzKGFyZ3MpXG4gICAgaWYgKCFkZXJpdmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBkaWUoXG4gICAgICAgICAgICBgJ3RyYWNlKGJyZWFrPyknIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIGEgdHJhY2tlZCBjb21wdXRlZCB2YWx1ZSBvciBhIFJlYWN0aW9uLiBDb25zaWRlciBwYXNzaW5nIGluIHRoZSBjb21wdXRlZCB2YWx1ZSBvciByZWFjdGlvbiBleHBsaWNpdGx5YFxuICAgICAgICApXG4gICAgfVxuICAgIGlmIChkZXJpdmF0aW9uLmlzVHJhY2luZ18gPT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbbW9ieC50cmFjZV0gJyR7ZGVyaXZhdGlvbi5uYW1lX30nIHRyYWNpbmcgZW5hYmxlZGApXG4gICAgfVxuICAgIGRlcml2YXRpb24uaXNUcmFjaW5nXyA9IGVudGVyQnJlYWtQb2ludCA/IFRyYWNlTW9kZS5CUkVBSyA6IFRyYWNlTW9kZS5MT0dcbn1cblxuZnVuY3Rpb24gZ2V0QXRvbUZyb21BcmdzKGFyZ3MpOiBhbnkge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvblxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXRvbShhcmdzWzBdKVxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXRvbShhcmdzWzBdLCBhcmdzWzFdKVxuICAgIH1cbn1cbiIsImltcG9ydCB7IGVuZEJhdGNoLCBzdGFydEJhdGNoIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLyoqXG4gKiBEdXJpbmcgYSB0cmFuc2FjdGlvbiBubyB2aWV3cyBhcmUgdXBkYXRlZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAqIFRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHJ1biBzeW5jaHJvbm91c2x5IG5vbmV0aGVsZXNzLlxuICpcbiAqIEBwYXJhbSBhY3Rpb24gYSBmdW5jdGlvbiB0aGF0IHVwZGF0ZXMgc29tZSByZWFjdGl2ZSBzdGF0ZVxuICogQHJldHVybnMgYW55IHZhbHVlIHRoYXQgd2FzIHJldHVybmVkIGJ5IHRoZSAnYWN0aW9uJyBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2FjdGlvbjxUPihhY3Rpb246ICgpID0+IFQsIHRoaXNBcmcgPSB1bmRlZmluZWQpOiBUIHtcbiAgICBzdGFydEJhdGNoKClcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmFwcGx5KHRoaXNBcmcpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSVJlYWN0aW9uRGlzcG9zZXIsXG4gICAgTGFtYmRhLFxuICAgIGF1dG9ydW4sXG4gICAgY3JlYXRlQWN0aW9uLFxuICAgIGdldE5leHRJZCxcbiAgICBkaWUsXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXNcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJV2hlbk9wdGlvbnMge1xuICAgIG5hbWU/OiBzdHJpbmdcbiAgICB0aW1lb3V0PzogbnVtYmVyXG4gICAgb25FcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuKFxuICAgIHByZWRpY2F0ZTogKCkgPT4gYm9vbGVhbixcbiAgICBvcHRzPzogSVdoZW5PcHRpb25zXG4pOiBQcm9taXNlPHZvaWQ+ICYgeyBjYW5jZWwoKTogdm9pZCB9XG5leHBvcnQgZnVuY3Rpb24gd2hlbihcbiAgICBwcmVkaWNhdGU6ICgpID0+IGJvb2xlYW4sXG4gICAgZWZmZWN0OiBMYW1iZGEsXG4gICAgb3B0cz86IElXaGVuT3B0aW9uc1xuKTogSVJlYWN0aW9uRGlzcG9zZXJcbmV4cG9ydCBmdW5jdGlvbiB3aGVuKHByZWRpY2F0ZTogYW55LCBhcmcxPzogYW55LCBhcmcyPzogYW55KTogYW55IHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSB8fCAoYXJnMSAmJiB0eXBlb2YgYXJnMSA9PT0gXCJvYmplY3RcIikpXG4gICAgICAgIHJldHVybiB3aGVuUHJvbWlzZShwcmVkaWNhdGUsIGFyZzEpXG4gICAgcmV0dXJuIF93aGVuKHByZWRpY2F0ZSwgYXJnMSwgYXJnMiB8fCB7fSlcbn1cblxuZnVuY3Rpb24gX3doZW4ocHJlZGljYXRlOiAoKSA9PiBib29sZWFuLCBlZmZlY3Q6IExhbWJkYSwgb3B0czogSVdoZW5PcHRpb25zKTogSVJlYWN0aW9uRGlzcG9zZXIge1xuICAgIGxldCB0aW1lb3V0SGFuZGxlOiBhbnlcbiAgICBpZiAodHlwZW9mIG9wdHMudGltZW91dCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRpc3Bvc2VyWyRtb2J4XS5pc0Rpc3Bvc2VkXykge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2VyKClcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIldIRU5fVElNRU9VVFwiKVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLm9uRXJyb3IpIG9wdHMub25FcnJvcihlcnJvcilcbiAgICAgICAgICAgICAgICBlbHNlIHRocm93IGVycm9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdHMudGltZW91dClcbiAgICB9XG5cbiAgICBvcHRzLm5hbWUgPSBfX0RFVl9fID8gb3B0cy5uYW1lIHx8IFwiV2hlbkBcIiArIGdldE5leHRJZCgpIDogXCJXaGVuXCJcbiAgICBjb25zdCBlZmZlY3RBY3Rpb24gPSBjcmVhdGVBY3Rpb24oXG4gICAgICAgIF9fREVWX18gPyBvcHRzLm5hbWUgKyBcIi1lZmZlY3RcIiA6IFwiV2hlbi1lZmZlY3RcIixcbiAgICAgICAgZWZmZWN0IGFzIEZ1bmN0aW9uXG4gICAgKVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHZhciBkaXNwb3NlciA9IGF1dG9ydW4ociA9PiB7XG4gICAgICAgIC8vIHByZWRpY2F0ZSBzaG91bGQgbm90IGNoYW5nZSBzdGF0ZVxuICAgICAgICBsZXQgY29uZCA9IGFsbG93U3RhdGVDaGFuZ2VzKGZhbHNlLCBwcmVkaWNhdGUpXG4gICAgICAgIGlmIChjb25kKSB7XG4gICAgICAgICAgICByLmRpc3Bvc2UoKVxuICAgICAgICAgICAgaWYgKHRpbWVvdXRIYW5kbGUpIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKVxuICAgICAgICAgICAgZWZmZWN0QWN0aW9uKClcbiAgICAgICAgfVxuICAgIH0sIG9wdHMpXG4gICAgcmV0dXJuIGRpc3Bvc2VyXG59XG5cbmZ1bmN0aW9uIHdoZW5Qcm9taXNlKFxuICAgIHByZWRpY2F0ZTogKCkgPT4gYm9vbGVhbixcbiAgICBvcHRzPzogSVdoZW5PcHRpb25zXG4pOiBQcm9taXNlPHZvaWQ+ICYgeyBjYW5jZWwoKTogdm9pZCB9IHtcbiAgICBpZiAoX19ERVZfXyAmJiBvcHRzICYmIG9wdHMub25FcnJvcilcbiAgICAgICAgcmV0dXJuIGRpZShgdGhlIG9wdGlvbnMgJ29uRXJyb3InIGFuZCAncHJvbWlzZScgY2Fubm90IGJlIGNvbWJpbmVkYClcbiAgICBsZXQgY2FuY2VsXG4gICAgY29uc3QgcmVzID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgZGlzcG9zZXIgPSBfd2hlbihwcmVkaWNhdGUsIHJlc29sdmUsIHsgLi4ub3B0cywgb25FcnJvcjogcmVqZWN0IH0pXG4gICAgICAgIGNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgICAgIGRpc3Bvc2VyKClcbiAgICAgICAgICAgIHJlamVjdChcIldIRU5fQ0FOQ0VMTEVEXCIpXG4gICAgICAgIH1cbiAgICB9KVxuICAgIDsocmVzIGFzIGFueSkuY2FuY2VsID0gY2FuY2VsXG4gICAgcmV0dXJuIHJlcyBhcyBhbnlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSUlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudCxcbiAgICBhc3NlcnRQcm94aWVzLFxuICAgIGRpZSxcbiAgICBpc1N0cmluZ2lzaCxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyxcbiAgICBhc09ic2VydmFibGVPYmplY3Rcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZnVuY3Rpb24gZ2V0QWRtKHRhcmdldCk6IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiB7XG4gICAgcmV0dXJuIHRhcmdldFskbW9ieF1cbn1cblxuLy8gT3B0aW1pemF0aW9uOiB3ZSBkb24ndCBuZWVkIHRoZSBpbnRlcm1lZGlhdGUgb2JqZWN0cyBhbmQgY291bGQgaGF2ZSBhIGNvbXBsZXRlbHkgY3VzdG9tIGFkbWluaXN0cmF0aW9uIGZvciBEeW5hbWljT2JqZWN0cyxcbi8vIGFuZCBza2lwIGVpdGhlciB0aGUgaW50ZXJuYWwgdmFsdWVzIG1hcCwgb3IgdGhlIGJhc2Ugb2JqZWN0IHdpdGggaXRzIHByb3BlcnR5IGRlc2NyaXB0b3JzIVxuY29uc3Qgb2JqZWN0UHJveHlUcmFwczogUHJveHlIYW5kbGVyPGFueT4gPSB7XG4gICAgaGFzKHRhcmdldDogSUlzT2JzZXJ2YWJsZU9iamVjdCwgbmFtZTogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKVxuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcImRldGVjdCBuZXcgcHJvcGVydGllcyB1c2luZyB0aGUgJ2luJyBvcGVyYXRvci4gVXNlICdoYXMnIGZyb20gJ21vYngnIGluc3RlYWQuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLmhhc18obmFtZSlcbiAgICB9LFxuICAgIGdldCh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5KTogYW55IHtcbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLmdldF8obmFtZSlcbiAgICB9LFxuICAgIHNldCh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghaXNTdHJpbmdpc2gobmFtZSkpIHJldHVybiBmYWxzZVxuICAgICAgICBpZiAoX19ERVZfXyAmJiAhZ2V0QWRtKHRhcmdldCkudmFsdWVzXy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgIHdhcm5BYm91dFByb3h5UmVxdWlyZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJhZGQgYSBuZXcgb2JzZXJ2YWJsZSBwcm9wZXJ0eSB0aHJvdWdoIGRpcmVjdCBhc3NpZ25tZW50LiBVc2UgJ3NldCcgZnJvbSAnbW9ieCcgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIC8vIG51bGwgKGludGVyY2VwdGVkKSAtPiB0cnVlIChzdWNjZXNzKVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkuc2V0XyhuYW1lLCB2YWx1ZSwgdHJ1ZSkgPz8gdHJ1ZVxuICAgIH0sXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0LCBuYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcImRlbGV0ZSBwcm9wZXJ0aWVzIGZyb20gYW4gb2JzZXJ2YWJsZSBvYmplY3QuIFVzZSAncmVtb3ZlJyBmcm9tICdtb2J4JyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1N0cmluZ2lzaChuYW1lKSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIC8vIG51bGwgKGludGVyY2VwdGVkKSAtPiB0cnVlIChzdWNjZXNzKVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkuZGVsZXRlXyhuYW1lLCB0cnVlKSA/PyB0cnVlXG4gICAgfSxcbiAgICBkZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgdGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgICAgICBuYW1lOiBQcm9wZXJ0eUtleSxcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICB3YXJuQWJvdXRQcm94eVJlcXVpcmVtZW50KFxuICAgICAgICAgICAgICAgIFwiZGVmaW5lIHByb3BlcnR5IG9uIGFuIG9ic2VydmFibGUgb2JqZWN0LiBVc2UgJ2RlZmluZVByb3BlcnR5JyBmcm9tICdtb2J4JyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgLy8gbnVsbCAoaW50ZXJjZXB0ZWQpIC0+IHRydWUgKHN1Y2Nlc3MpXG4gICAgICAgIHJldHVybiBnZXRBZG0odGFyZ2V0KS5kZWZpbmVQcm9wZXJ0eV8obmFtZSwgZGVzY3JpcHRvcikgPz8gdHJ1ZVxuICAgIH0sXG4gICAgb3duS2V5cyh0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QpOiBQcm9wZXJ0eUtleVtdIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKVxuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcIml0ZXJhdGUga2V5cyB0byBkZXRlY3QgYWRkZWQgLyByZW1vdmVkIHByb3BlcnRpZXMuIFVzZSBga2V5c2AgZnJvbSAnbW9ieCcgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkub3duS2V5c18oKVxuICAgIH0sXG4gICAgcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgICAgIGRpZSgxMylcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc0R5bmFtaWNPYnNlcnZhYmxlT2JqZWN0KFxuICAgIHRhcmdldDogYW55LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgYXNzZXJ0UHJveGllcygpXG4gICAgdGFyZ2V0ID0gYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucylcbiAgICByZXR1cm4gKHRhcmdldFskbW9ieF0ucHJveHlfID8/PSBuZXcgUHJveHkodGFyZ2V0LCBvYmplY3RQcm94eVRyYXBzKSlcbn1cbiIsImltcG9ydCB7IExhbWJkYSwgb25jZSwgdW50cmFja2VkRW5kLCB1bnRyYWNrZWRTdGFydCwgZGllIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IHR5cGUgSUludGVyY2VwdG9yPFQ+ID0gKGNoYW5nZTogVCkgPT4gVCB8IG51bGxcblxuZXhwb3J0IGludGVyZmFjZSBJSW50ZXJjZXB0YWJsZTxUPiB7XG4gICAgaW50ZXJjZXB0b3JzXzogSUludGVyY2VwdG9yPFQ+W10gfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ludGVyY2VwdG9ycyhpbnRlcmNlcHRhYmxlOiBJSW50ZXJjZXB0YWJsZTxhbnk+KSB7XG4gICAgcmV0dXJuIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyAhPT0gdW5kZWZpbmVkICYmIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXy5sZW5ndGggPiAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckludGVyY2VwdG9yPFQ+KFxuICAgIGludGVyY2VwdGFibGU6IElJbnRlcmNlcHRhYmxlPFQ+LFxuICAgIGhhbmRsZXI6IElJbnRlcmNlcHRvcjxUPlxuKTogTGFtYmRhIHtcbiAgICBjb25zdCBpbnRlcmNlcHRvcnMgPSBpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9yc18gfHwgKGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyA9IFtdKVxuICAgIGludGVyY2VwdG9ycy5wdXNoKGhhbmRsZXIpXG4gICAgcmV0dXJuIG9uY2UoKCkgPT4ge1xuICAgICAgICBjb25zdCBpZHggPSBpbnRlcmNlcHRvcnMuaW5kZXhPZihoYW5kbGVyKVxuICAgICAgICBpZiAoaWR4ICE9PSAtMSkgaW50ZXJjZXB0b3JzLnNwbGljZShpZHgsIDEpXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyY2VwdENoYW5nZTxUPihcbiAgICBpbnRlcmNlcHRhYmxlOiBJSW50ZXJjZXB0YWJsZTxUIHwgbnVsbD4sXG4gICAgY2hhbmdlOiBUIHwgbnVsbFxuKTogVCB8IG51bGwge1xuICAgIGNvbnN0IHByZXZVID0gdW50cmFja2VkU3RhcnQoKVxuICAgIHRyeSB7XG4gICAgICAgIC8vIEludGVyY2VwdG9yIGNhbiBtb2RpZnkgdGhlIGFycmF5LCBjb3B5IGl0IHRvIGF2b2lkIGNvbmN1cnJlbnQgbW9kaWZpY2F0aW9uLCBzZWUgIzE5NTBcbiAgICAgICAgY29uc3QgaW50ZXJjZXB0b3JzID0gWy4uLihpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9yc18gfHwgW10pXVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGludGVyY2VwdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNoYW5nZSA9IGludGVyY2VwdG9yc1tpXShjaGFuZ2UpXG4gICAgICAgICAgICBpZiAoY2hhbmdlICYmICEoY2hhbmdlIGFzIGFueSkudHlwZSkgZGllKDE0KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYW5nZVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVudHJhY2tlZEVuZChwcmV2VSlcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMYW1iZGEsIG9uY2UsIHVudHJhY2tlZEVuZCwgdW50cmFja2VkU3RhcnQgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0ZW5hYmxlIHtcbiAgICBjaGFuZ2VMaXN0ZW5lcnNfOiBGdW5jdGlvbltdIHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNMaXN0ZW5lcnMobGlzdGVuYWJsZTogSUxpc3RlbmFibGUpIHtcbiAgICByZXR1cm4gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnNfICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnNfLmxlbmd0aCA+IDBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXIobGlzdGVuYWJsZTogSUxpc3RlbmFibGUsIGhhbmRsZXI6IEZ1bmN0aW9uKTogTGFtYmRhIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSBsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVyc18gfHwgKGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzXyA9IFtdKVxuICAgIGxpc3RlbmVycy5wdXNoKGhhbmRsZXIpXG4gICAgcmV0dXJuIG9uY2UoKCkgPT4ge1xuICAgICAgICBjb25zdCBpZHggPSBsaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKVxuICAgICAgICBpZiAoaWR4ICE9PSAtMSkgbGlzdGVuZXJzLnNwbGljZShpZHgsIDEpXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVyczxUPihsaXN0ZW5hYmxlOiBJTGlzdGVuYWJsZSwgY2hhbmdlOiBUKSB7XG4gICAgY29uc3QgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgbGV0IGxpc3RlbmVycyA9IGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzX1xuICAgIGlmICghbGlzdGVuZXJzKSByZXR1cm5cbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oY2hhbmdlKVxuICAgIH1cbiAgICB1bnRyYWNrZWRFbmQocHJldlUpXG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIGFzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBBbm5vdGF0aW9uc01hcCxcbiAgICBlbmRCYXRjaCxcbiAgICBzdGFydEJhdGNoLFxuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnMsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgZGllLFxuICAgIG93bktleXMsXG4gICAgb2JqZWN0UHJvdG90eXBlLFxuICAgIGluZmVycmVkQW5ub3RhdGlvbnNTeW1ib2wsXG4gICAgZXh0ZW5kT2JzZXJ2YWJsZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vLyBIYWNrIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTQ4MjkjaXNzdWVjb21tZW50LTMyMjI2NzA4OVxuLy8gV2UgbmVlZCB0aGlzLCBiZWNhdXNlIG90aGVyd2lzZSwgQWRkaXRpb25hbEtleXMgaXMgZ29pbmcgdG8gYmUgaW5mZXJyZWQgdG8gYmUgYW55XG4vLyBzZXQgb2Ygc3VwZXJmbHVvdXMga2V5cy4gQnV0LCB3ZSByYXRoZXIgd2FudCB0byBnZXQgYSBjb21waWxlIGVycm9yIHVubGVzcyBBZGRpdGlvbmFsS2V5cyBpc1xuLy8gX2V4cGxpY2l0eV8gcGFzc2VkIGFzIGdlbmVyaWMgYXJndW1lbnRcbi8vIEZpeGVzOiBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzIzMjUjaXNzdWVjb21tZW50LTY5MTA3MDAyMlxudHlwZSBOb0luZmVyPFQ+ID0gW1RdW1QgZXh0ZW5kcyBhbnkgPyAwIDogbmV2ZXJdXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlT2JzZXJ2YWJsZTxUIGV4dGVuZHMgb2JqZWN0LCBBZGRpdGlvbmFsS2V5cyBleHRlbmRzIFByb3BlcnR5S2V5ID0gbmV2ZXI+KFxuICAgIHRhcmdldDogVCxcbiAgICBhbm5vdGF0aW9ucz86IEFubm90YXRpb25zTWFwPFQsIE5vSW5mZXI8QWRkaXRpb25hbEtleXM+PixcbiAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbik6IFQge1xuICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uID0gYXNPYnNlcnZhYmxlT2JqZWN0KHRhcmdldCwgb3B0aW9ucylbJG1vYnhdXG4gICAgc3RhcnRCYXRjaCgpXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gRGVmYXVsdCB0byBkZWNvcmF0b3JzXG4gICAgICAgIGFubm90YXRpb25zID8/PSBjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnModGFyZ2V0KVxuXG4gICAgICAgIC8vIEFubm90YXRlXG4gICAgICAgIG93bktleXMoYW5ub3RhdGlvbnMpLmZvckVhY2goa2V5ID0+IGFkbS5tYWtlXyhrZXksIGFubm90YXRpb25zIVtrZXldKSlcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VBdXRvT2JzZXJ2YWJsZTxUIGV4dGVuZHMgb2JqZWN0LCBBZGRpdGlvbmFsS2V5cyBleHRlbmRzIFByb3BlcnR5S2V5ID0gbmV2ZXI+KFxuICAgIHRhcmdldDogVCxcbiAgICBvdmVycmlkZXM/OiBBbm5vdGF0aW9uc01hcDxULCBOb0luZmVyPEFkZGl0aW9uYWxLZXlzPj4sXG4gICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4pOiBUIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiAhaXNQbGFpbk9iamVjdChPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpXG4gICAgICAgICAgICBkaWUoYCdtYWtlQXV0b09ic2VydmFibGUnIGNhbiBvbmx5IGJlIHVzZWQgZm9yIGNsYXNzZXMgdGhhdCBkb24ndCBoYXZlIGEgc3VwZXJjbGFzc2ApXG4gICAgICAgIGlmIChpc09ic2VydmFibGVPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgIGRpZShgbWFrZUF1dG9PYnNlcnZhYmxlIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JqZWN0cyBub3QgYWxyZWFkeSBtYWRlIG9ic2VydmFibGVgKVxuICAgIH1cblxuICAgIC8vIE9wdGltaXphdGlvbiAoYXZvaWRzIHZpc2l0aW5nIHByb3RvcylcbiAgICAvLyBhc3N1bWVzIHRoYXQgYW5ub3RhdGlvbi5tYWtlXy8uZXh0ZW5kXyB3b3JrcyB0aGUgc2FtZSBmb3IgcGxhaW4gb2JqZWN0c1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZE9ic2VydmFibGUodGFyZ2V0LCB0YXJnZXQsIG92ZXJyaWRlcywgb3B0aW9ucylcbiAgICB9XG5cbiAgICBjb25zdCBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiA9IGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQsIG9wdGlvbnMpWyRtb2J4XVxuICAgIHN0YXJ0QmF0Y2goKVxuICAgIHRyeSB7XG4gICAgICAgIC8vIFVzZSBjYWNoZWQgaW5mZXJyZWQgYW5ub3RhdGlvbnMgaWYgYXZhaWxhYmxlIChvbmx5IGluIGNsYXNzZXMpXG4gICAgICAgIGlmICh0YXJnZXRbaW5mZXJyZWRBbm5vdGF0aW9uc1N5bWJvbF0pIHtcbiAgICAgICAgICAgIHRhcmdldFtpbmZlcnJlZEFubm90YXRpb25zU3ltYm9sXS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiBhZG0ubWFrZV8oa2V5LCB2YWx1ZSkpXG4gICAgICAgICAgICAvLyBPdmVycmlkZXMgYXJlIG5vdCBjYWNoZWQsIHVubGVzcyBgdHJ1ZWAsIHNlZSAjMjgzMlxuICAgICAgICAgICAgaWYgKG92ZXJyaWRlcykge1xuICAgICAgICAgICAgICAgIG93bktleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFubm90YXRpb24gPSBvdmVycmlkZXNba2V5XVxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ub3RhdGlvbiAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRtLm1ha2VfKGtleSwgYW5ub3RhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpZ25vcmVLZXlzID0geyBbJG1vYnhdOiAxLCBbaW5mZXJyZWRBbm5vdGF0aW9uc1N5bWJvbF06IDEsIGNvbnN0cnVjdG9yOiAxIH1cbiAgICAgICAgICAgIGNvbnN0IG1ha2UgPSBrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpZ25vcmVLZXlzW2tleV0pIHJldHVyblxuICAgICAgICAgICAgICAgIGlnbm9yZUtleXNba2V5XSA9IDFcbiAgICAgICAgICAgICAgICBhZG0ubWFrZV8oXG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgLy8gbXVzdCBwYXNzIFwidW5kZWZpbmVkXCIgZm9yIHsga2V5OiB1bmRlZmluZWQgfVxuICAgICAgICAgICAgICAgICAgICAhb3ZlcnJpZGVzID8gdHJ1ZSA6IGtleSBpbiBvdmVycmlkZXMgPyBvdmVycmlkZXNba2V5XSA6IHRydWVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IHRhcmdldFxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgb3duS2V5cyhjdXJyZW50KS5mb3JFYWNoKG1ha2UpXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjdXJyZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIEF0b20sXG4gICAgRU1QVFlfQVJSQVksXG4gICAgSUF0b20sXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgYWRkSGlkZGVuRmluYWxQcm9wLFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZ2V0TmV4dElkLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgaW50ZXJjZXB0Q2hhbmdlLFxuICAgIGlzT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kLFxuICAgIGFzc2VydFByb3hpZXMsXG4gICAgcmVzZXJ2ZUFycmF5QnVmZmVyLFxuICAgIGhhc1Byb3AsXG4gICAgZGllLFxuICAgIGdsb2JhbFN0YXRlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmNvbnN0IFNQTElDRSA9IFwic3BsaWNlXCJcbmV4cG9ydCBjb25zdCBVUERBVEUgPSBcInVwZGF0ZVwiXG5leHBvcnQgY29uc3QgTUFYX1NQTElDRV9TSVpFID0gMTAwMDAgLy8gU2VlIGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2lzc3Vlcy84NTlcblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZUFycmF5PFQgPSBhbnk+IGV4dGVuZHMgQXJyYXk8VD4ge1xuICAgIHNwbGljZVdpdGhBcnJheShpbmRleDogbnVtYmVyLCBkZWxldGVDb3VudD86IG51bWJlciwgbmV3SXRlbXM/OiBUW10pOiBUW11cbiAgICBjbGVhcigpOiBUW11cbiAgICByZXBsYWNlKG5ld0l0ZW1zOiBUW10pOiBUW11cbiAgICByZW1vdmUodmFsdWU6IFQpOiBib29sZWFuXG4gICAgdG9KU09OKCk6IFRbXVxufVxuXG5pbnRlcmZhY2UgSUFycmF5QmFzZUNoYW5nZTxUPiB7XG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgb2JzZXJ2YWJsZUtpbmQ6IFwiYXJyYXlcIlxuICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG4gICAgaW5kZXg6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBJQXJyYXlEaWRDaGFuZ2U8VCA9IGFueT4gPSBJQXJyYXlVcGRhdGU8VD4gfCBJQXJyYXlTcGxpY2U8VD5cblxuZXhwb3J0IGludGVyZmFjZSBJQXJyYXlVcGRhdGU8VCA9IGFueT4gZXh0ZW5kcyBJQXJyYXlCYXNlQ2hhbmdlPFQ+IHtcbiAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgbmV3VmFsdWU6IFRcbiAgICBvbGRWYWx1ZTogVFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBcnJheVNwbGljZTxUID0gYW55PiBleHRlbmRzIElBcnJheUJhc2VDaGFuZ2U8VD4ge1xuICAgIHR5cGU6IFwic3BsaWNlXCJcbiAgICBhZGRlZDogVFtdXG4gICAgYWRkZWRDb3VudDogbnVtYmVyXG4gICAgcmVtb3ZlZDogVFtdXG4gICAgcmVtb3ZlZENvdW50OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXJyYXlXaWxsQ2hhbmdlPFQgPSBhbnk+IHtcbiAgICBvYmplY3Q6IElPYnNlcnZhYmxlQXJyYXk8VD5cbiAgICBpbmRleDogbnVtYmVyXG4gICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgIG5ld1ZhbHVlOiBUXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFycmF5V2lsbFNwbGljZTxUID0gYW55PiB7XG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgaW5kZXg6IG51bWJlclxuICAgIHR5cGU6IFwic3BsaWNlXCJcbiAgICBhZGRlZDogVFtdXG4gICAgcmVtb3ZlZENvdW50OiBudW1iZXJcbn1cblxuY29uc3QgYXJyYXlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0YXJnZXRbJG1vYnhdXG4gICAgICAgIGlmIChuYW1lID09PSAkbW9ieCkgcmV0dXJuIGFkbVxuICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikgcmV0dXJuIGFkbS5nZXRBcnJheUxlbmd0aF8oKVxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgJiYgIWlzTmFOKG5hbWUgYXMgYW55KSkge1xuICAgICAgICAgICAgcmV0dXJuIGFkbS5nZXRfKHBhcnNlSW50KG5hbWUpKVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNQcm9wKGFycmF5RXh0ZW5zaW9ucywgbmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheUV4dGVuc2lvbnNbbmFtZV1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0W25hbWVdXG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBuYW1lLCB2YWx1ZSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGFyZ2V0WyRtb2J4XVxuICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgICAgICAgYWRtLnNldEFycmF5TGVuZ3RoXyh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIgfHwgaXNOYU4obmFtZSkpIHtcbiAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBudW1lcmljIHN0cmluZ1xuICAgICAgICAgICAgYWRtLnNldF8ocGFyc2VJbnQobmFtZSksIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcbiAgICBwcmV2ZW50RXh0ZW5zaW9ucygpIHtcbiAgICAgICAgZGllKDE1KVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXG4gICAgaW1wbGVtZW50cyBJSW50ZXJjZXB0YWJsZTxJQXJyYXlXaWxsQ2hhbmdlPGFueT4gfCBJQXJyYXlXaWxsU3BsaWNlPGFueT4+LCBJTGlzdGVuYWJsZSB7XG4gICAgYXRvbV86IElBdG9tXG4gICAgcmVhZG9ubHkgdmFsdWVzXzogYW55W10gPSBbXSAvLyB0aGlzIGlzIHRoZSBwcm9wIHRoYXQgZ2V0cyBwcm94aWVkLCBzbyBjYW4ndCByZXBsYWNlIGl0IVxuICAgIGludGVyY2VwdG9yc19cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgZW5oYW5jZXJfOiAobmV3VjogYW55LCBvbGRWOiBhbnkgfCB1bmRlZmluZWQpID0+IGFueVxuICAgIGRlaGFuY2VyOiBhbnlcbiAgICBwcm94eV8hOiBJT2JzZXJ2YWJsZUFycmF5PGFueT5cbiAgICBsYXN0S25vd25MZW5ndGhfID0gMFxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG5hbWUgPSBfX0RFVl9fID8gXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZUFycmF5XCIsXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8YW55PixcbiAgICAgICAgcHVibGljIG93bmVkXzogYm9vbGVhbixcbiAgICAgICAgcHVibGljIGxlZ2FjeU1vZGVfOiBib29sZWFuXG4gICAgKSB7XG4gICAgICAgIHRoaXMuYXRvbV8gPSBuZXcgQXRvbShuYW1lKVxuICAgICAgICB0aGlzLmVuaGFuY2VyXyA9IChuZXdWLCBvbGRWKSA9PlxuICAgICAgICAgICAgZW5oYW5jZXIobmV3Viwgb2xkViwgX19ERVZfXyA/IG5hbWUgKyBcIlsuLl1cIiA6IFwiT2JzZXJ2YWJsZUFycmF5Wy4uXVwiKVxuICAgIH1cblxuICAgIGRlaGFuY2VWYWx1ZV8odmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBkZWhhbmNlVmFsdWVzXyh2YWx1ZXM6IGFueVtdKTogYW55W10ge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkICYmIHZhbHVlcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAodGhpcy5kZWhhbmNlcikgYXMgYW55XG4gICAgICAgIHJldHVybiB2YWx1ZXNcbiAgICB9XG5cbiAgICBpbnRlcmNlcHRfKGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJQXJyYXlXaWxsQ2hhbmdlPGFueT4gfCBJQXJyYXlXaWxsU3BsaWNlPGFueT4+KTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3I8SUFycmF5V2lsbENoYW5nZTxhbnk+IHwgSUFycmF5V2lsbFNwbGljZTxhbnk+Pih0aGlzLCBoYW5kbGVyKVxuICAgIH1cblxuICAgIG9ic2VydmVfKFxuICAgICAgICBsaXN0ZW5lcjogKGNoYW5nZURhdGE6IElBcnJheURpZENoYW5nZTxhbnk+KSA9PiB2b2lkLFxuICAgICAgICBmaXJlSW1tZWRpYXRlbHkgPSBmYWxzZVxuICAgICk6IExhbWJkYSB7XG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKDxJQXJyYXlTcGxpY2U8YW55Pj57XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIGFzIGFueSxcbiAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMuYXRvbV8ubmFtZV8sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGxpY2VcIixcbiAgICAgICAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICAgICAgICBhZGRlZDogdGhpcy52YWx1ZXNfLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgYWRkZWRDb3VudDogdGhpcy52YWx1ZXNfLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgICAgICAgICByZW1vdmVkQ291bnQ6IDBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgZ2V0QXJyYXlMZW5ndGhfKCk6IG51bWJlciB7XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNfLmxlbmd0aFxuICAgIH1cblxuICAgIHNldEFycmF5TGVuZ3RoXyhuZXdMZW5ndGg6IG51bWJlcikge1xuICAgICAgICBpZiAodHlwZW9mIG5ld0xlbmd0aCAhPT0gXCJudW1iZXJcIiB8fCBuZXdMZW5ndGggPCAwKSBkaWUoXCJPdXQgb2YgcmFuZ2U6IFwiICsgbmV3TGVuZ3RoKVxuICAgICAgICBsZXQgY3VycmVudExlbmd0aCA9IHRoaXMudmFsdWVzXy5sZW5ndGhcbiAgICAgICAgaWYgKG5ld0xlbmd0aCA9PT0gY3VycmVudExlbmd0aCkgcmV0dXJuXG4gICAgICAgIGVsc2UgaWYgKG5ld0xlbmd0aCA+IGN1cnJlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW1zID0gbmV3IEFycmF5KG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGgpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0xlbmd0aCAtIGN1cnJlbnRMZW5ndGg7IGkrKykgbmV3SXRlbXNbaV0gPSB1bmRlZmluZWQgLy8gTm8gQXJyYXkuZmlsbCBldmVyeXdoZXJlLi4uXG4gICAgICAgICAgICB0aGlzLnNwbGljZVdpdGhBcnJheV8oY3VycmVudExlbmd0aCwgMCwgbmV3SXRlbXMpXG4gICAgICAgIH0gZWxzZSB0aGlzLnNwbGljZVdpdGhBcnJheV8obmV3TGVuZ3RoLCBjdXJyZW50TGVuZ3RoIC0gbmV3TGVuZ3RoKVxuICAgIH1cblxuICAgIHVwZGF0ZUFycmF5TGVuZ3RoXyhvbGRMZW5ndGg6IG51bWJlciwgZGVsdGE6IG51bWJlcikge1xuICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSB0aGlzLmxhc3RLbm93bkxlbmd0aF8pIGRpZSgxNilcbiAgICAgICAgdGhpcy5sYXN0S25vd25MZW5ndGhfICs9IGRlbHRhXG4gICAgICAgIGlmICh0aGlzLmxlZ2FjeU1vZGVfICYmIGRlbHRhID4gMCkgcmVzZXJ2ZUFycmF5QnVmZmVyKG9sZExlbmd0aCArIGRlbHRhICsgMSlcbiAgICB9XG5cbiAgICBzcGxpY2VXaXRoQXJyYXlfKGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCBuZXdJdGVtcz86IGFueVtdKTogYW55W10ge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b21fKVxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLnZhbHVlc18ubGVuZ3RoXG5cbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIGluZGV4ID0gMFxuICAgICAgICBlbHNlIGlmIChpbmRleCA+IGxlbmd0aCkgaW5kZXggPSBsZW5ndGhcbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPCAwKSBpbmRleCA9IE1hdGgubWF4KDAsIGxlbmd0aCArIGluZGV4KVxuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSBkZWxldGVDb3VudCA9IGxlbmd0aCAtIGluZGV4XG4gICAgICAgIGVsc2UgaWYgKGRlbGV0ZUNvdW50ID09PSB1bmRlZmluZWQgfHwgZGVsZXRlQ291bnQgPT09IG51bGwpIGRlbGV0ZUNvdW50ID0gMFxuICAgICAgICBlbHNlIGRlbGV0ZUNvdW50ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZGVsZXRlQ291bnQsIGxlbmd0aCAtIGluZGV4KSlcblxuICAgICAgICBpZiAobmV3SXRlbXMgPT09IHVuZGVmaW5lZCkgbmV3SXRlbXMgPSBFTVBUWV9BUlJBWVxuXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJQXJyYXlXaWxsU3BsaWNlPGFueT4+KHRoaXMgYXMgYW55LCB7XG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyBhcyBhbnksXG4gICAgICAgICAgICAgICAgdHlwZTogU1BMSUNFLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHJlbW92ZWRDb3VudDogZGVsZXRlQ291bnQsXG4gICAgICAgICAgICAgICAgYWRkZWQ6IG5ld0l0ZW1zXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHJldHVybiBFTVBUWV9BUlJBWVxuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBjaGFuZ2UucmVtb3ZlZENvdW50XG4gICAgICAgICAgICBuZXdJdGVtcyA9IGNoYW5nZS5hZGRlZFxuICAgICAgICB9XG5cbiAgICAgICAgbmV3SXRlbXMgPVxuICAgICAgICAgICAgbmV3SXRlbXMubGVuZ3RoID09PSAwID8gbmV3SXRlbXMgOiBuZXdJdGVtcy5tYXAodiA9PiB0aGlzLmVuaGFuY2VyXyh2LCB1bmRlZmluZWQpKVxuICAgICAgICBpZiAodGhpcy5sZWdhY3lNb2RlXyB8fCBfX0RFVl9fKSB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGhEZWx0YSA9IG5ld0l0ZW1zLmxlbmd0aCAtIGRlbGV0ZUNvdW50XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFycmF5TGVuZ3RoXyhsZW5ndGgsIGxlbmd0aERlbHRhKSAvLyBjaGVja3MgaWYgaW50ZXJuYWwgYXJyYXkgd2Fzbid0IG1vZGlmaWVkXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5zcGxpY2VJdGVtc0ludG9WYWx1ZXNfKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpXG5cbiAgICAgICAgaWYgKGRlbGV0ZUNvdW50ICE9PSAwIHx8IG5ld0l0ZW1zLmxlbmd0aCAhPT0gMClcbiAgICAgICAgICAgIHRoaXMubm90aWZ5QXJyYXlTcGxpY2VfKGluZGV4LCBuZXdJdGVtcywgcmVzKVxuICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWVzXyhyZXMpXG4gICAgfVxuXG4gICAgc3BsaWNlSXRlbXNJbnRvVmFsdWVzXyhpbmRleDogbnVtYmVyLCBkZWxldGVDb3VudDogbnVtYmVyLCBuZXdJdGVtczogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGlmIChuZXdJdGVtcy5sZW5ndGggPCBNQVhfU1BMSUNFX1NJWkUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc18uc3BsaWNlKGluZGV4LCBkZWxldGVDb3VudCwgLi4ubmV3SXRlbXMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB0aGlzLnZhbHVlc18uc2xpY2UoaW5kZXgsIGluZGV4ICsgZGVsZXRlQ291bnQpXG4gICAgICAgICAgICBsZXQgb2xkSXRlbXMgPSB0aGlzLnZhbHVlc18uc2xpY2UoaW5kZXggKyBkZWxldGVDb3VudClcbiAgICAgICAgICAgIHRoaXMudmFsdWVzXy5sZW5ndGggPSBpbmRleCArIG5ld0l0ZW1zLmxlbmd0aCAtIGRlbGV0ZUNvdW50XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0l0ZW1zLmxlbmd0aDsgaSsrKSB0aGlzLnZhbHVlc19baW5kZXggKyBpXSA9IG5ld0l0ZW1zW2ldXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9sZEl0ZW1zLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzX1tpbmRleCArIG5ld0l0ZW1zLmxlbmd0aCArIGldID0gb2xkSXRlbXNbaV1cbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5vdGlmeUFycmF5Q2hpbGRVcGRhdGVfKGluZGV4OiBudW1iZXIsIG5ld1ZhbHVlOiBhbnksIG9sZFZhbHVlOiBhbnkpIHtcbiAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gIXRoaXMub3duZWRfICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICBjb25zdCBjaGFuZ2U6IElBcnJheURpZENoYW5nZSB8IG51bGwgPVxuICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8gKHtcbiAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8sXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5hdG9tXy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVxuICAgICAgICAgICAgICAgICAgfSBhcyBjb25zdClcbiAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAvLyBUaGUgcmVhc29uIHdoeSB0aGlzIGlzIG9uIHJpZ2h0IGhhbmQgc2lkZSBoZXJlIChhbmQgbm90IGFib3ZlKSwgaXMgdGhpcyB3YXkgdGhlIHVnbGlmaWVyIHdpbGwgZHJvcCBpdCwgYnV0IGl0IHdvbid0XG4gICAgICAgIC8vIGNhdXNlIGFueSBydW50aW1lIG92ZXJoZWFkIGluIGRldmVsb3BtZW50IG1vZGUgd2l0aG91dCBOT0RFX0VOViBzZXQsIHVubGVzcyBzcHlpbmcgaXMgZW5hYmxlZFxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0Q2hhbmdlZCgpXG4gICAgICAgIGlmIChub3RpZnkpIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICB9XG5cbiAgICBub3RpZnlBcnJheVNwbGljZV8oaW5kZXg6IG51bWJlciwgYWRkZWQ6IGFueVtdLCByZW1vdmVkOiBhbnlbXSkge1xuICAgICAgICBjb25zdCBub3RpZnlTcHkgPSAhdGhpcy5vd25lZF8gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgIGNvbnN0IGNoYW5nZTogSUFycmF5U3BsaWNlIHwgbnVsbCA9XG4gICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyxcbiAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMuYXRvbV8ubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogU1BMSUNFLFxuICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgYWRkZWQsXG4gICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiByZW1vdmVkLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICBhZGRlZENvdW50OiBhZGRlZC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgIH0gYXMgY29uc3QpXG4gICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRTdGFydChjaGFuZ2UhKVxuICAgICAgICB0aGlzLmF0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAvLyBjb25mb3JtOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9vYnNlcnZlXG4gICAgICAgIGlmIChub3RpZnkpIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICB9XG5cbiAgICBnZXRfKGluZGV4OiBudW1iZXIpOiBhbnkgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAoaW5kZXggPCB0aGlzLnZhbHVlc18ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZV8odGhpcy52YWx1ZXNfW2luZGV4XSlcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBfX0RFVl9fXG4gICAgICAgICAgICAgICAgPyBgW21vYnhdIE91dCBvZiBib3VuZHMgcmVhZDogJHtpbmRleH1gXG4gICAgICAgICAgICAgICAgOiBgW21vYnguYXJyYXldIEF0dGVtcHQgdG8gcmVhZCBhbiBhcnJheSBpbmRleCAoJHtpbmRleH0pIHRoYXQgaXMgb3V0IG9mIGJvdW5kcyAoJHt0aGlzLnZhbHVlc18ubGVuZ3RofSkuIFBsZWFzZSBjaGVjayBsZW5ndGggZmlyc3QuIE91dCBvZiBib3VuZCBpbmRpY2VzIHdpbGwgbm90IGJlIHRyYWNrZWQgYnkgTW9iWGBcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHNldF8oaW5kZXg6IG51bWJlciwgbmV3VmFsdWU6IGFueSkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnZhbHVlc19cbiAgICAgICAgaWYgKGluZGV4IDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIGF0IGluZGV4IGluIHJhbmdlXG4gICAgICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b21fKVxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB2YWx1ZXNbaW5kZXhdXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElBcnJheVdpbGxDaGFuZ2U8YW55Pj4odGhpcyBhcyBhbnksIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIGFzIGFueSwgLy8gc2luY2UgXCJ0aGlzXCIgaXMgdGhlIHJlYWwgYXJyYXkgd2UgbmVlZCB0byBwYXNzIGl0cyBwcm94eVxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm5cbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5uZXdWYWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmVuaGFuY2VyXyhuZXdWYWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkID0gbmV3VmFsdWUgIT09IG9sZFZhbHVlXG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5QXJyYXlDaGlsZFVwZGF0ZV8oaW5kZXgsIG5ld1ZhbHVlLCBvbGRWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gYWRkIGEgbmV3IGl0ZW1cbiAgICAgICAgICAgIHRoaXMuc3BsaWNlV2l0aEFycmF5XyhpbmRleCwgMCwgW25ld1ZhbHVlXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG91dCBvZiBib3VuZHNcbiAgICAgICAgICAgIGRpZSgxNywgaW5kZXgsIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlQXJyYXk8VD4oXG4gICAgaW5pdGlhbFZhbHVlczogVFtdIHwgdW5kZWZpbmVkLFxuICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4sXG4gICAgbmFtZSA9IF9fREVWX18gPyBcIk9ic2VydmFibGVBcnJheUBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlQXJyYXlcIixcbiAgICBvd25lZCA9IGZhbHNlXG4pOiBJT2JzZXJ2YWJsZUFycmF5PFQ+IHtcbiAgICBhc3NlcnRQcm94aWVzKClcbiAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24obmFtZSwgZW5oYW5jZXIsIG93bmVkLCBmYWxzZSlcbiAgICBhZGRIaWRkZW5GaW5hbFByb3AoYWRtLnZhbHVlc18sICRtb2J4LCBhZG0pXG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkoYWRtLnZhbHVlc18sIGFycmF5VHJhcHMpIGFzIGFueVxuICAgIGFkbS5wcm94eV8gPSBwcm94eVxuICAgIGlmIChpbml0aWFsVmFsdWVzICYmIGluaXRpYWxWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KHRydWUpXG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXlfKDAsIDAsIGluaXRpYWxWYWx1ZXMpXG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpXG4gICAgfVxuICAgIHJldHVybiBwcm94eVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgYXJyYXlFeHRlbnNpb25zID0ge1xuICAgIGNsZWFyKCk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDApXG4gICAgfSxcblxuICAgIHJlcGxhY2UobmV3SXRlbXM6IGFueVtdKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oMCwgYWRtLnZhbHVlc18ubGVuZ3RoLCBuZXdJdGVtcylcbiAgICB9LFxuXG4gICAgLy8gVXNlZCBieSBKU09OLnN0cmluZ2lmeVxuICAgIHRvSlNPTigpOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNsaWNlKClcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBmdW5jdGlvbnMgdGhhdCBkbyBhbHRlciB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIHRoZSBhcnJheSwgKGJhc2VkIG9uIGxpYi5lczYuZC50cylcbiAgICAgKiBzaW5jZSB0aGVzZSBmdW5jdGlvbnMgYWx0ZXIgdGhlIGlubmVyIHN0cnVjdHVyZSBvZiB0aGUgYXJyYXksIHRoZSBoYXZlIHNpZGUgZWZmZWN0cy5cbiAgICAgKiBCZWNhdXNlIHRoZSBoYXZlIHNpZGUgZWZmZWN0cywgdGhleSBzaG91bGQgbm90IGJlIHVzZWQgaW4gY29tcHV0ZWQgZnVuY3Rpb24sXG4gICAgICogYW5kIGZvciB0aGF0IHJlYXNvbiB0aGUgZG8gbm90IGNhbGwgZGVwZW5kZW5jeVN0YXRlLm5vdGlmeU9ic2VydmVkXG4gICAgICovXG4gICAgc3BsaWNlKGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCAuLi5uZXdJdGVtczogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oaW5kZXgpXG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXlfKGluZGV4LCBkZWxldGVDb3VudClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcylcbiAgICB9LFxuXG4gICAgc3BsaWNlV2l0aEFycmF5KGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCBuZXdJdGVtcz86IGFueVtdKTogYW55W10ge1xuICAgICAgICByZXR1cm4gKHRoaXNbJG1vYnhdIGFzIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKS5zcGxpY2VXaXRoQXJyYXlfKFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBkZWxldGVDb3VudCxcbiAgICAgICAgICAgIG5ld0l0ZW1zXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcHVzaCguLi5pdGVtczogYW55W10pOiBudW1iZXIge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGhpc1skbW9ieF1cbiAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheV8oYWRtLnZhbHVlc18ubGVuZ3RoLCAwLCBpdGVtcylcbiAgICAgICAgcmV0dXJuIGFkbS52YWx1ZXNfLmxlbmd0aFxuICAgIH0sXG5cbiAgICBwb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZShNYXRoLm1heCh0aGlzWyRtb2J4XS52YWx1ZXNfLmxlbmd0aCAtIDEsIDApLCAxKVswXVxuICAgIH0sXG5cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDAsIDEpWzBdXG4gICAgfSxcblxuICAgIHVuc2hpZnQoLi4uaXRlbXM6IGFueVtdKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXlfKDAsIDAsIGl0ZW1zKVxuICAgICAgICByZXR1cm4gYWRtLnZhbHVlc18ubGVuZ3RoXG4gICAgfSxcblxuICAgIHJldmVyc2UoKTogYW55W10ge1xuICAgICAgICAvLyByZXZlcnNlIGJ5IGRlZmF1bHQgbXV0YXRlcyBpbiBwbGFjZSBiZWZvcmUgcmV0dXJuaW5nIHRoZSByZXN1bHRcbiAgICAgICAgLy8gd2hpY2ggbWFrZXMgaXQgYm90aCBhICdkZXJpdmF0aW9uJyBhbmQgYSAnbXV0YXRpb24nLlxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICBkaWUoMzcsIFwicmV2ZXJzZVwiKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVwbGFjZSh0aGlzLnNsaWNlKCkucmV2ZXJzZSgpKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBzb3J0KCk6IGFueVtdIHtcbiAgICAgICAgLy8gc29ydCBieSBkZWZhdWx0IG11dGF0ZXMgaW4gcGxhY2UgYmVmb3JlIHJldHVybmluZyB0aGUgcmVzdWx0XG4gICAgICAgIC8vIHdoaWNoIGdvZXMgYWdhaW5zdCBhbGwgZ29vZCBwcmFjdGljZXMuIExldCdzIG5vdCBjaGFuZ2UgdGhlIGFycmF5IGluIHBsYWNlIVxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICBkaWUoMzcsIFwic29ydFwiKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvcHkgPSB0aGlzLnNsaWNlKClcbiAgICAgICAgY29weS5zb3J0LmFwcGx5KGNvcHksIGFyZ3VtZW50cylcbiAgICAgICAgdGhpcy5yZXBsYWNlKGNvcHkpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlbW92ZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBjb25zdCBpZHggPSBhZG0uZGVoYW5jZVZhbHVlc18oYWRtLnZhbHVlc18pLmluZGV4T2YodmFsdWUpXG4gICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5zcGxpY2UoaWR4LCAxKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG59XG5cbi8qKlxuICogV3JhcCBmdW5jdGlvbiBmcm9tIHByb3RvdHlwZVxuICogV2l0aG91dCB0aGlzLCBldmVyeXRoaW5nIHdvcmtzIGFzIHdlbGwsIGJ1dCB0aGlzIHdvcmtzXG4gKiBmYXN0ZXIgYXMgZXZlcnl0aGluZyB3b3JrcyBvbiB1bnByb3hpZWQgdmFsdWVzXG4gKi9cbmFkZEFycmF5RXh0ZW5zaW9uKFwiY29uY2F0XCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZsYXRcIiwgc2ltcGxlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiaW5jbHVkZXNcIiwgc2ltcGxlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiaW5kZXhPZlwiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJqb2luXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImxhc3RJbmRleE9mXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInNsaWNlXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInRvU3RyaW5nXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInRvTG9jYWxlU3RyaW5nXCIsIHNpbXBsZUZ1bmMpXG4vLyBtYXBcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZXZlcnlcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZpbHRlclwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZmluZFwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZmluZEluZGV4XCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJmbGF0TWFwXCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJmb3JFYWNoXCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJtYXBcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInNvbWVcIiwgbWFwTGlrZUZ1bmMpXG4vLyByZWR1Y2VcbmFkZEFycmF5RXh0ZW5zaW9uKFwicmVkdWNlXCIsIHJlZHVjZUxpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJyZWR1Y2VSaWdodFwiLCByZWR1Y2VMaWtlRnVuYylcblxuZnVuY3Rpb24gYWRkQXJyYXlFeHRlbnNpb24oZnVuY05hbWUsIGZ1bmNGYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBBcnJheS5wcm90b3R5cGVbZnVuY05hbWVdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgYXJyYXlFeHRlbnNpb25zW2Z1bmNOYW1lXSA9IGZ1bmNGYWN0b3J5KGZ1bmNOYW1lKVxuICAgIH1cbn1cblxuLy8gUmVwb3J0IGFuZCBkZWxlZ2F0ZSB0byBkZWhhbmNlZCBhcnJheVxuZnVuY3Rpb24gc2ltcGxlRnVuYyhmdW5jTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBhZG0uYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICBjb25zdCBkZWhhbmNlZFZhbHVlcyA9IGFkbS5kZWhhbmNlVmFsdWVzXyhhZG0udmFsdWVzXylcbiAgICAgICAgcmV0dXJuIGRlaGFuY2VkVmFsdWVzW2Z1bmNOYW1lXS5hcHBseShkZWhhbmNlZFZhbHVlcywgYXJndW1lbnRzKVxuICAgIH1cbn1cblxuLy8gTWFrZSBzdXJlIGNhbGxiYWNrcyByZWNpZXZlIGNvcnJlY3QgYXJyYXkgYXJnICMyMzI2XG5mdW5jdGlvbiBtYXBMaWtlRnVuYyhmdW5jTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IGRlaGFuY2VkVmFsdWVzID0gYWRtLmRlaGFuY2VWYWx1ZXNfKGFkbS52YWx1ZXNfKVxuICAgICAgICByZXR1cm4gZGVoYW5jZWRWYWx1ZXNbZnVuY05hbWVdKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgZWxlbWVudCwgaW5kZXgsIHRoaXMpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vLyBNYWtlIHN1cmUgY2FsbGJhY2tzIHJlY2lldmUgY29ycmVjdCBhcnJheSBhcmcgIzIzMjZcbmZ1bmN0aW9uIHJlZHVjZUxpa2VGdW5jKGZ1bmNOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IGRlaGFuY2VkVmFsdWVzID0gYWRtLmRlaGFuY2VWYWx1ZXNfKGFkbS52YWx1ZXNfKVxuICAgICAgICAvLyAjMjQzMiAtIHJlZHVjZSBiZWhhdmlvciBkZXBlbmRzIG9uIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgYXJndW1lbnRzWzBdID0gKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSwgaW5kZXgsIHRoaXMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlaGFuY2VkVmFsdWVzW2Z1bmNOYW1lXS5hcHBseShkZWhhbmNlZFZhbHVlcywgYXJndW1lbnRzKVxuICAgIH1cbn1cblxuY29uc3QgaXNPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXG4gICAgXCJPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvblwiLFxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXG4pXG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVBcnJheSh0aGluZyk6IHRoaW5nIGlzIElPYnNlcnZhYmxlQXJyYXk8YW55PiB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaW5nKSAmJiBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKHRoaW5nWyRtb2J4XSlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgT2JzZXJ2YWJsZVZhbHVlLFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkLFxuICAgIGNyZWF0ZUF0b20sXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBkZWVwRW5oYW5jZXIsXG4gICAgZ2V0TmV4dElkLFxuICAgIGdldFBsYWluT2JqZWN0S2V5cyxcbiAgICBoYXNJbnRlcmNlcHRvcnMsXG4gICAgaGFzTGlzdGVuZXJzLFxuICAgIGludGVyY2VwdENoYW5nZSxcbiAgICBpc0VTNk1hcCxcbiAgICBpc1BsYWluT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBtYWtlSXRlcmFibGUsXG4gICAgbm90aWZ5TGlzdGVuZXJzLFxuICAgIHJlZmVyZW5jZUVuaGFuY2VyLFxuICAgIHJlZ2lzdGVySW50ZXJjZXB0b3IsXG4gICAgcmVnaXN0ZXJMaXN0ZW5lcixcbiAgICBzcHlSZXBvcnRFbmQsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgc3RyaW5naWZ5S2V5LFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIHVudHJhY2tlZCxcbiAgICBvbkJlY29tZVVub2JzZXJ2ZWQsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgZGllLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgVVBEQVRFLFxuICAgIElBdG9tXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtleVZhbHVlTWFwPFYgPSBhbnk+IHtcbiAgICBba2V5OiBzdHJpbmddOiBWXG59XG5cbmV4cG9ydCB0eXBlIElNYXBFbnRyeTxLID0gYW55LCBWID0gYW55PiA9IFtLLCBWXVxuZXhwb3J0IHR5cGUgSU1hcEVudHJpZXM8SyA9IGFueSwgViA9IGFueT4gPSBJTWFwRW50cnk8SywgVj5bXVxuXG5leHBvcnQgdHlwZSBJTWFwRGlkQ2hhbmdlPEsgPSBhbnksIFYgPSBhbnk+ID0geyBvYnNlcnZhYmxlS2luZDogXCJtYXBcIjsgZGVidWdPYmplY3ROYW1lOiBzdHJpbmcgfSAmIChcbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICAgICAgICBuYW1lOiBLIC8vIGFjdHVhbCB0aGUga2V5IG9yIGluZGV4LCBidXQgdGhpcyBpcyBiYXNlZCBvbiB0aGUgYW5jaWVudCAub2JzZXJ2ZSBwcm9wb3NhbCBmb3IgY29uc2lzdGVuY3lcbiAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgICAgICAgbmV3VmFsdWU6IFZcbiAgICAgICAgICBvbGRWYWx1ZTogVlxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgICAgICAgIG5hbWU6IEtcbiAgICAgICAgICB0eXBlOiBcImFkZFwiXG4gICAgICAgICAgbmV3VmFsdWU6IFZcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICAgICAgICBuYW1lOiBLXG4gICAgICAgICAgdHlwZTogXCJkZWxldGVcIlxuICAgICAgICAgIG9sZFZhbHVlOiBWXG4gICAgICB9XG4pXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcFdpbGxDaGFuZ2U8SyA9IGFueSwgViA9IGFueT4ge1xuICAgIG9iamVjdDogT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgIHR5cGU6IFwidXBkYXRlXCIgfCBcImFkZFwiIHwgXCJkZWxldGVcIlxuICAgIG5hbWU6IEtcbiAgICBuZXdWYWx1ZT86IFZcbn1cblxuY29uc3QgT2JzZXJ2YWJsZU1hcE1hcmtlciA9IHt9XG5cbmV4cG9ydCBjb25zdCBBREQgPSBcImFkZFwiXG5leHBvcnQgY29uc3QgREVMRVRFID0gXCJkZWxldGVcIlxuXG5leHBvcnQgdHlwZSBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SyA9IGFueSwgViA9IGFueT4gPVxuICAgIHwgSU1hcEVudHJpZXM8SywgVj5cbiAgICB8IElLZXlWYWx1ZU1hcDxWPlxuICAgIHwgTWFwPEssIFY+XG5cbi8vIGp1c3QgZXh0ZW5kIE1hcD8gU2VlIGFsc28gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbmVzdGhhcnVzLzEzYjRkNzRmMmVmNGEyZjQzNTdkYmQzZmMyM2MxZTU0XG4vLyBCdXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMTU1NlxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVNYXA8SyA9IGFueSwgViA9IGFueT5cbiAgICBpbXBsZW1lbnRzIE1hcDxLLCBWPiwgSUludGVyY2VwdGFibGU8SU1hcFdpbGxDaGFuZ2U8SywgVj4+LCBJTGlzdGVuYWJsZSB7XG4gICAgWyRtb2J4XSA9IE9ic2VydmFibGVNYXBNYXJrZXJcbiAgICBkYXRhXzogTWFwPEssIE9ic2VydmFibGVWYWx1ZTxWPj5cbiAgICBoYXNNYXBfOiBNYXA8SywgT2JzZXJ2YWJsZVZhbHVlPGJvb2xlYW4+PiAvLyBoYXNNYXAsIG5vdCBoYXNoTWFwID4tKS5cbiAgICBrZXlzQXRvbV86IElBdG9tXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICBkZWhhbmNlcjogYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5pdGlhbERhdGE/OiBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SywgVj4sXG4gICAgICAgIHB1YmxpYyBlbmhhbmNlcl86IElFbmhhbmNlcjxWPiA9IGRlZXBFbmhhbmNlcixcbiAgICAgICAgcHVibGljIG5hbWVfID0gX19ERVZfXyA/IFwiT2JzZXJ2YWJsZU1hcEBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlTWFwXCJcbiAgICApIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKE1hcCkpIHtcbiAgICAgICAgICAgIGRpZSgxOClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleXNBdG9tXyA9IGNyZWF0ZUF0b20oX19ERVZfXyA/IGAke3RoaXMubmFtZV99LmtleXMoKWAgOiBcIk9ic2VydmFibGVNYXAua2V5cygpXCIpXG4gICAgICAgIHRoaXMuZGF0YV8gPSBuZXcgTWFwKClcbiAgICAgICAgdGhpcy5oYXNNYXBfID0gbmV3IE1hcCgpXG4gICAgICAgIHRoaXMubWVyZ2UoaW5pdGlhbERhdGEpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNfKGtleTogSyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5oYXMoa2V5KVxuICAgIH1cblxuICAgIGhhcyhrZXk6IEspOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24pIHJldHVybiB0aGlzLmhhc18oa2V5KVxuXG4gICAgICAgIGxldCBlbnRyeSA9IHRoaXMuaGFzTWFwXy5nZXQoa2V5KVxuICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICBjb25zdCBuZXdFbnRyeSA9IChlbnRyeSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUoXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNfKGtleSksXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7c3RyaW5naWZ5S2V5KGtleSl9P2AgOiBcIk9ic2VydmFibGVNYXAua2V5P1wiLFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApKVxuICAgICAgICAgICAgdGhpcy5oYXNNYXBfLnNldChrZXksIG5ld0VudHJ5KVxuICAgICAgICAgICAgb25CZWNvbWVVbm9ic2VydmVkKG5ld0VudHJ5LCAoKSA9PiB0aGlzLmhhc01hcF8uZGVsZXRlKGtleSkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW50cnkuZ2V0KClcbiAgICB9XG5cbiAgICBzZXQoa2V5OiBLLCB2YWx1ZTogVikge1xuICAgICAgICBjb25zdCBoYXNLZXkgPSB0aGlzLmhhc18oa2V5KVxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU1hcFdpbGxDaGFuZ2U8SywgVj4+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBoYXNLZXkgPyBVUERBVEUgOiBBREQsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIHZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlIVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNLZXkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVfKGtleSwgdmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZFZhbHVlXyhrZXksIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZGVsZXRlKGtleTogSyk6IGJvb2xlYW4ge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmtleXNBdG9tXylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElNYXBXaWxsQ2hhbmdlPEssIFY+Pih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzXyhrZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2U6IElNYXBEaWRDaGFuZ2U8SywgVj4gfCBudWxsID1cbiAgICAgICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJtYXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBERUxFVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6ICg8YW55PnRoaXMuZGF0YV8uZ2V0KGtleSkpLnZhbHVlXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRTdGFydChjaGFuZ2UhKVxuICAgICAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSGFzTWFwRW50cnlfKGtleSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMuZGF0YV8uZ2V0KGtleSkhXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZV8odW5kZWZpbmVkIGFzIGFueSlcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFfLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVIYXNNYXBFbnRyeV8oa2V5OiBLLCB2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBsZXQgZW50cnkgPSB0aGlzLmhhc01hcF8uZ2V0KGtleSlcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBlbnRyeS5zZXROZXdWYWx1ZV8odmFsdWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVZhbHVlXyhrZXk6IEssIG5ld1ZhbHVlOiBWIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSB0aGlzLmRhdGFfLmdldChrZXkpIVxuICAgICAgICBuZXdWYWx1ZSA9IChvYnNlcnZhYmxlIGFzIGFueSkucHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSkgYXMgVlxuICAgICAgICBpZiAobmV3VmFsdWUgIT09IGdsb2JhbFN0YXRlLlVOQ0hBTkdFRCkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+IHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwibWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiAob2JzZXJ2YWJsZSBhcyBhbnkpLnZhbHVlXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICBvYnNlcnZhYmxlLnNldE5ld1ZhbHVlXyhuZXdWYWx1ZSBhcyBWKVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVmFsdWVfKGtleTogSywgbmV3VmFsdWU6IFYpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5rZXlzQXRvbV8pXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIHRoaXMuZW5oYW5jZXJfLFxuICAgICAgICAgICAgICAgIF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS4ke3N0cmluZ2lmeUtleShrZXkpfWAgOiBcIk9ic2VydmFibGVNYXAua2V5XCIsXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHRoaXMuZGF0YV8uc2V0KGtleSwgb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gKG9ic2VydmFibGUgYXMgYW55KS52YWx1ZV8gLy8gdmFsdWUgbWlnaHQgaGF2ZSBiZWVuIGNoYW5nZWRcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSGFzTWFwRW50cnlfKGtleSwgdHJ1ZSlcbiAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKVxuICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgY29uc3QgY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+IHwgbnVsbCA9XG4gICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwibWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSBzcHlSZXBvcnRFbmQoKVxuICAgIH1cblxuICAgIGdldChrZXk6IEspOiBWIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZV8odGhpcy5kYXRhXy5nZXQoa2V5KSEuZ2V0KCkpXG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZV8odW5kZWZpbmVkKVxuICAgIH1cblxuICAgIHByaXZhdGUgZGVoYW5jZVZhbHVlXzxYIGV4dGVuZHMgViB8IHVuZGVmaW5lZD4odmFsdWU6IFgpOiBYIHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPEs+IHtcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5rZXlzKClcbiAgICB9XG5cbiAgICB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPiB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0ga2V5cy5uZXh0KClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9uZSA/ICh1bmRlZmluZWQgYXMgYW55KSA6IHNlbGYuZ2V0KHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBlbnRyaWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8SU1hcEVudHJ5PEssIFY+PiB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0ga2V5cy5uZXh0KClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9uZSA/ICh1bmRlZmluZWQgYXMgYW55KSA6IChbdmFsdWUsIHNlbGYuZ2V0KHZhbHVlKSFdIGFzIFtLLCBWXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKVxuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2s6ICh2YWx1ZTogViwga2V5OiBLLCBvYmplY3Q6IE1hcDxLLCBWPikgPT4gdm9pZCwgdGhpc0FyZz8pIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcykgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwga2V5LCB0aGlzKVxuICAgIH1cblxuICAgIC8qKiBNZXJnZSBhbm90aGVyIG9iamVjdCBpbnRvIHRoaXMgb2JqZWN0LCByZXR1cm5zIHRoaXMuICovXG4gICAgbWVyZ2Uob3RoZXI6IE9ic2VydmFibGVNYXA8SywgVj4gfCBJS2V5VmFsdWVNYXA8Vj4gfCBhbnkpOiBPYnNlcnZhYmxlTWFwPEssIFY+IHtcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcChvdGhlcikpIHtcbiAgICAgICAgICAgIG90aGVyID0gbmV3IE1hcChvdGhlcilcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChvdGhlcikpXG4gICAgICAgICAgICAgICAgZ2V0UGxhaW5PYmplY3RLZXlzKG90aGVyKS5mb3JFYWNoKChrZXk6IGFueSkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoKGtleSBhcyBhbnkpIGFzIEssIG90aGVyW2tleV0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvdGhlcikpIG90aGVyLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4gdGhpcy5zZXQoa2V5LCB2YWx1ZSkpXG4gICAgICAgICAgICBlbHNlIGlmIChpc0VTNk1hcChvdGhlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAob3RoZXIuY29uc3RydWN0b3IgIT09IE1hcCkgZGllKDE5LCBvdGhlcilcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB0aGlzLnNldChrZXksIHZhbHVlKSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHVuZGVmaW5lZCkgZGllKDIwLCBvdGhlcilcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgdW50cmFja2VkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmtleXMoKSkgdGhpcy5kZWxldGUoa2V5KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZXBsYWNlKHZhbHVlczogT2JzZXJ2YWJsZU1hcDxLLCBWPiB8IElLZXlWYWx1ZU1hcDxWPiB8IGFueSk6IE9ic2VydmFibGVNYXA8SywgVj4ge1xuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiByZXF1aXJlbWVudHM6XG4gICAgICAgIC8vIC0gcmVzcGVjdCBvcmRlcmluZyBvZiByZXBsYWNlbWVudCBtYXBcbiAgICAgICAgLy8gLSBhbGxvdyBpbnRlcmNlcHRvcnMgdG8gcnVuIGFuZCBwb3RlbnRpYWxseSBwcmV2ZW50IGluZGl2aWR1YWwgb3BlcmF0aW9uc1xuICAgICAgICAvLyAtIGRvbid0IHJlY3JlYXRlIG9ic2VydmFibGVzIHRoYXQgYWxyZWFkeSBleGlzdCBpbiBvcmlnaW5hbCBtYXAgKHNvIHdlIGRvbid0IGRlc3Ryb3kgZXhpc3Rpbmcgc3Vic2NyaXB0aW9ucylcbiAgICAgICAgLy8gLSBkb24ndCBfa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCBpZiB0aGUga2V5cyBvZiByZXN1bHRpbmcgbWFwIGFyZSBpbmRlbnRpY2FsIChvcmRlciBtYXR0ZXJzISlcbiAgICAgICAgLy8gLSBub3RlIHRoYXQgcmVzdWx0IG1hcCBtYXkgZGlmZmVyIGZyb20gcmVwbGFjZW1lbnQgbWFwIGR1ZSB0byB0aGUgaW50ZXJjZXB0b3JzXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gbWFwIHNvIHdlIGNhbiBkbyBxdWljayBrZXkgbG9va3Vwc1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnRNYXAgPSBjb252ZXJ0VG9NYXAodmFsdWVzKVxuICAgICAgICAgICAgY29uc3Qgb3JkZXJlZERhdGEgPSBuZXcgTWFwKClcbiAgICAgICAgICAgIC8vIFVzZWQgZm9yIG9wdGltaXphdGlvblxuICAgICAgICAgICAgbGV0IGtleXNSZXBvcnRDaGFuZ2VkQ2FsbGVkID0gZmFsc2VcbiAgICAgICAgICAgIC8vIERlbGV0ZSBrZXlzIHRoYXQgZG9uJ3QgZXhpc3QgaW4gcmVwbGFjZW1lbnQgbWFwXG4gICAgICAgICAgICAvLyBpZiB0aGUga2V5IGRlbGV0aW9uIGlzIHByZXZlbnRlZCBieSBpbnRlcmNlcHRvclxuICAgICAgICAgICAgLy8gYWRkIGVudHJ5IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJlc3VsdCBtYXBcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZGF0YV8ua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29uY3VycmVudGx5IGl0ZXJhdGluZy9kZWxldGluZyBrZXlzXG4gICAgICAgICAgICAgICAgLy8gaXRlcmF0b3Igc2hvdWxkIGhhbmRsZSB0aGlzIGNvcnJlY3RseVxuICAgICAgICAgICAgICAgIGlmICghcmVwbGFjZW1lbnRNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlZCA9IHRoaXMuZGVsZXRlKGtleSlcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FzIHRoZSBrZXkgcmVtb3ZlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF9rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCkgd2FzIGFscmVhZHkgY2FsbGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBwcmV2ZW50ZWQgYnkgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhXy5nZXQoa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZERhdGEuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNZXJnZSBlbnRyaWVzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiByZXBsYWNlbWVudE1hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIHdhbnQgdG8ga25vdyB3aGV0aGVyIGEgbmV3IGtleSBpcyBhZGRlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGtleUV4aXN0ZWQgPSB0aGlzLmRhdGFfLmhhcyhrZXkpXG4gICAgICAgICAgICAgICAgLy8gQWRkIG9yIHVwZGF0ZSB2YWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgLy8gVGhlIGFkZGl0aW9uIGNvdWxkIGhhdmUgYmVlbiBwcmV2ZW50IGJ5IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YV8uaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHVwZGF0ZSBjb3VsZCBoYXZlIGJlZW4gcHJldmVudGVkIGJ5IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBhbHNvIHdlIHdhbnQgdG8gcHJlc2VydmUgZXhpc3RpbmcgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSB2YWx1ZSBmcm9tIF9kYXRhIG1hcCAoaW5zdGVhZCBvZiByZXBsYWNlbWVudCBtYXApXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhXy5nZXQoa2V5KVxuICAgICAgICAgICAgICAgICAgICBvcmRlcmVkRGF0YS5zZXQoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FzIGEgbmV3IGtleSBhZGRlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXlFeGlzdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpIHdhcyBhbHJlYWR5IGNhbGxlZFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5c1JlcG9ydENoYW5nZWRDYWxsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgcG9zc2libGUga2V5IG9yZGVyIGNoYW5nZVxuICAgICAgICAgICAgaWYgKCFrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGFfLnNpemUgIT09IG9yZGVyZWREYXRhLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc2l6ZSBkaWZmZXJzLCBrZXlzIGFyZSBkZWZpbml0ZWx5IG1vZGlmaWVkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZXIxID0gdGhpcy5kYXRhXy5rZXlzKClcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlcjIgPSBvcmRlcmVkRGF0YS5rZXlzKClcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQxID0gaXRlcjEubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0MiA9IGl0ZXIyLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIW5leHQxLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0MS52YWx1ZSAhPT0gbmV4dDIudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDEgPSBpdGVyMS5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQyID0gaXRlcjIubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVc2UgY29ycmVjdGx5IG9yZGVyZWQgbWFwXG4gICAgICAgICAgICB0aGlzLmRhdGFfID0gb3JkZXJlZERhdGFcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfLnNpemVcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJbb2JqZWN0IE9ic2VydmFibGVNYXBdXCJcbiAgICB9XG5cbiAgICB0b0pTT04oKTogW0ssIFZdW10ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKVxuICAgIH1cblxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuIFwiTWFwXCJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlcyB0aGlzIG9iamVjdC4gVHJpZ2dlcnMgZm9yIHRoZSBldmVudHMgJ2FkZCcsICd1cGRhdGUnIGFuZCAnZGVsZXRlJy5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9vYnNlcnZlXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcbiAgICAgKi9cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZXM6IElNYXBEaWRDaGFuZ2U8SywgVj4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpXG4gICAgICAgICAgICBkaWUoXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IGZpcmVJbW1lZGlhdGVseT10cnVlIGluIGNvbWJpbmF0aW9uIHdpdGggbWFwcy5cIilcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgaW50ZXJjZXB0XyhoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SU1hcFdpbGxDaGFuZ2U8SywgVj4+KTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcilcbiAgICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZXhwb3J0IHZhciBpc09ic2VydmFibGVNYXAgPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiT2JzZXJ2YWJsZU1hcFwiLCBPYnNlcnZhYmxlTWFwKSBhcyAoXG4gICAgdGhpbmc6IGFueVxuKSA9PiB0aGluZyBpcyBPYnNlcnZhYmxlTWFwPGFueSwgYW55PlxuXG5mdW5jdGlvbiBjb252ZXJ0VG9NYXAoZGF0YVN0cnVjdHVyZTogYW55KTogTWFwPGFueSwgYW55PiB7XG4gICAgaWYgKGlzRVM2TWFwKGRhdGFTdHJ1Y3R1cmUpIHx8IGlzT2JzZXJ2YWJsZU1hcChkYXRhU3RydWN0dXJlKSkge1xuICAgICAgICByZXR1cm4gZGF0YVN0cnVjdHVyZVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhU3RydWN0dXJlKSkge1xuICAgICAgICByZXR1cm4gbmV3IE1hcChkYXRhU3RydWN0dXJlKVxuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChkYXRhU3RydWN0dXJlKSkge1xuICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKClcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YVN0cnVjdHVyZSkge1xuICAgICAgICAgICAgbWFwLnNldChrZXksIGRhdGFTdHJ1Y3R1cmVba2V5XSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRpZSgyMSwgZGF0YVN0cnVjdHVyZSlcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIGNyZWF0ZUF0b20sXG4gICAgZGVlcEVuaGFuY2VyLFxuICAgIGdldE5leHRJZCxcbiAgICBJRW5oYW5jZXIsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIGhhc0xpc3RlbmVycyxcbiAgICBJTGlzdGVuYWJsZSxcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIExhbWJkYSxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgc3B5UmVwb3J0RW5kLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgaGFzSW50ZXJjZXB0b3JzLFxuICAgIGludGVyY2VwdENoYW5nZSxcbiAgICBJSW50ZXJjZXB0YWJsZSxcbiAgICBJSW50ZXJjZXB0b3IsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCxcbiAgICB1bnRyYWNrZWQsXG4gICAgbWFrZUl0ZXJhYmxlLFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIGlzRVM2U2V0LFxuICAgIElBdG9tLFxuICAgIERFTEVURSxcbiAgICBBREQsXG4gICAgZGllLFxuICAgIGlzRnVuY3Rpb25cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgT2JzZXJ2YWJsZVNldE1hcmtlciA9IHt9XG5cbmV4cG9ydCB0eXBlIElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlczxUPiA9IFNldDxUPiB8IHJlYWRvbmx5IFRbXVxuXG5leHBvcnQgdHlwZSBJU2V0RGlkQ2hhbmdlPFQgPSBhbnk+ID1cbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVTZXQ8VD5cbiAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJzZXRcIlxuICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG4gICAgICAgICAgdHlwZTogXCJhZGRcIlxuICAgICAgICAgIG5ld1ZhbHVlOiBUXG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgb2JqZWN0OiBPYnNlcnZhYmxlU2V0PFQ+XG4gICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCJcbiAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCJcbiAgICAgICAgICBvbGRWYWx1ZTogVFxuICAgICAgfVxuXG5leHBvcnQgdHlwZSBJU2V0V2lsbENoYW5nZTxUID0gYW55PiA9XG4gICAgfCB7XG4gICAgICAgICAgdHlwZTogXCJkZWxldGVcIlxuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZVNldDxUPlxuICAgICAgICAgIG9sZFZhbHVlOiBUXG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgdHlwZTogXCJhZGRcIlxuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZVNldDxUPlxuICAgICAgICAgIG5ld1ZhbHVlOiBUXG4gICAgICB9XG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlU2V0PFQgPSBhbnk+IGltcGxlbWVudHMgU2V0PFQ+LCBJSW50ZXJjZXB0YWJsZTxJU2V0V2lsbENoYW5nZT4sIElMaXN0ZW5hYmxlIHtcbiAgICBbJG1vYnhdID0gT2JzZXJ2YWJsZVNldE1hcmtlclxuICAgIHByaXZhdGUgZGF0YV86IFNldDxhbnk+ID0gbmV3IFNldCgpXG4gICAgcHJpdmF0ZSBhdG9tXzogSUF0b21cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGRlaGFuY2VyOiBhbnlcbiAgICBlbmhhbmNlcl86IChuZXdWOiBhbnksIG9sZFY6IGFueSB8IHVuZGVmaW5lZCkgPT4gYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5pdGlhbERhdGE/OiBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4sXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4gPSBkZWVwRW5oYW5jZXIsXG4gICAgICAgIHB1YmxpYyBuYW1lXyA9IF9fREVWX18gPyBcIk9ic2VydmFibGVTZXRAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZVNldFwiXG4gICAgKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihTZXQpKSB7XG4gICAgICAgICAgICBkaWUoMjIpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdG9tXyA9IGNyZWF0ZUF0b20odGhpcy5uYW1lXylcbiAgICAgICAgdGhpcy5lbmhhbmNlcl8gPSAobmV3Viwgb2xkVikgPT4gZW5oYW5jZXIobmV3Viwgb2xkViwgbmFtZV8pXG4gICAgICAgIGlmIChpbml0aWFsRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlKGluaXRpYWxEYXRhKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWhhbmNlVmFsdWVfPFggZXh0ZW5kcyBUIHwgdW5kZWZpbmVkPih2YWx1ZTogWCk6IFgge1xuICAgICAgICBpZiAodGhpcy5kZWhhbmNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlcih2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgdW50cmFja2VkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuZGF0YV8udmFsdWVzKCkpIHRoaXMuZGVsZXRlKHZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmb3JFYWNoKGNhbGxiYWNrRm46ICh2YWx1ZTogVCwgdmFsdWUyOiBULCBzZXQ6IFNldDxUPikgPT4gdm9pZCwgdGhpc0FyZz86IGFueSkge1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrRm4uY2FsbCh0aGlzQXJnLCB2YWx1ZSwgdmFsdWUsIHRoaXMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfLnNpemVcbiAgICB9XG5cbiAgICBhZGQodmFsdWU6IFQpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5hdG9tXylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElTZXRXaWxsQ2hhbmdlPFQ+Pih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIC8vIGlkZWFsbHksIHZhbHVlID0gY2hhbmdlLnZhbHVlIHdvdWxkIGJlIGRvbmUgaGVyZSwgc28gdGhhdCB2YWx1ZXMgY2FuIGJlXG4gICAgICAgICAgICAvLyBjaGFuZ2VkIGJ5IGludGVyY2VwdG9yLiBTYW1lIGFwcGxpZXMgZm9yIG90aGVyIFNldCBhbmQgTWFwIGFwaSdzLlxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhXy5hZGQodGhpcy5lbmhhbmNlcl8odmFsdWUsIHVuZGVmaW5lZCkpXG4gICAgICAgICAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IDxJU2V0RGlkQ2hhbmdlPFQ+PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIF9fREVWX18pIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICBpZiAobm90aWZ5KSBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBfX0RFVl9fKSBzcHlSZXBvcnRFbmQoKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBkZWxldGUodmFsdWU6IGFueSkge1xuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SVNldFdpbGxDaGFuZ2U8VD4+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBERUxFVEUsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IDxJU2V0RGlkQ2hhbmdlPFQ+PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChub3RpZnlTcHkgJiYgX19ERVZfXykgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YV8uZGVsZXRlKHZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChub3RpZnkpIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIF9fREVWX18pIHNweVJlcG9ydEVuZCgpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGhhcyh2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5oYXModGhpcy5kZWhhbmNlVmFsdWVfKHZhbHVlKSlcbiAgICB9XG5cbiAgICBlbnRyaWVzKCkge1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gMFxuICAgICAgICBjb25zdCBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleXMoKSlcbiAgICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuZnJvbSh0aGlzLnZhbHVlcygpKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlPFtULCBUXT4oe1xuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IG5leHRJbmRleFxuICAgICAgICAgICAgICAgIG5leHRJbmRleCArPSAxXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4IDwgdmFsdWVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWU6IFtrZXlzW2luZGV4XSwgdmFsdWVzW2luZGV4XV0sIGRvbmU6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7IGRvbmU6IHRydWUgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGFzIGFueSlcbiAgICB9XG5cbiAgICBrZXlzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMoKVxuICAgIH1cblxuICAgIHZhbHVlcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGxldCBuZXh0SW5kZXggPSAwXG4gICAgICAgIGNvbnN0IG9ic2VydmFibGVWYWx1ZXMgPSBBcnJheS5mcm9tKHRoaXMuZGF0YV8udmFsdWVzKCkpXG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGU8VD4oe1xuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dEluZGV4IDwgb2JzZXJ2YWJsZVZhbHVlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlOiBzZWxmLmRlaGFuY2VWYWx1ZV8ob2JzZXJ2YWJsZVZhbHVlc1tuZXh0SW5kZXgrK10pLCBkb25lOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBkb25lOiB0cnVlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBhcyBhbnkpXG4gICAgfVxuXG4gICAgcmVwbGFjZShvdGhlcjogT2JzZXJ2YWJsZVNldDxUPiB8IElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlczxUPik6IE9ic2VydmFibGVTZXQ8VD4ge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG90aGVyKSkge1xuICAgICAgICAgICAgb3RoZXIgPSBuZXcgU2V0KG90aGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3RoZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpXG4gICAgICAgICAgICAgICAgb3RoZXIuZm9yRWFjaCh2YWx1ZSA9PiB0aGlzLmFkZCh2YWx1ZSkpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRVM2U2V0KG90aGVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKVxuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2godmFsdWUgPT4gdGhpcy5hZGQodmFsdWUpKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChvdGhlciAhPT0gbnVsbCAmJiBvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGllKFwiQ2Fubm90IGluaXRpYWxpemUgc2V0IGZyb20gXCIgKyBvdGhlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZXM6IElTZXREaWRDaGFuZ2U8VD4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICAvLyAuLi4gJ2ZpcmVJbW1lZGlhdGVseScgY291bGQgYWxzbyBiZSB0cnVlP1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpXG4gICAgICAgICAgICBkaWUoXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IGZpcmVJbW1lZGlhdGVseT10cnVlIGluIGNvbWJpbmF0aW9uIHdpdGggc2V0cy5cIilcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgaW50ZXJjZXB0XyhoYW5kbGVyOiBJSW50ZXJjZXB0b3I8SVNldFdpbGxDaGFuZ2U8VD4+KTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcilcbiAgICB9XG5cbiAgICB0b0pTT04oKTogVFtdIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcylcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJbb2JqZWN0IE9ic2VydmFibGVTZXRdXCJcbiAgICB9XG5cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzKClcbiAgICB9XG5cbiAgICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgICAgIHJldHVybiBcIlNldFwiXG4gICAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgaXNPYnNlcnZhYmxlU2V0ID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVTZXRcIiwgT2JzZXJ2YWJsZVNldCkgYXMgKFxuICAgIHRoaW5nOiBhbnlcbikgPT4gdGhpbmcgaXMgT2JzZXJ2YWJsZVNldDxhbnk+XG4iLCJpbXBvcnQge1xuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIGdldEFubm90YXRpb25Gcm9tT3B0aW9ucyxcbiAgICBwcm9wYWdhdGVDaGFuZ2VkLFxuICAgIGlzQW5ub3RhdGlvbixcbiAgICAkbW9ieCxcbiAgICBBdG9tLFxuICAgIEFubm90YXRpb24sXG4gICAgQ29tcHV0ZWRWYWx1ZSxcbiAgICBJQXRvbSxcbiAgICBJQ29tcHV0ZWRWYWx1ZU9wdGlvbnMsXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElMaXN0ZW5hYmxlLFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlVmFsdWUsXG4gICAgYWRkSGlkZGVuUHJvcCxcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGVuZEJhdGNoLFxuICAgIGdldE5leHRJZCxcbiAgICBoYXNJbnRlcmNlcHRvcnMsXG4gICAgaGFzTGlzdGVuZXJzLFxuICAgIGludGVyY2VwdENoYW5nZSxcbiAgICBpc09iamVjdCxcbiAgICBpc1BsYWluT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBzdGFydEJhdGNoLFxuICAgIHN0cmluZ2lmeUtleSxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBvYnNlcnZhYmxlLFxuICAgIEFERCxcbiAgICBVUERBVEUsXG4gICAgZGllLFxuICAgIGhhc1Byb3AsXG4gICAgZ2V0RGVzY3JpcHRvcixcbiAgICBzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbCxcbiAgICBvd25LZXlzLFxuICAgIGlzT3ZlcnJpZGUsXG4gICAgZGVmaW5lUHJvcGVydHksXG4gICAgaW5mZXJBbm5vdGF0aW9uRnJvbURlc2NyaXB0b3IsXG4gICAgZ2V0RGVidWdOYW1lLFxuICAgIGdldEFkbWluaXN0cmF0aW9uLFxuICAgIG9iamVjdFByb3RvdHlwZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vLyBjbG9zZXN0UHJvdG90eXBlb2ZUYXJnZXRbaW5mZXJyZWRBbm5vdGF0aW9uc1N5bWJvbF0gPSBuZXcgTWFwPFByb3BlcnR5S2VzLCBBbm5vdGF0aW9uPigpXG5leHBvcnQgY29uc3QgaW5mZXJyZWRBbm5vdGF0aW9uc1N5bWJvbCA9IFN5bWJvbChcIm1vYngtaW5mZXJyZWQtYW5ub3RhdGlvbnNcIilcblxuY29uc3QgZGVzY3JpcHRvckNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG5leHBvcnQgdHlwZSBJT2JqZWN0RGlkQ2hhbmdlPFQgPSBhbnk+ID0ge1xuICAgIG9ic2VydmFibGVLaW5kOiBcIm9iamVjdFwiXG4gICAgbmFtZTogUHJvcGVydHlLZXlcbiAgICBvYmplY3Q6IFRcbiAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xufSAmIChcbiAgICB8IHtcbiAgICAgICAgICB0eXBlOiBcImFkZFwiXG4gICAgICAgICAgbmV3VmFsdWU6IGFueVxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICAgICAgICBvbGRWYWx1ZTogYW55XG4gICAgICAgICAgbmV3VmFsdWU6IGFueVxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCJcbiAgICAgICAgICBvbGRWYWx1ZTogYW55XG4gICAgICB9XG4pXG5cbmV4cG9ydCB0eXBlIElPYmplY3RXaWxsQ2hhbmdlPFQgPSBhbnk+ID1cbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IFRcbiAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiIHwgXCJhZGRcIlxuICAgICAgICAgIG5hbWU6IFByb3BlcnR5S2V5XG4gICAgICAgICAgbmV3VmFsdWU6IGFueVxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogVFxuICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCJcbiAgICAgICAgICBuYW1lOiBQcm9wZXJ0eUtleVxuICAgICAgfVxuXG5jb25zdCBSRU1PVkUgPSBcInJlbW92ZVwiXG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb25cbiAgICBpbXBsZW1lbnRzIElJbnRlcmNlcHRhYmxlPElPYmplY3RXaWxsQ2hhbmdlPiwgSUxpc3RlbmFibGUge1xuICAgIGtleXNBdG9tXzogSUF0b21cbiAgICBjaGFuZ2VMaXN0ZW5lcnNfXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIHByb3h5XzogYW55XG4gICAgaXNQbGFpbk9iamVjdF86IGJvb2xlYW5cbiAgICBhcHBsaWVkQW5ub3RhdGlvbnNfPzogb2JqZWN0XG4gICAgcHJpdmF0ZSBwZW5kaW5nS2V5c186IHVuZGVmaW5lZCB8IE1hcDxQcm9wZXJ0eUtleSwgT2JzZXJ2YWJsZVZhbHVlPGJvb2xlYW4+PlxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyB0YXJnZXRfOiBhbnksXG4gICAgICAgIHB1YmxpYyB2YWx1ZXNfID0gbmV3IE1hcDxQcm9wZXJ0eUtleSwgT2JzZXJ2YWJsZVZhbHVlPGFueT4gfCBDb21wdXRlZFZhbHVlPGFueT4+KCksXG4gICAgICAgIHB1YmxpYyBuYW1lXzogc3RyaW5nLFxuICAgICAgICAvLyBVc2VkIGFueXRpbWUgYW5ub3RhdGlvbiBpcyBub3QgZXhwbGljaXRlbHkgcHJvdmlkZWRcbiAgICAgICAgcHVibGljIGRlZmF1bHRBbm5vdGF0aW9uXzogQW5ub3RhdGlvbiA9IG9ic2VydmFibGUsXG4gICAgICAgIC8vIEJpbmQgYXV0b21hdGljYWxseSBpbmZlcnJlZCBhY3Rpb25zP1xuICAgICAgICBwdWJsaWMgYXV0b0JpbmRfOiBib29sZWFuID0gZmFsc2VcbiAgICApIHtcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8gPSBuZXcgQXRvbShfX0RFVl9fID8gYCR7dGhpcy5uYW1lX30ua2V5c2AgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5c1wiKVxuICAgICAgICAvLyBPcHRpbWl6YXRpb246IHdlIHVzZSB0aGlzIGZyZXF1ZW50bHlcbiAgICAgICAgdGhpcy5pc1BsYWluT2JqZWN0XyA9IGlzUGxhaW5PYmplY3QodGhpcy50YXJnZXRfKVxuICAgICAgICBpZiAoX19ERVZfXyAmJiAhaXNBbm5vdGF0aW9uKHRoaXMuZGVmYXVsdEFubm90YXRpb25fKSkge1xuICAgICAgICAgICAgZGllKGBkZWZhdWx0QW5ub3RhdGlvbiBtdXN0IGJlIHZhbGlkIGFubm90YXRpb25gKVxuICAgICAgICB9XG4gICAgICAgIGlmIChfX0RFVl9fICYmIHR5cGVvZiB0aGlzLmF1dG9CaW5kXyAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIGRpZShgYXV0b0JpbmQgbXVzdCBiZSBib29sZWFuYClcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgLy8gUHJlcGFyZSBzdHJ1Y3R1cmUgZm9yIHRyYWNraW5nIHdoaWNoIGZpZWxkcyB3ZXJlIGFscmVhZHkgYW5ub3RhdGVkXG4gICAgICAgICAgICB0aGlzLmFwcGxpZWRBbm5vdGF0aW9uc18gPSB7fVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5OiBQcm9wZXJ0eUtleSk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlc18uZ2V0KGtleSkhLmdldCgpXG4gICAgfVxuXG4gICAgc2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5OiBQcm9wZXJ0eUtleSwgbmV3VmFsdWUpOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSB0aGlzLnZhbHVlc18uZ2V0KGtleSlcbiAgICAgICAgaWYgKG9ic2VydmFibGUgaW5zdGFuY2VvZiBDb21wdXRlZFZhbHVlKSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlLnNldChuZXdWYWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbnRlcmNlcHRcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElPYmplY3RXaWxsQ2hhbmdlPih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gbnVsbFxuICAgICAgICAgICAgbmV3VmFsdWUgPSAoY2hhbmdlIGFzIGFueSkubmV3VmFsdWVcbiAgICAgICAgfVxuICAgICAgICBuZXdWYWx1ZSA9IChvYnNlcnZhYmxlIGFzIGFueSkucHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSlcblxuICAgICAgICAvLyBub3RpZnkgc3B5ICYgb2JzZXJ2ZXJzXG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeVNweSA9IF9fREVWX18gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZTogSU9iamVjdERpZENoYW5nZSB8IG51bGwgPVxuICAgICAgICAgICAgICAgIG5vdGlmeSB8fCBub3RpZnlTcHlcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiAob2JzZXJ2YWJsZSBhcyBhbnkpLnZhbHVlXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIDsob2JzZXJ2YWJsZSBhcyBPYnNlcnZhYmxlVmFsdWU8YW55Pikuc2V0TmV3VmFsdWVfKG5ld1ZhbHVlKVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGdldF8oa2V5OiBQcm9wZXJ0eUtleSk6IGFueSB7XG4gICAgICAgIGlmIChnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gJiYgIWhhc1Byb3AodGhpcy50YXJnZXRfLCBrZXkpKSB7XG4gICAgICAgICAgICAvLyBLZXkgZG9lc24ndCBleGlzdCB5ZXQsIHN1YnNjcmliZSBmb3IgaXQgaW4gY2FzZSBpdCdzIGFkZGVkIGxhdGVyXG4gICAgICAgICAgICB0aGlzLmhhc18oa2V5KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRhcmdldF9ba2V5XVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IGtleVxuICAgICAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7QW5ub3RhdGlvbnxib29sZWFufSBhbm5vdGF0aW9uIHRydWUgLSBpbmZlciBmcm9tIGRlc2NyaXB0b3IsIGZhbHNlIC0gY29weSBhcyBpc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIHNldF8oa2V5OiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSwgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIC8vIERvbid0IHVzZSAuaGFzKGtleSkgLSB3ZSBjYXJlIGFib3V0IG93blxuICAgICAgICBpZiAoaGFzUHJvcCh0aGlzLnRhcmdldF8sIGtleSkpIHtcbiAgICAgICAgICAgIC8vIEV4aXN0aW5nIHByb3BcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc18uaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBPYnNlcnZhYmxlIChjYW4gYmUgaW50ZXJjZXB0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgLy8gTm9uLW9ic2VydmFibGUgLSBwcm94eVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0aGlzLnRhcmdldF8sIGtleSwgdmFsdWUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5vbi1vYnNlcnZhYmxlXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfW2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOZXcgcHJvcFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kXyhcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgeyB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdEFubm90YXRpb25fLFxuICAgICAgICAgICAgICAgIHByb3h5VHJhcFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHJhcCBmb3IgXCJpblwiXG4gICAgaGFzXyhrZXk6IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICAvLyBTa2lwIGtleSBzdWJzY3JpcHRpb24gb3V0c2lkZSBkZXJpdmF0aW9uXG4gICAgICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMudGFyZ2V0X1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZ0tleXNfIHx8PSBuZXcgTWFwKClcbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5wZW5kaW5nS2V5c18uZ2V0KGtleSlcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgZW50cnkgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKFxuICAgICAgICAgICAgICAgIGtleSBpbiB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7c3RyaW5naWZ5S2V5KGtleSl9P2AgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5P1wiLFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdLZXlzXy5zZXQoa2V5LCBlbnRyeSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cnkuZ2V0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBrZXlcbiAgICAgKiBAcGFyYW0ge0Fubm90YXRpb258Ym9vbGVhbn0gYW5ub3RhdGlvbiB0cnVlIC0gaW5mZXIgZnJvbSBvYmplY3Qgb3IgaXQncyBwcm90b3R5cGUsIGZhbHNlIC0gaWdub3JlXG4gICAgICovXG4gICAgbWFrZV8oa2V5OiBQcm9wZXJ0eUtleSwgYW5ub3RhdGlvbjogQW5ub3RhdGlvbiB8IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgIGFubm90YXRpb24gPSB0aGlzLmluZmVyQW5ub3RhdGlvbl8oa2V5KVxuICAgICAgICB9XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QW5ub3RhYmxlKHRoaXMsIGFubm90YXRpb24sIGtleSlcbiAgICAgICAgYW5ub3RhdGlvbi5tYWtlXyh0aGlzLCBrZXkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eUtleX0ga2V5XG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eURlc2NyaXB0b3J9IGRlc2NyaXB0b3JcbiAgICAgKiBAcGFyYW0ge0Fubm90YXRpb258Ym9vbGVhbn0gYW5ub3RhdGlvbiB0cnVlIC0gaW5mZXIgZnJvbSBkZXNjcmlwdG9yLCBmYWxzZSAtIGNvcHkgYXMgaXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByb3h5VHJhcCB3aGV0aGVyIGl0J3MgY2FsbGVkIGZyb20gcHJveHkgdHJhcFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufG51bGx9IHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZSAocHJveHlUcmFwICsgbm9uLWNvbmZpZ3VyYWJsZSksIG51bGwgd2hlbiBjYW5jZWxsZWQgYnkgaW50ZXJjZXB0b3JcbiAgICAgKi9cbiAgICBleHRlbmRfKFxuICAgICAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgICAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgICAgIGFubm90YXRpb246IEFubm90YXRpb24gfCBib29sZWFuLFxuICAgICAgICBwcm94eVRyYXA6IGJvb2xlYW4gPSBmYWxzZVxuICAgICk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgIGFubm90YXRpb24gPSBpbmZlckFubm90YXRpb25Gcm9tRGVzY3JpcHRvcihcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLFxuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdEFubm90YXRpb25fLFxuICAgICAgICAgICAgICAgIHRoaXMuYXV0b0JpbmRfXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZpbmVQcm9wZXJ0eV8oa2V5LCBkZXNjcmlwdG9yLCBwcm94eVRyYXApXG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QW5ub3RhYmxlKHRoaXMsIGFubm90YXRpb24sIGtleSlcbiAgICAgICAgY29uc3Qgb3V0Y29tZSA9IGFubm90YXRpb24uZXh0ZW5kXyh0aGlzLCBrZXksIGRlc2NyaXB0b3IsIHByb3h5VHJhcClcbiAgICAgICAgaWYgKG91dGNvbWUpIHtcbiAgICAgICAgICAgIHJlY29yZEFubm90YXRpb25BcHBsaWVkKHRoaXMsIGFubm90YXRpb24sIGtleSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0Y29tZVxuICAgIH1cblxuICAgIGluZmVyQW5ub3RhdGlvbl8oa2V5OiBQcm9wZXJ0eUtleSk6IEFubm90YXRpb24gfCBmYWxzZSB7XG4gICAgICAgIC8vIEluaGVyaXRlZCBpcyBmaW5lIC0gYW5ub3RhdGlvbiBjYW5ub3QgZGlmZmVyIGluIHN1YmNsYXNzXG4gICAgICAgIGxldCBhbm5vdGF0aW9uID0gdGhpcy50YXJnZXRfW2luZmVycmVkQW5ub3RhdGlvbnNTeW1ib2xdPy5nZXQoa2V5KVxuICAgICAgICBpZiAoYW5ub3RhdGlvbikgcmV0dXJuIGFubm90YXRpb25cblxuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMudGFyZ2V0X1xuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBnZXREZXNjcmlwdG9yKGN1cnJlbnQsIGtleSlcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbiA9IGluZmVyQW5ub3RhdGlvbkZyb21EZXNjcmlwdG9yKFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRBbm5vdGF0aW9uXyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRvQmluZF9cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3VycmVudClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vdCBmb3VuZCAoZmFsc2UgbWVhbnMgaWdub3JlKVxuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkaWUoMSwgXCJ0cnVlXCIsIGtleSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhY2hlIHRoZSBhbm5vdGF0aW9uLlxuICAgICAgICAvLyBOb3RlIHdlIGNhbiBkbyB0aGlzIG9ubHkgYmVjYXVzZSBhbm5vdGF0aW9uIGFuZCBmaWVsZCBjYW4ndCBjaGFuZ2UuXG4gICAgICAgIGlmICghdGhpcy5pc1BsYWluT2JqZWN0Xykge1xuICAgICAgICAgICAgLy8gV2UgY291bGQgYWxzbyBwbGFjZSBpdCBvbiBmdXJ0aGVzdCBwcm90bywgc2hvdWRuJ3QgbWF0dGVyXG4gICAgICAgICAgICBjb25zdCBjbG9zZXN0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcy50YXJnZXRfKVxuICAgICAgICAgICAgaWYgKCFoYXNQcm9wKGNsb3Nlc3RQcm90bywgaW5mZXJyZWRBbm5vdGF0aW9uc1N5bWJvbCkpIHtcbiAgICAgICAgICAgICAgICBhZGRIaWRkZW5Qcm9wKGNsb3Nlc3RQcm90bywgaW5mZXJyZWRBbm5vdGF0aW9uc1N5bWJvbCwgbmV3IE1hcCgpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xvc2VzdFByb3RvW2luZmVycmVkQW5ub3RhdGlvbnNTeW1ib2xdLnNldChrZXksIGFubm90YXRpb24pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYW5ub3RhdGlvblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IGtleVxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlEZXNjcmlwdG9yfSBkZXNjcmlwdG9yXG4gICAgICogQHBhcmFtIHtib29sZWFufSBwcm94eVRyYXAgd2hldGhlciBpdCdzIGNhbGxlZCBmcm9tIHByb3h5IHRyYXBcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxudWxsfSB0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9uIGZhaWx1cmUgKHByb3h5VHJhcCArIG5vbi1jb25maWd1cmFibGUpLCBudWxsIHdoZW4gY2FuY2VsbGVkIGJ5IGludGVyY2VwdG9yXG4gICAgICovXG4gICAgZGVmaW5lUHJvcGVydHlfKFxuICAgICAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgICAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpXG5cbiAgICAgICAgICAgIC8vIERlbGV0ZVxuICAgICAgICAgICAgY29uc3QgZGVsZXRlT3V0Y29tZSA9IHRoaXMuZGVsZXRlXyhrZXkpXG4gICAgICAgICAgICBpZiAoIWRlbGV0ZU91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIG9yIGludGVyY2VwdGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZU91dGNvbWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQUREIGludGVyY2VwdG9yXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElPYmplY3RXaWxsQ2hhbmdlPih0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IGRlc2NyaXB0b3IudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmV3VmFsdWUgfSA9IGNoYW5nZSBhcyBhbnlcbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRlc2NyaXB0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVmaW5lXG4gICAgICAgICAgICBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5LCBkZXNjcmlwdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5LCBkZXNjcmlwdG9yKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3RpZnlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCBkZXNjcmlwdG9yLnZhbHVlKVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgLy8gSWYgb3JpZ2luYWwgZGVzY3JpcHRvciBiZWNvbWVzIHJlbGV2YW50LCBtb3ZlIHRoaXMgdG8gYW5ub3RhdGlvbiBkaXJlY3RseVxuICAgIGRlZmluZU9ic2VydmFibGVQcm9wZXJ0eV8oXG4gICAgICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgICAgIHZhbHVlOiBhbnksXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8YW55PixcbiAgICAgICAgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2VcbiAgICApOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKClcblxuICAgICAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgICAgICBjb25zdCBkZWxldGVPdXRjb21lID0gdGhpcy5kZWxldGVfKGtleSlcbiAgICAgICAgICAgIGlmICghZGVsZXRlT3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIC8vIEZhaWx1cmUgb3IgaW50ZXJjZXB0ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlT3V0Y29tZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBREQgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU9iamVjdFdpbGxDaGFuZ2U+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgIHZhbHVlID0gKGNoYW5nZSBhcyBhbnkpLm5ld1ZhbHVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZERlc2NyaXB0b3IgPSBnZXRDYWNoZWRPYnNlcnZhYmxlUHJvcERlc2NyaXB0b3Ioa2V5KVxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9ycyA/IHRoaXMuaXNQbGFpbk9iamVjdF8gOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBjYWNoZWREZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGNhY2hlZERlc2NyaXB0b3Iuc2V0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZVxuICAgICAgICAgICAgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUoXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9YCA6IFwiT2JzZXJ2YWJsZU9iamVjdC5rZXlcIixcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICB0aGlzLnZhbHVlc18uc2V0KGtleSwgb2JzZXJ2YWJsZSlcblxuICAgICAgICAgICAgLy8gTm90aWZ5ICh2YWx1ZSBwb3NzaWJseSBjaGFuZ2VkIGJ5IE9ic2VydmFibGVWYWx1ZSlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCBvYnNlcnZhYmxlLnZhbHVlXylcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVuZEJhdGNoKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8vIElmIG9yaWdpbmFsIGRlc2NyaXB0b3IgYmVjb21lcyByZWxldmFudCwgbW92ZSB0aGlzIHRvIGFubm90YXRpb24gZGlyZWN0bHlcbiAgICBkZWZpbmVDb21wdXRlZFByb3BlcnR5XyhcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgb3B0aW9uczogSUNvbXB1dGVkVmFsdWVPcHRpb25zPGFueT4sXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpXG5cbiAgICAgICAgICAgIC8vIERlbGV0ZVxuICAgICAgICAgICAgY29uc3QgZGVsZXRlT3V0Y29tZSA9IHRoaXMuZGVsZXRlXyhrZXkpXG4gICAgICAgICAgICBpZiAoIWRlbGV0ZU91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIG9yIGludGVyY2VwdGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZU91dGNvbWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQUREIGludGVyY2VwdG9yXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElPYmplY3RXaWxsQ2hhbmdlPih0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHJldHVybiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLm5hbWUgfHw9IF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS4ke2tleS50b1N0cmluZygpfWAgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5XCJcbiAgICAgICAgICAgIG9wdGlvbnMuY29udGV4dCA9IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0X1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkRGVzY3JpcHRvciA9IGdldENhY2hlZE9ic2VydmFibGVQcm9wRGVzY3JpcHRvcihrZXkpXG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZ2xvYmFsU3RhdGUuc2FmZURlc2NyaXB0b3JzID8gdGhpcy5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0OiBjYWNoZWREZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGNhY2hlZERlc2NyaXB0b3Iuc2V0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZVxuICAgICAgICAgICAgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy52YWx1ZXNfLnNldChrZXksIG5ldyBDb21wdXRlZFZhbHVlKG9wdGlvbnMpKVxuXG4gICAgICAgICAgICAvLyBOb3RpZnlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCB1bmRlZmluZWQpXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBrZXlcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5RGVzY3JpcHRvcn0gZGVzY3JpcHRvclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIGRlbGV0ZV8oa2V5OiBQcm9wZXJ0eUtleSwgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIC8vIE5vIHN1Y2ggcHJvcFxuICAgICAgICBpZiAoIWhhc1Byb3AodGhpcy50YXJnZXRfLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW50ZXJjZXB0XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJT2JqZWN0V2lsbENoYW5nZT4odGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICB0eXBlOiBSRU1PVkVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvLyBDYW5jZWxsZWRcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMudmFsdWVzXy5nZXQoa2V5KVxuICAgICAgICAgICAgLy8gVmFsdWUgbmVlZGVkIGZvciBzcGllcy9saXN0ZW5lcnNcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgLy8gT3B0aW1pemF0aW9uOiBkb24ndCBwdWxsIHRoZSB2YWx1ZSB1bmxlc3Mgd2Ugd2lsbCBuZWVkIGl0XG4gICAgICAgICAgICBpZiAoIW9ic2VydmFibGUgJiYgKG5vdGlmeSB8fCBub3RpZnlTcHkpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBnZXREZXNjcmlwdG9yKHRoaXMudGFyZ2V0Xywga2V5KT8udmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlbGV0ZSBwcm9wIChkbyBmaXJzdCwgbWF5IGZhaWwpXG4gICAgICAgICAgICBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRhcmdldF9ba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWxsb3cgcmUtYW5ub3RhdGluZyB0aGlzIGZpZWxkXG4gICAgICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFwcGxpZWRBbm5vdGF0aW9uc18hW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsZWFyIG9ic2VydmFibGVcbiAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNfLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICAgICAgLy8gZm9yIGNvbXB1dGVkLCB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIE9ic2VydmFibGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9ic2VydmFibGUudmFsdWVfXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5vdGlmeTogYXV0b3J1bigoKSA9PiBvYmpba2V5XSksIHNlZSAjMTc5NlxuICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNoYW5nZWQob2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vdGlmeSBcImtleXMvZW50cmllcy92YWx1ZXNcIiBvYnNlcnZlcnNcbiAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuXG4gICAgICAgICAgICAvLyBOb3RpZnkgXCJoYXNcIiBvYnNlcnZlcnNcbiAgICAgICAgICAgIC8vIFwiaW5cIiBhcyBpdCBtYXkgc3RpbGwgZXhpc3QgaW4gcHJvdG9cbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0tleXNfPy5nZXQoa2V5KT8uc2V0KGtleSBpbiB0aGlzLnRhcmdldF8pXG5cbiAgICAgICAgICAgIC8vIE5vdGlmeSBzcGllcy9saXN0ZW5lcnNcbiAgICAgICAgICAgIGlmIChub3RpZnkgfHwgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJT2JqZWN0RGlkQ2hhbmdlID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBSRU1PVkUsXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0XyxcbiAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmeSkgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydEVuZCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlcyB0aGlzIG9iamVjdC4gVHJpZ2dlcnMgZm9yIHRoZSBldmVudHMgJ2FkZCcsICd1cGRhdGUnIGFuZCAnZGVsZXRlJy5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9vYnNlcnZlXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcbiAgICAgKi9cbiAgICBvYnNlcnZlXyhjYWxsYmFjazogKGNoYW5nZXM6IElPYmplY3REaWRDaGFuZ2UpID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpXG4gICAgICAgICAgICBkaWUoXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IHRoZSBmaXJlIGltbWVkaWF0ZWx5IHByb3BlcnR5IGZvciBvYnNlcnZhYmxlIG9iamVjdHMuXCIpXG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGNhbGxiYWNrKVxuICAgIH1cblxuICAgIGludGVyY2VwdF8oaGFuZGxlcik6IExhbWJkYSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpXG4gICAgfVxuXG4gICAgbm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5OiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSkge1xuICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICBpZiAobm90aWZ5IHx8IG5vdGlmeVNweSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJT2JqZWN0RGlkQ2hhbmdlIHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgfSBhcyBjb25zdClcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIGlmIChub3RpZnkpIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHNweVJlcG9ydEVuZCgpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBlbmRpbmdLZXlzXz8uZ2V0KGtleSk/LnNldCh0cnVlKVxuXG4gICAgICAgIC8vIE5vdGlmeSBcImtleXMvZW50cmllcy92YWx1ZXNcIiBvYnNlcnZlcnNcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8ucmVwb3J0Q2hhbmdlZCgpXG4gICAgfVxuXG4gICAgb3duS2V5c18oKTogUHJvcGVydHlLZXlbXSB7XG4gICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIG93bktleXModGhpcy50YXJnZXRfKVxuICAgIH1cblxuICAgIGtleXNfKCk6IFByb3BlcnR5S2V5W10ge1xuICAgICAgICAvLyBSZXR1cm5zIGVudW1lcmFibGUgJiYgb3duLCBidXQgdW5mb3J0dW5hdGVseSBrZXlzQXRvbSB3aWxsIHJlcG9ydCBvbiBBTlkga2V5IGNoYW5nZS5cbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gd2F5IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gT2JqZWN0LmtleXMob2JqZWN0KSBhbmQgUmVmbGVjdC5vd25LZXlzKG9iamVjdCkgLSBib3RoIGFyZSBoYW5kbGVkIGJ5IG93bktleXMgdHJhcC5cbiAgICAgICAgLy8gV2UgY2FuIGVpdGhlciBvdmVyLXJlcG9ydCBpbiBPYmplY3Qua2V5cyhvYmplY3QpIG9yIHVuZGVyLXJlcG9ydCBpbiBSZWZsZWN0Lm93bktleXMob2JqZWN0KVxuICAgICAgICAvLyBXZSBjaG9vc2UgdG8gb3Zlci1yZXBvcnQgaW4gT2JqZWN0LmtleXMob2JqZWN0KSwgYmVjYXVzZTpcbiAgICAgICAgLy8gLSB0eXBpY2FsbHkgaXQncyB1c2VkIHdpdGggc2ltcGxlIGRhdGEgb2JqZWN0c1xuICAgICAgICAvLyAtIHdoZW4gc3ltYm9saWMvbm9uLWVudW1lcmFibGUga2V5cyBhcmUgcmVsZXZhbnQgUmVmbGVjdC5vd25LZXlzIHdvcmtzIGFzIGV4cGVjdGVkXG4gICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudGFyZ2V0XylcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgJG1vYng6IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNPYnNlcnZhYmxlT2JqZWN0KFxuICAgIHRhcmdldDogYW55LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgaWYgKF9fREVWX18gJiYgb3B0aW9ucyAmJiBpc09ic2VydmFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBkaWUoYE9wdGlvbnMgY2FuJ3QgYmUgcHJvdmlkZWQgZm9yIGFscmVhZHkgb2JzZXJ2YWJsZSBvYmplY3RzLmApXG4gICAgfVxuXG4gICAgaWYgKGhhc1Byb3AodGFyZ2V0LCAkbW9ieCkpIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgIShnZXRBZG1pbmlzdHJhdGlvbih0YXJnZXQpIGluc3RhbmNlb2YgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKSkge1xuICAgICAgICAgICAgZGllKFxuICAgICAgICAgICAgICAgIGBDYW5ub3QgY29udmVydCAnJHtnZXREZWJ1Z05hbWUodGFyZ2V0KX0nIGludG8gb2JzZXJ2YWJsZSBvYmplY3Q6YCArXG4gICAgICAgICAgICAgICAgICAgIGBcXG5UaGUgdGFyZ2V0IGlzIGFscmVhZHkgb2JzZXJ2YWJsZSBvZiBkaWZmZXJlbnQgdHlwZS5gICtcbiAgICAgICAgICAgICAgICAgICAgYFxcbkV4dGVuZGluZyBidWlsdGlucyBpcyBub3Qgc3VwcG9ydGVkLmBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuXG4gICAgaWYgKF9fREVWX18gJiYgIU9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KSlcbiAgICAgICAgZGllKFwiQ2Fubm90IG1ha2UgdGhlIGRlc2lnbmF0ZWQgb2JqZWN0IG9ic2VydmFibGU7IGl0IGlzIG5vdCBleHRlbnNpYmxlXCIpXG5cbiAgICBjb25zdCBuYW1lID1cbiAgICAgICAgb3B0aW9ucz8ubmFtZSA/P1xuICAgICAgICAoX19ERVZfX1xuICAgICAgICAgICAgPyBgJHtcbiAgICAgICAgICAgICAgICAgIGlzUGxhaW5PYmplY3QodGFyZ2V0KSA/IFwiT2JzZXJ2YWJsZU9iamVjdFwiIDogdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgICAgfUAke2dldE5leHRJZCgpfWBcbiAgICAgICAgICAgIDogXCJPYnNlcnZhYmxlT2JqZWN0XCIpXG5cbiAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIG5ldyBNYXAoKSxcbiAgICAgICAgU3RyaW5nKG5hbWUpLFxuICAgICAgICBnZXRBbm5vdGF0aW9uRnJvbU9wdGlvbnMob3B0aW9ucyksXG4gICAgICAgIG9wdGlvbnM/LmF1dG9CaW5kXG4gICAgKVxuXG4gICAgYWRkSGlkZGVuUHJvcCh0YXJnZXQsICRtb2J4LCBhZG0pXG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG5cbmNvbnN0IGlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcbiAgICBcIk9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblwiLFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblxuKVxuXG5mdW5jdGlvbiBnZXRDYWNoZWRPYnNlcnZhYmxlUHJvcERlc2NyaXB0b3Ioa2V5KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgZGVzY3JpcHRvckNhY2hlW2tleV0gfHxcbiAgICAgICAgKGRlc2NyaXB0b3JDYWNoZVtrZXldID0ge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWyRtb2J4XS5nZXRPYnNlcnZhYmxlUHJvcFZhbHVlXyhrZXkpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJG1vYnhdLnNldE9ic2VydmFibGVQcm9wVmFsdWVfKGtleSwgdmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoaXNPYmplY3QodGhpbmcpKSB7XG4gICAgICAgIHJldHVybiBpc09ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbigodGhpbmcgYXMgYW55KVskbW9ieF0pXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgYW5ub3RhdGlvbjogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5XG4pIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBhZG0uYXBwbGllZEFubm90YXRpb25zXyFba2V5XSA9IGFubm90YXRpb25cbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFwcGxpZWQgZGVjb3JhdG9yIGFubm90YXRpb24gc28gd2UgZG9uJ3QgdHJ5IHRvIGFwcGx5IGl0IGFnYWluIGluIHN1YmNsYXNzIGNvbnN0cnVjdG9yXG4gICAgZGVsZXRlIGFkbS50YXJnZXRfW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXT8uW2tleV1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0QW5ub3RhYmxlKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGFubm90YXRpb246IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleVxuKSB7XG4gICAgLy8gVmFsaWQgYW5ub3RhdGlvblxuICAgIGlmIChfX0RFVl9fICYmICFpc0Fubm90YXRpb24oYW5ub3RhdGlvbikpIHtcbiAgICAgICAgZGllKGBDYW5ub3QgYW5ub3RhdGUgJyR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfSc6IEludmFsaWQgYW5ub3RhdGlvbi5gKVxuICAgIH1cblxuICAgIC8qXG4gICAgLy8gQ29uZmlndXJhYmxlLCBub3Qgc2VhbGVkLCBub3QgZnJvemVuXG4gICAgLy8gUG9zc2libHkgbm90IG5lZWRlZCwganVzdCBhIGxpdHRsZSBiZXR0ZXIgZXJyb3IgdGhlbiB0aGUgb25lIHRocm93biBieSBlbmdpbmUuXG4gICAgLy8gQ2FzZXMgd2hlcmUgdGhpcyB3b3VsZCBiZSB1c2VmdWwgdGhlIG1vc3QgKHN1YmNsYXNzIGZpZWxkIGluaXRpYWxpemVyKSBhcmUgbm90IGludGVyY2VwdGFibGUgYnkgdGhpcy5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBjb25zdCBjb25maWd1cmFibGUgPSBnZXREZXNjcmlwdG9yKGFkbS50YXJnZXRfLCBrZXkpPy5jb25maWd1cmFibGVcbiAgICAgICAgY29uc3QgZnJvemVuID0gT2JqZWN0LmlzRnJvemVuKGFkbS50YXJnZXRfKVxuICAgICAgICBjb25zdCBzZWFsZWQgPSBPYmplY3QuaXNTZWFsZWQoYWRtLnRhcmdldF8pXG4gICAgICAgIGlmICghY29uZmlndXJhYmxlIHx8IGZyb3plbiB8fCBzZWFsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGAke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX1gXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ZWRBbm5vdGF0aW9uVHlwZSA9IGFubm90YXRpb24uYW5ub3RhdGlvblR5cGVfXG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBgQ2Fubm90IGFwcGx5ICcke3JlcXVlc3RlZEFubm90YXRpb25UeXBlfScgdG8gJyR7ZmllbGROYW1lfSc6YFxuICAgICAgICAgICAgaWYgKGZyb3plbikge1xuICAgICAgICAgICAgICAgIGVycm9yICs9IGBcXG5PYmplY3QgaXMgZnJvemVuLmBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgICAgICAgICBlcnJvciArPSBgXFxuT2JqZWN0IGlzIHNlYWxlZC5gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgICAgICAgIGVycm9yICs9IGBcXG5wcm9wZXJ0eSBpcyBub3QgY29uZmlndXJhYmxlLmBcbiAgICAgICAgICAgICAgICAvLyBNZW50aW9uIG9ubHkgaWYgY2F1c2VkIGJ5IHVzIHRvIGF2b2lkIGNvbmZ1c2lvblxuICAgICAgICAgICAgICAgIGlmIChoYXNQcm9wKGFkbS5hcHBsaWVkQW5ub3RhdGlvbnMhLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yICs9IGBcXG5UbyBwcmV2ZW50IGFjY2lkZW50YWwgcmUtZGVmaW5pdGlvbiBvZiBhIGZpZWxkIGJ5IGEgc3ViY2xhc3MsIGBcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKz0gYGFsbCBhbm5vdGF0ZWQgZmllbGRzIG9mIG5vbi1wbGFpbiBvYmplY3RzIChjbGFzc2VzKSBhcmUgbm90IGNvbmZpZ3VyYWJsZS5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGllKGVycm9yKVxuICAgICAgICB9XG4gICAgfVxuICAgICovXG5cbiAgICAvLyBOb3QgYW5ub3RhdGVkXG4gICAgaWYgKF9fREVWX18gJiYgIWlzT3ZlcnJpZGUoYW5ub3RhdGlvbikgJiYgaGFzUHJvcChhZG0uYXBwbGllZEFubm90YXRpb25zXyEsIGtleSkpIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWBcbiAgICAgICAgY29uc3QgY3VycmVudEFubm90YXRpb25UeXBlID0gYWRtLmFwcGxpZWRBbm5vdGF0aW9uc18hW2tleV0uYW5ub3RhdGlvblR5cGVfXG4gICAgICAgIGNvbnN0IHJlcXVlc3RlZEFubm90YXRpb25UeXBlID0gYW5ub3RhdGlvbi5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHtyZXF1ZXN0ZWRBbm5vdGF0aW9uVHlwZX0nIHRvICcke2ZpZWxkTmFtZX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG5UaGUgZmllbGQgaXMgYWxyZWFkeSBhbm5vdGF0ZWQgd2l0aCAnJHtjdXJyZW50QW5ub3RhdGlvblR5cGV9Jy5gICtcbiAgICAgICAgICAgICAgICBgXFxuUmUtYW5ub3RhdGluZyBmaWVsZHMgaXMgbm90IGFsbG93ZWQuYCArXG4gICAgICAgICAgICAgICAgYFxcblVzZSAnb3ZlcnJpZGUnIGFubm90YXRpb24gZm9yIG1ldGhvZHMgb3ZlcnJpZGVuIGJ5IHN1YmNsYXNzLmBcbiAgICAgICAgKVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgZ2V0TmV4dElkLFxuICAgIGFkZEhpZGRlbkZpbmFsUHJvcCxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kLFxuICAgIG1ha2VJdGVyYWJsZSxcbiAgICBhZGRIaWRkZW5Qcm9wLFxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLFxuICAgICRtb2J4LFxuICAgIGFycmF5RXh0ZW5zaW9ucyxcbiAgICBJRW5oYW5jZXIsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBkZWZpbmVQcm9wZXJ0eVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vKipcbiAqIFRoaXMgYXJyYXkgYnVmZmVyIGNvbnRhaW5zIHR3byBsaXN0cyBvZiBwcm9wZXJ0aWVzLCBzbyB0aGF0IGFsbCBhcnJheXNcbiAqIGNhbiByZWN5Y2xlIHRoZWlyIHByb3BlcnR5IGRlZmluaXRpb25zLCB3aGljaCBzaWduaWZpY2FudGx5IGltcHJvdmVzIHBlcmZvcm1hbmNlIG9mIGNyZWF0aW5nXG4gKiBwcm9wZXJ0aWVzIG9uIHRoZSBmbHkuXG4gKi9cbmxldCBPQlNFUlZBQkxFX0FSUkFZX0JVRkZFUl9TSVpFID0gMFxuXG4vLyBUeXBlc2NyaXB0IHdvcmthcm91bmQgdG8gbWFrZSBzdXJlIE9ic2VydmFibGVBcnJheSBleHRlbmRzIEFycmF5XG5jbGFzcyBTdHViQXJyYXkge31cbmZ1bmN0aW9uIGluaGVyaXQoY3RvciwgcHJvdG8pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihjdG9yLnByb3RvdHlwZSwgcHJvdG8pXG4gICAgfSBlbHNlIGlmIChjdG9yLnByb3RvdHlwZS5fX3Byb3RvX18gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdG9yLnByb3RvdHlwZS5fX3Byb3RvX18gPSBwcm90b1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0b3IucHJvdG90eXBlID0gcHJvdG9cbiAgICB9XG59XG5pbmhlcml0KFN0dWJBcnJheSwgQXJyYXkucHJvdG90eXBlKVxuXG4vLyBXZWV4IHByb3RvIGZyZWV6ZSBwcm90ZWN0aW9uIHdhcyBoZXJlLFxuLy8gYnV0IGl0IGlzIHVuY2xlYXIgd2h5IHRoZSBoYWNrIGlzIG5lZWQgYXMgTW9iWCBuZXZlciBjaGFuZ2VkIHRoZSBwcm90b3R5cGVcbi8vIGFueXdheSwgc28gcmVtb3ZlZCBpdCBpbiBWNlxuXG5jbGFzcyBMZWdhY3lPYnNlcnZhYmxlQXJyYXk8VD4gZXh0ZW5kcyBTdHViQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBpbml0aWFsVmFsdWVzOiBUW10gfCB1bmRlZmluZWQsXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4sXG4gICAgICAgIG5hbWUgPSBfX0RFVl9fID8gXCJPYnNlcnZhYmxlQXJyYXlAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZUFycmF5XCIsXG4gICAgICAgIG93bmVkID0gZmFsc2VcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKVxuXG4gICAgICAgIGNvbnN0IGFkbSA9IG5ldyBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbihuYW1lLCBlbmhhbmNlciwgb3duZWQsIHRydWUpXG4gICAgICAgIGFkbS5wcm94eV8gPSB0aGlzIGFzIGFueVxuICAgICAgICBhZGRIaWRkZW5GaW5hbFByb3AodGhpcywgJG1vYngsIGFkbSlcblxuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlcyAmJiBpbml0aWFsVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQodHJ1ZSlcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlV2l0aEFycmF5KDAsIDAsIGluaXRpYWxWYWx1ZXMpXG4gICAgICAgICAgICBhbGxvd1N0YXRlQ2hhbmdlc0VuZChwcmV2KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uY2F0KC4uLmFycmF5czogVFtdW10pOiBUW10ge1xuICAgICAgICA7KHRoaXNbJG1vYnhdIGFzIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKS5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFxuICAgICAgICAgICAgKHRoaXMgYXMgYW55KS5zbGljZSgpLFxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBhcnJheXMubWFwKGEgPT4gKGlzT2JzZXJ2YWJsZUFycmF5KGEpID8gYS5zbGljZSgpIDogYSkpXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodGhpc1skbW9ieF0gYXMgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24pLmdldEFycmF5TGVuZ3RoXygpXG4gICAgfVxuXG4gICAgc2V0IGxlbmd0aChuZXdMZW5ndGg6IG51bWJlcikge1xuICAgICAgICA7KHRoaXNbJG1vYnhdIGFzIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKS5zZXRBcnJheUxlbmd0aF8obmV3TGVuZ3RoKVxuICAgIH1cblxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQXJyYXlcIlxuICAgIH1cblxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gMFxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SW5kZXggPCBzZWxmLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWU6IHNlbGZbbmV4dEluZGV4KytdLCBkb25lOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG59XG5cbk9iamVjdC5lbnRyaWVzKGFycmF5RXh0ZW5zaW9ucykuZm9yRWFjaCgoW3Byb3AsIGZuXSkgPT4ge1xuICAgIGlmIChwcm9wICE9PSBcImNvbmNhdFwiKSBhZGRIaWRkZW5Qcm9wKExlZ2FjeU9ic2VydmFibGVBcnJheS5wcm90b3R5cGUsIHByb3AsIGZuKVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlFbnRyeURlc2NyaXB0b3IoaW5kZXg6IG51bWJlcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbJG1vYnhdLmdldF8oaW5kZXgpXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzWyRtb2J4XS5zZXRfKGluZGV4LCB2YWx1ZSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlCdWZmZXJJdGVtKGluZGV4OiBudW1iZXIpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShMZWdhY3lPYnNlcnZhYmxlQXJyYXkucHJvdG90eXBlLCBcIlwiICsgaW5kZXgsIGNyZWF0ZUFycmF5RW50cnlEZXNjcmlwdG9yKGluZGV4KSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2VydmVBcnJheUJ1ZmZlcihtYXg6IG51bWJlcikge1xuICAgIGlmIChtYXggPiBPQlNFUlZBQkxFX0FSUkFZX0JVRkZFUl9TSVpFKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRTsgaW5kZXggPCBtYXggKyAxMDA7IGluZGV4KyspXG4gICAgICAgICAgICBjcmVhdGVBcnJheUJ1ZmZlckl0ZW0oaW5kZXgpXG4gICAgICAgIE9CU0VSVkFCTEVfQVJSQVlfQlVGRkVSX1NJWkUgPSBtYXhcbiAgICB9XG59XG5cbnJlc2VydmVBcnJheUJ1ZmZlcigxMDAwKVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGVnYWN5QXJyYXk8VD4oXG4gICAgaW5pdGlhbFZhbHVlczogVFtdIHwgdW5kZWZpbmVkLFxuICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4sXG4gICAgbmFtZT86IHN0cmluZ1xuKTogSU9ic2VydmFibGVBcnJheTxUPiB7XG4gICAgcmV0dXJuIG5ldyBMZWdhY3lPYnNlcnZhYmxlQXJyYXkoaW5pdGlhbFZhbHVlcywgZW5oYW5jZXIsIG5hbWUpIGFzIGFueVxufVxuIiwiaW1wb3J0IHsgaXNBY3Rpb24gfSBmcm9tIFwiLi4vYXBpL2FjdGlvblwiXG5pbXBvcnQge1xuICAgICRtb2J4LFxuICAgIElEZXBUcmVlTm9kZSxcbiAgICBpc0F0b20sXG4gICAgaXNDb21wdXRlZFZhbHVlLFxuICAgIGlzT2JzZXJ2YWJsZUFycmF5LFxuICAgIGlzT2JzZXJ2YWJsZU1hcCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgaXNSZWFjdGlvbixcbiAgICBpc09ic2VydmFibGVTZXQsXG4gICAgZGllLFxuICAgIGlzRnVuY3Rpb25cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEF0b20odGhpbmc6IGFueSwgcHJvcGVydHk/OiBQcm9wZXJ0eUtleSk6IElEZXBUcmVlTm9kZSB7XG4gICAgaWYgKHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJiB0aGluZyAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkodGhpbmcpKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkgZGllKDIzKVxuICAgICAgICAgICAgcmV0dXJuICh0aGluZyBhcyBhbnkpWyRtb2J4XS5hdG9tX1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc09ic2VydmFibGVTZXQodGhpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaW5nIGFzIGFueSlbJG1vYnhdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU1hcCh0aGluZykpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpbmcua2V5c0F0b21fXG4gICAgICAgICAgICBjb25zdCBvYnNlcnZhYmxlID0gdGhpbmcuZGF0YV8uZ2V0KHByb3BlcnR5KSB8fCB0aGluZy5oYXNNYXBfLmdldChwcm9wZXJ0eSlcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSkgZGllKDI1LCBwcm9wZXJ0eSwgZ2V0RGVidWdOYW1lKHRoaW5nKSlcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5ICYmICF0aGluZ1skbW9ieF0pIHRoaW5nW3Byb3BlcnR5XSAvLyBTZWUgIzEwNzJcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh0aGluZykpIHtcbiAgICAgICAgICAgIGlmICghcHJvcGVydHkpIHJldHVybiBkaWUoMjYpXG4gICAgICAgICAgICBjb25zdCBvYnNlcnZhYmxlID0gKHRoaW5nIGFzIGFueSlbJG1vYnhdLnZhbHVlc18uZ2V0KHByb3BlcnR5KVxuICAgICAgICAgICAgaWYgKCFvYnNlcnZhYmxlKSBkaWUoMjcsIHByb3BlcnR5LCBnZXREZWJ1Z05hbWUodGhpbmcpKVxuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBdG9tKHRoaW5nKSB8fCBpc0NvbXB1dGVkVmFsdWUodGhpbmcpIHx8IGlzUmVhY3Rpb24odGhpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpbmdcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGluZykpIHtcbiAgICAgICAgaWYgKGlzUmVhY3Rpb24odGhpbmdbJG1vYnhdKSkge1xuICAgICAgICAgICAgLy8gZGlzcG9zZXIgZnVuY3Rpb25cbiAgICAgICAgICAgIHJldHVybiB0aGluZ1skbW9ieF1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkaWUoMjgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZG1pbmlzdHJhdGlvbih0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZykge1xuICAgIGlmICghdGhpbmcpIGRpZSgyOSlcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGdldEFkbWluaXN0cmF0aW9uKGdldEF0b20odGhpbmcsIHByb3BlcnR5KSlcbiAgICBpZiAoaXNBdG9tKHRoaW5nKSB8fCBpc0NvbXB1dGVkVmFsdWUodGhpbmcpIHx8IGlzUmVhY3Rpb24odGhpbmcpKSByZXR1cm4gdGhpbmdcbiAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSB8fCBpc09ic2VydmFibGVTZXQodGhpbmcpKSByZXR1cm4gdGhpbmdcbiAgICBpZiAodGhpbmdbJG1vYnhdKSByZXR1cm4gdGhpbmdbJG1vYnhdXG4gICAgZGllKDI0LCB0aGluZylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlYnVnTmFtZSh0aGluZzogYW55LCBwcm9wZXJ0eT86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IG5hbWVkXG4gICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSlcbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uKHRoaW5nKSkge1xuICAgICAgICByZXR1cm4gdGhpbmcubmFtZVxuICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHRoaW5nKSB8fCBpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVNldCh0aGluZykpIHtcbiAgICAgICAgbmFtZWQgPSBnZXRBZG1pbmlzdHJhdGlvbih0aGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB2YWxpZCBmb3IgYXJyYXlzIGFzIHdlbGxcbiAgICAgICAgbmFtZWQgPSBnZXRBdG9tKHRoaW5nKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZWQubmFtZV9cbn1cbiIsImltcG9ydCB7XG4gICAgaXNFUzZNYXAsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzRVM2U2V0LFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBoYXNQcm9wLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgb2JqZWN0UHJvdG90eXBlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmRlY2xhcmUgY29uc3QgU3ltYm9sXG5jb25zdCB0b1N0cmluZyA9IG9iamVjdFByb3RvdHlwZS50b1N0cmluZ1xuXG5leHBvcnQgZnVuY3Rpb24gZGVlcEVxdWFsKGE6IGFueSwgYjogYW55LCBkZXB0aDogbnVtYmVyID0gLTEpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZXEoYSwgYiwgZGVwdGgpXG59XG5cbi8vIENvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9ibG9iLzVjMjM3YTdjNjgyZmI2OGZkNTM3ODIwM2YwYmYyMmRjZTE2MjQ4NTQvdW5kZXJzY29yZS5qcyNMMTE4Ni1MMTI4OVxuLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbmZ1bmN0aW9uIGVxKGE6IGFueSwgYjogYW55LCBkZXB0aDogbnVtYmVyLCBhU3RhY2s/OiBhbnlbXSwgYlN0YWNrPzogYW55W10pIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYlxuICAgIC8vIGBudWxsYCBvciBgdW5kZWZpbmVkYCBvbmx5IGVxdWFsIHRvIGl0c2VsZiAoc3RyaWN0IGNvbXBhcmlzb24pLlxuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2VcbiAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgIGlmIChhICE9PSBhKSByZXR1cm4gYiAhPT0gYlxuICAgIC8vIEV4aGF1c3QgcHJpbWl0aXZlIGNoZWNrc1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgYVxuICAgIGlmICghaXNGdW5jdGlvbih0eXBlKSAmJiB0eXBlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBiICE9IFwib2JqZWN0XCIpIHJldHVybiBmYWxzZVxuXG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICBjb25zdCBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpXG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlXG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFJlZ0V4cF1cIjpcbiAgICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgICAgY2FzZSBcIltvYmplY3QgU3RyaW5nXVwiOlxuICAgICAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgYSA9PT0gXCJcIiArIGJcbiAgICAgICAgY2FzZSBcIltvYmplY3QgTnVtYmVyXVwiOlxuICAgICAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOLlxuICAgICAgICAgICAgaWYgKCthICE9PSArYSkgcmV0dXJuICtiICE9PSArYlxuICAgICAgICAgICAgLy8gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvciBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgICAgIHJldHVybiArYSA9PT0gMCA/IDEgLyArYSA9PT0gMSAvIGIgOiArYSA9PT0gK2JcbiAgICAgICAgY2FzZSBcIltvYmplY3QgRGF0ZV1cIjpcbiAgICAgICAgY2FzZSBcIltvYmplY3QgQm9vbGVhbl1cIjpcbiAgICAgICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgICAgIHJldHVybiArYSA9PT0gK2JcbiAgICAgICAgY2FzZSBcIltvYmplY3QgU3ltYm9sXVwiOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC52YWx1ZU9mLmNhbGwoYSkgPT09IFN5bWJvbC52YWx1ZU9mLmNhbGwoYilcbiAgICAgICAgICAgIClcbiAgICAgICAgY2FzZSBcIltvYmplY3QgTWFwXVwiOlxuICAgICAgICBjYXNlIFwiW29iamVjdCBTZXRdXCI6XG4gICAgICAgICAgICAvLyBNYXBzIGFuZCBTZXRzIGFyZSB1bndyYXBwZWQgdG8gYXJyYXlzIG9mIGVudHJ5LXBhaXJzLCBhZGRpbmcgYW4gaW5jaWRlbnRhbCBsZXZlbC5cbiAgICAgICAgICAgIC8vIEhpZGUgdGhpcyBleHRyYSBsZXZlbCBieSBpbmNyZWFzaW5nIHRoZSBkZXB0aC5cbiAgICAgICAgICAgIGlmIChkZXB0aCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVwdGgrK1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgYSA9IHVud3JhcChhKVxuICAgIGIgPSB1bndyYXAoYilcblxuICAgIGNvbnN0IGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiXG4gICAgaWYgKCFhcmVBcnJheXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhICE9IFwib2JqZWN0XCIgfHwgdHlwZW9mIGIgIT0gXCJvYmplY3RcIikgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgICAgIGNvbnN0IGFDdG9yID0gYS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIGJDdG9yID0gYi5jb25zdHJ1Y3RvclxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBhQ3RvciAhPT0gYkN0b3IgJiZcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgaXNGdW5jdGlvbihhQ3RvcikgJiZcbiAgICAgICAgICAgICAgICBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgaXNGdW5jdGlvbihiQ3RvcikgJiZcbiAgICAgICAgICAgICAgICBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yXG4gICAgICAgICAgICApICYmXG4gICAgICAgICAgICBcImNvbnN0cnVjdG9yXCIgaW4gYSAmJlxuICAgICAgICAgICAgXCJjb25zdHJ1Y3RvclwiIGluIGJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2UgaWYgKGRlcHRoIDwgMCkge1xuICAgICAgICBkZXB0aCA9IC0xXG4gICAgfVxuXG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW11cbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW11cbiAgICBsZXQgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aFxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYlxuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucHVzaChhKVxuICAgIGJTdGFjay5wdXNoKGIpXG5cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgICAgICBsZW5ndGggPSBhLmxlbmd0aFxuICAgICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlXG4gICAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgZGVwdGggLSAxLCBhU3RhY2ssIGJTdGFjaykpIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhKVxuICAgICAgICBsZXQga2V5XG4gICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IGJvdGggb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzIGJlZm9yZSBjb21wYXJpbmcgZGVlcCBlcXVhbGl0eS5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKSByZXR1cm4gZmFsc2VcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICAvLyBEZWVwIGNvbXBhcmUgZWFjaCBtZW1iZXJcbiAgICAgICAgICAgIGtleSA9IGtleXNbbGVuZ3RoXVxuICAgICAgICAgICAgaWYgKCEoaGFzUHJvcChiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBkZXB0aCAtIDEsIGFTdGFjaywgYlN0YWNrKSkpIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wb3AoKVxuICAgIGJTdGFjay5wb3AoKVxuICAgIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHVud3JhcChhOiBhbnkpIHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkoYSkpIHJldHVybiBhLnNsaWNlKClcbiAgICBpZiAoaXNFUzZNYXAoYSkgfHwgaXNPYnNlcnZhYmxlTWFwKGEpKSByZXR1cm4gQXJyYXkuZnJvbShhLmVudHJpZXMoKSlcbiAgICBpZiAoaXNFUzZTZXQoYSkgfHwgaXNPYnNlcnZhYmxlU2V0KGEpKSByZXR1cm4gQXJyYXkuZnJvbShhLmVudHJpZXMoKSlcbiAgICByZXR1cm4gYVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIG1ha2VJdGVyYWJsZTxUPihpdGVyYXRvcjogSXRlcmF0b3I8VD4pOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZ2V0U2VsZlxuICAgIHJldHVybiBpdGVyYXRvciBhcyBhbnlcbn1cblxuZnVuY3Rpb24gZ2V0U2VsZigpIHtcbiAgICByZXR1cm4gdGhpc1xufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgaXNHZW5lcmF0b3IsXG4gICAgaXNGdW5jdGlvbixcbiAgICBhdXRvQWN0aW9uLFxuICAgIGlzQWN0aW9uLFxuICAgIGZsb3csXG4gICAgY29tcHV0ZWQsXG4gICAgaXNGbG93XG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCB0eXBlIEFubm90YXRpb24gPSB7XG4gICAgYW5ub3RhdGlvblR5cGVfOiBzdHJpbmdcbiAgICBtYWtlXyhhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiwga2V5OiBQcm9wZXJ0eUtleSk6IHZvaWRcbiAgICBleHRlbmRfKFxuICAgICAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICAgICBwcm94eVRyYXA6IGJvb2xlYW5cbiAgICApOiBib29sZWFuIHwgbnVsbFxuICAgIG9wdGlvbnNfPzogYW55XG59XG5cbmV4cG9ydCB0eXBlIEFubm90YXRpb25NYXBFbnRyeSA9XG4gICAgfCBBbm5vdGF0aW9uXG4gICAgfCB0cnVlIC8qIGZvbGxvdyB0aGUgZGVmYXVsdCBkZWNvcmF0b3IsIHVzdWFsbHkgZGVlcCAqL1xuICAgIHwgZmFsc2UgLyogZG9uJ3QgZGVjb3JhdGUgdGhpcyBwcm9wZXJ0eSAqL1xuXG4vLyBBZGRpdGlvbmFsRmllbGRzIGNhbiBiZSB1c2VkIHRvIGRlY2xhcmUgYWRkaXRpb25hbCBrZXlzIHRoYXQgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlIHRvIGJlIGFibGUgdG9cbi8vIGRlY2xhcmUgYW5ub3RhdGlvbnMgZm9yIHByaXZhdGUvIHByb3RlY3RlZCBtZW1iZXJzLCBzZWUgIzIzMzlcbmV4cG9ydCB0eXBlIEFubm90YXRpb25zTWFwPFQsIEFkZGl0aW9uYWxGaWVsZHMgZXh0ZW5kcyBQcm9wZXJ0eUtleT4gPSB7XG4gICAgW1AgaW4gRXhjbHVkZTxrZXlvZiBULCBcInRvU3RyaW5nXCI+XT86IEFubm90YXRpb25NYXBFbnRyeVxufSAmXG4gICAgUmVjb3JkPEFkZGl0aW9uYWxGaWVsZHMsIEFubm90YXRpb25NYXBFbnRyeT5cblxuLyoqXG4gKiBJbmZlcnMgdGhlIGJlc3QgZml0dGluZyBhbm5vdGF0aW9uIGZyb20gcHJvcGVydHkgZGVzY3JpcHRvciBvciBmYWxzZSBpZiB0aGUgZmllbGQgc2hvdWRuJ3QgYmUgYW5ub3RhdGVkXG4gKiAtIGdldHRlcigrc2V0dGVyKSAtPiBjb21wdXRlZFxuICogLSBzZXR0ZXIgdy9vIGdldHRlciAtPiBmYWxzZSAoaWdub3JlKVxuICogLSBmbG93IC0+IGZhbHNlIChpZ25vcmUpXG4gKiAtIGdlbmVyYXRvciAtPiBmbG93XG4gKiAtIGFjdGlvbiAtPiBmYWxzZSAoaWdub3JlKVxuICogLSBmdW5jdGlvbiAtPiBhY3Rpb24gKG9wdGlvbmFsbHkgYm91bmQpXG4gKiAtIG90aGVyIC0+IGRlZmF1bHRBbm5vdGF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmZlckFubm90YXRpb25Gcm9tRGVzY3JpcHRvcihcbiAgICBkZXNjOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgZGVmYXVsdEFubm90YXRpb246IEFubm90YXRpb24sXG4gICAgYXV0b0JpbmQ6IGJvb2xlYW5cbik6IEFubm90YXRpb24gfCBmYWxzZSB7XG4gICAgaWYgKGRlc2MuZ2V0KSByZXR1cm4gY29tcHV0ZWRcbiAgICBpZiAoZGVzYy5zZXQpIHJldHVybiBmYWxzZSAvLyBpZ25vcmUgbG9uZSBzZXR0ZXJcbiAgICAvLyBJZiBhbHJlYWR5IHdyYXBwZWQgaW4gYWN0aW9uL2Zsb3csIGRvbid0IGRvIHRoYXQgYW5vdGhlciB0aW1lLCBidXQgYXNzdW1lIGl0IGlzIGFscmVhZHkgc2V0IHVwIHByb3Blcmx5LlxuICAgIHJldHVybiBpc0Z1bmN0aW9uKGRlc2MudmFsdWUpXG4gICAgICAgID8gaXNHZW5lcmF0b3IoZGVzYy52YWx1ZSlcbiAgICAgICAgICAgID8gaXNGbG93KGRlc2MudmFsdWUpXG4gICAgICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgICAgIDogZmxvd1xuICAgICAgICAgICAgOiBpc0FjdGlvbihkZXNjLnZhbHVlKVxuICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgOiBhdXRvQmluZFxuICAgICAgICAgICAgPyBhdXRvQWN0aW9uLmJvdW5kXG4gICAgICAgICAgICA6IGF1dG9BY3Rpb25cbiAgICAgICAgOiBkZWZhdWx0QW5ub3RhdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBbm5vdGF0aW9uKHRoaW5nOiBhbnkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICAvLyBDYW4gYmUgZnVuY3Rpb25cbiAgICAgICAgdGhpbmcgaW5zdGFuY2VvZiBPYmplY3QgJiZcbiAgICAgICAgdHlwZW9mIHRoaW5nLmFubm90YXRpb25UeXBlXyA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICBpc0Z1bmN0aW9uKHRoaW5nLm1ha2VfKSAmJlxuICAgICAgICBpc0Z1bmN0aW9uKHRoaW5nLmV4dGVuZF8pXG4gICAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBbm5vdGF0aW9uTWFwRW50cnkodGhpbmc6IGFueSkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IFwiYm9vbGVhblwiIHx8IGlzQW5ub3RhdGlvbih0aGluZylcbn1cbiIsIi8qKlxuICogKGMpIE1pY2hlbCBXZXN0c3RyYXRlIDIwMTUgLSAyMDIwXG4gKiBNSVQgTGljZW5zZWRcbiAqXG4gKiBXZWxjb21lIHRvIHRoZSBtb2J4IHNvdXJjZXMhIFRvIGdldCBhbiBnbG9iYWwgb3ZlcnZpZXcgb2YgaG93IE1vYlggaW50ZXJuYWxseSB3b3JrcyxcbiAqIHRoaXMgaXMgYSBnb29kIHBsYWNlIHRvIHN0YXJ0OlxuICogaHR0cHM6Ly9tZWRpdW0uY29tL0Btd2VzdHN0cmF0ZS9iZWNvbWluZy1mdWxseS1yZWFjdGl2ZS1hbi1pbi1kZXB0aC1leHBsYW5hdGlvbi1vZi1tb2JzZXJ2YWJsZS01NTk5NTI2MmEyNTQjLnh2Ymg2cWQ3NFxuICpcbiAqIFNvdXJjZSBmb2xkZXJzOlxuICogPT09PT09PT09PT09PT09XG4gKlxuICogLSBhcGkvICAgICBNb3N0IG9mIHRoZSBwdWJsaWMgc3RhdGljIG1ldGhvZHMgZXhwb3NlZCBieSB0aGUgbW9kdWxlIGNhbiBiZSBmb3VuZCBoZXJlLlxuICogLSBjb3JlLyAgICBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgTW9iWCBhbGdvcml0aG07IGF0b21zLCBkZXJpdmF0aW9ucywgcmVhY3Rpb25zLCBkZXBlbmRlbmN5IHRyZWVzLCBvcHRpbWl6YXRpb25zLiBDb29sIHN0dWZmIGNhbiBiZSBmb3VuZCBoZXJlLlxuICogLSB0eXBlcy8gICBBbGwgdGhlIG1hZ2ljIHRoYXQgaXMgbmVlZCB0byBoYXZlIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCB2YWx1ZXMgaXMgaW4gdGhpcyBmb2xkZXIuIEluY2x1ZGluZyB0aGUgbW9kaWZpZXJzIGxpa2UgYGFzRmxhdGAuXG4gKiAtIHV0aWxzLyAgIFV0aWxpdHkgc3R1ZmYuXG4gKlxuICovXG5pbXBvcnQgeyBkaWUgfSBmcm9tIFwiLi9lcnJvcnNcIlxuaW1wb3J0IHsgZ2V0R2xvYmFsIH0gZnJvbSBcIi4vdXRpbHMvZ2xvYmFsXCJcbjtbXCJTeW1ib2xcIiwgXCJNYXBcIiwgXCJTZXRcIiwgXCJTeW1ib2xcIl0uZm9yRWFjaChtID0+IHtcbiAgICBsZXQgZyA9IGdldEdsb2JhbCgpXG4gICAgaWYgKHR5cGVvZiBnW21dID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGRpZShgTW9iWCByZXF1aXJlcyBnbG9iYWwgJyR7bX0nIHRvIGJlIGF2YWlsYWJsZSBvciBwb2x5ZmlsbGVkYClcbiAgICB9XG59KVxuXG5pbXBvcnQgeyBzcHksIGdldERlYnVnTmFtZSwgJG1vYnggfSBmcm9tIFwiLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCB7XG4gICAgSU9ic2VydmFibGUsXG4gICAgSURlcFRyZWVOb2RlLFxuICAgIFJlYWN0aW9uLFxuICAgIElSZWFjdGlvblB1YmxpYyxcbiAgICBJUmVhY3Rpb25EaXNwb3NlcixcbiAgICB1bnRyYWNrZWQsXG4gICAgSUF0b20sXG4gICAgY3JlYXRlQXRvbSxcbiAgICBzcHksXG4gICAgSUNvbXB1dGVkVmFsdWUsXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIGNvbXBhcmVyLFxuICAgIElFbmhhbmNlcixcbiAgICBJSW50ZXJjZXB0YWJsZSxcbiAgICBJSW50ZXJjZXB0b3IsXG4gICAgSUxpc3RlbmFibGUsXG4gICAgSU9iamVjdFdpbGxDaGFuZ2UsXG4gICAgSU9iamVjdERpZENoYW5nZSxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgSVZhbHVlRGlkQ2hhbmdlLFxuICAgIElWYWx1ZVdpbGxDaGFuZ2UsXG4gICAgSU9ic2VydmFibGVWYWx1ZSxcbiAgICBpc09ic2VydmFibGVWYWx1ZSBhcyBpc0JveGVkT2JzZXJ2YWJsZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIElBcnJheVdpbGxDaGFuZ2UsXG4gICAgSUFycmF5V2lsbFNwbGljZSxcbiAgICBJQXJyYXlTcGxpY2UsXG4gICAgSUFycmF5VXBkYXRlLFxuICAgIElBcnJheURpZENoYW5nZSxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBJS2V5VmFsdWVNYXAsXG4gICAgT2JzZXJ2YWJsZU1hcCxcbiAgICBJTWFwRW50cmllcyxcbiAgICBJTWFwRW50cnksXG4gICAgSU1hcFdpbGxDaGFuZ2UsXG4gICAgSU1hcERpZENoYW5nZSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgSU9ic2VydmFibGVNYXBJbml0aWFsVmFsdWVzLFxuICAgIE9ic2VydmFibGVTZXQsXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIElTZXREaWRDaGFuZ2UsXG4gICAgSVNldFdpbGxDaGFuZ2UsXG4gICAgSU9ic2VydmFibGVTZXRJbml0aWFsVmFsdWVzLFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIG9ic2VydmFibGUsXG4gICAgSU9ic2VydmFibGVGYWN0b3J5LFxuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIGNvbXB1dGVkLFxuICAgIGlzT2JzZXJ2YWJsZSxcbiAgICBpc09ic2VydmFibGVQcm9wLFxuICAgIGlzQ29tcHV0ZWQsXG4gICAgaXNDb21wdXRlZFByb3AsXG4gICAgZXh0ZW5kT2JzZXJ2YWJsZSxcbiAgICBvYnNlcnZlLFxuICAgIGludGVyY2VwdCxcbiAgICBhdXRvcnVuLFxuICAgIElBdXRvcnVuT3B0aW9ucyxcbiAgICByZWFjdGlvbixcbiAgICBJUmVhY3Rpb25PcHRpb25zLFxuICAgIHdoZW4sXG4gICAgSVdoZW5PcHRpb25zLFxuICAgIGFjdGlvbixcbiAgICBpc0FjdGlvbixcbiAgICBydW5JbkFjdGlvbixcbiAgICBJQWN0aW9uRmFjdG9yeSxcbiAgICBrZXlzLFxuICAgIHZhbHVlcyxcbiAgICBlbnRyaWVzLFxuICAgIHNldCxcbiAgICByZW1vdmUsXG4gICAgaGFzLFxuICAgIGdldCxcbiAgICBjb25maWd1cmUsXG4gICAgb25CZWNvbWVPYnNlcnZlZCxcbiAgICBvbkJlY29tZVVub2JzZXJ2ZWQsXG4gICAgZmxvdyxcbiAgICBmbG93UmVzdWx0LFxuICAgIEZsb3dDYW5jZWxsYXRpb25FcnJvcixcbiAgICBpc0Zsb3dDYW5jZWxsYXRpb25FcnJvcixcbiAgICB0b0pTLFxuICAgIHRyYWNlLFxuICAgIElPYnNlcnZlclRyZWUsXG4gICAgSURlcGVuZGVuY3lUcmVlLFxuICAgIGdldERlcGVuZGVuY3lUcmVlLFxuICAgIGdldE9ic2VydmVyVHJlZSxcbiAgICByZXNldEdsb2JhbFN0YXRlIGFzIF9yZXNldEdsb2JhbFN0YXRlLFxuICAgIGdldEdsb2JhbFN0YXRlIGFzIF9nZXRHbG9iYWxTdGF0ZSxcbiAgICBnZXREZWJ1Z05hbWUsXG4gICAgZ2V0QXRvbSxcbiAgICBnZXRBZG1pbmlzdHJhdGlvbiBhcyBfZ2V0QWRtaW5pc3RyYXRpb24sXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXMgYXMgX2FsbG93U3RhdGVDaGFuZ2VzLFxuICAgIHJ1bkluQWN0aW9uIGFzIF9hbGxvd1N0YXRlQ2hhbmdlc0luc2lkZUNvbXB1dGVkLCAvLyBUaGlzIGhhcyBiZWNvbWUgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaW4gTW9ieCA2XG4gICAgTGFtYmRhLFxuICAgICRtb2J4LFxuICAgIGlzQ29tcHV0aW5nRGVyaXZhdGlvbiBhcyBfaXNDb21wdXRpbmdEZXJpdmF0aW9uLFxuICAgIG9uUmVhY3Rpb25FcnJvcixcbiAgICBpbnRlcmNlcHRSZWFkcyBhcyBfaW50ZXJjZXB0UmVhZHMsXG4gICAgSUNvbXB1dGVkVmFsdWVPcHRpb25zLFxuICAgIElBY3Rpb25SdW5JbmZvLFxuICAgIF9zdGFydEFjdGlvbixcbiAgICBfZW5kQWN0aW9uLFxuICAgIGFsbG93U3RhdGVSZWFkc1N0YXJ0IGFzIF9hbGxvd1N0YXRlUmVhZHNTdGFydCxcbiAgICBhbGxvd1N0YXRlUmVhZHNFbmQgYXMgX2FsbG93U3RhdGVSZWFkc0VuZCxcbiAgICBtYWtlT2JzZXJ2YWJsZSxcbiAgICBtYWtlQXV0b09ic2VydmFibGUsXG4gICAgYXV0b0FjdGlvbiBhcyBfYXV0b0FjdGlvbixcbiAgICBBbm5vdGF0aW9uc01hcCxcbiAgICBBbm5vdGF0aW9uTWFwRW50cnksXG4gICAgb3ZlcnJpZGVcbn0gZnJvbSBcIi4vaW50ZXJuYWxcIlxuXG4vLyBEZXZ0b29scyBzdXBwb3J0XG5kZWNsYXJlIGNvbnN0IF9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fOiB7IGluamVjdE1vYng6IChhbnkpID0+IHZvaWQgfVxuaWYgKHR5cGVvZiBfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gXCJvYmplY3RcIikge1xuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZHlrb2cvbW9ieC1kZXZ0b29scy9cbiAgICBfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3RNb2J4KHtcbiAgICAgICAgc3B5LFxuICAgICAgICBleHRyYXM6IHtcbiAgICAgICAgICAgIGdldERlYnVnTmFtZVxuICAgICAgICB9LFxuICAgICAgICAkbW9ieFxuICAgIH0pXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Provider; });\n__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ inject; });\n__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ mobxreact_esm_observer; });\n\n// UNUSED EXPORTS: Observer, enableStaticRendering, isUsingStaticRendering, observerBatching, useAsObservableSource, useLocalObservable, useLocalStore, useObserver, useStaticRendering, MobXProviderContext, PropTypes, disposeOnUnmount\n\n// EXTERNAL MODULE: ./node_modules/mobx/dist/mobx.esm.js\nvar mobx_esm = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/assertEnvironment.js\n\n\n\nif (!react["useState"]) {\n  throw new Error("mobx-react-lite requires React with Hooks support");\n}\n\nif (!mobx_esm["m" /* makeObservable */]) {\n  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");\n}\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(6);\n\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js\n\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerBatching.js\n\nfunction defaultNoopBatch(callback) {\n  callback();\n}\nfunction observerBatching(reactionScheduler) {\n  if (!reactionScheduler) {\n    reactionScheduler = defaultNoopBatch;\n\n    if (false) {}\n  }\n\n  Object(mobx_esm["f" /* configure */])({\n    reactionScheduler: reactionScheduler\n  });\n}\nvar isObserverBatched = function isObserverBatched() {\n  if (false) {}\n\n  return true;\n};\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/utils.js\nvar __read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === "function" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i["return"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\n\nvar EMPTY_ARRAY = [];\nfunction useForceUpdate() {\n  var _a = __read(Object(react["useState"])(0), 2),\n      setTick = _a[1];\n\n  var update = Object(react["useCallback"])(function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, EMPTY_ARRAY);\n  return update;\n}\nvar deprecatedMessages = [];\nfunction useDeprecated(msg) {\n  if (!deprecatedMessages.includes(msg)) {\n    deprecatedMessages.push(msg);\n    console.warn(msg);\n  }\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/printDebugValue.js\n\nfunction printDebugValue(v) {\n  return Object(mobx_esm["h" /* getDependencyTree */])(v);\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js\nvar FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry;\n\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js\nfunction createTrackingData(reaction) {\n  var trackingData = {\n    reaction: reaction,\n    mounted: false,\n    changedBeforeMount: false,\n    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS\n  };\n  return trackingData;\n}\n/**\n * The minimum time before we\'ll clean up a Reaction created in a render\n * for a component that hasn\'t managed to run its effects. This needs to\n * be big enough to ensure that a component won\'t turn up and have its\n * effects run without being re-rendered.\n */\n\nvar CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\n/**\n * The frequency with which we\'ll check for leaked reactions.\n */\n\nvar CLEANUP_TIMER_LOOP_MILLIS = 10000;\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js\n\n/**\n * FinalizationRegistry-based uncommitted reaction cleanup\n */\n\nfunction createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry) {\n  var cleanupTokenToReactionTrackingMap = new Map();\n  var globalCleanupTokensCounter = 1;\n  var registry = new FinalizationRegistry(function cleanupFunction(token) {\n    var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);\n\n    if (trackedReaction) {\n      trackedReaction.reaction.dispose();\n      cleanupTokenToReactionTrackingMap.delete(token);\n    }\n  });\n  return {\n    addReactionToTrack: function addReactionToTrack(reactionTrackingRef, reaction, objectRetainedByReact) {\n      var token = globalCleanupTokensCounter++;\n      registry.register(objectRetainedByReact, token, reactionTrackingRef);\n      reactionTrackingRef.current = createTrackingData(reaction);\n      reactionTrackingRef.current.finalizationRegistryCleanupToken = token;\n      cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);\n      return reactionTrackingRef.current;\n    },\n    recordReactionAsCommitted: function recordReactionAsCommitted(reactionRef) {\n      registry.unregister(reactionRef);\n\n      if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {\n        cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);\n      }\n    },\n    forceCleanupTimerToRunNowForTests: function forceCleanupTimerToRunNowForTests() {// When FinalizationRegistry in use, this this is no-op\n    },\n    resetCleanupScheduleForTests: function resetCleanupScheduleForTests() {// When FinalizationRegistry in use, this this is no-op\n    }\n  };\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js\nvar __values = undefined && undefined.__values || function (o) {\n  var s = typeof Symbol === "function" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === "number") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\n};\n\n\n/**\n * timers, gc-style, uncommitted reaction cleanup\n */\n\nfunction createTimerBasedReactionCleanupTracking() {\n  /**\n   * Reactions created by components that have yet to be fully mounted.\n   */\n  var uncommittedReactionRefs = new Set();\n  /**\n   * Latest \'uncommitted reactions\' cleanup timer handle.\n   */\n\n  var reactionCleanupHandle;\n  /* istanbul ignore next */\n\n  /**\n   * Only to be used by test functions; do not export outside of mobx-react-lite\n   */\n\n  function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      cleanUncommittedReactions();\n    }\n  }\n  /* istanbul ignore next */\n\n\n  function resetCleanupScheduleForTests() {\n    var e_1, _a;\n\n    if (uncommittedReactionRefs.size > 0) {\n      try {\n        for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {\n          var ref = uncommittedReactionRefs_1_1.value;\n          var tracking = ref.current;\n\n          if (tracking) {\n            tracking.reaction.dispose();\n            ref.current = null;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a = uncommittedReactionRefs_1.return)) _a.call(uncommittedReactionRefs_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      uncommittedReactionRefs.clear();\n    }\n\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      reactionCleanupHandle = undefined;\n    }\n  }\n\n  function ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n    }\n  }\n\n  function scheduleCleanupOfReactionIfLeaked(ref) {\n    uncommittedReactionRefs.add(ref);\n    ensureCleanupTimerRunning();\n  }\n\n  function recordReactionAsCommitted(reactionRef) {\n    uncommittedReactionRefs.delete(reactionRef);\n  }\n  /**\n   * Run by the cleanup timer to dispose any outstanding reactions\n   */\n\n\n  function cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined; // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    var now = Date.now();\n    uncommittedReactionRefs.forEach(function (ref) {\n      var tracking = ref.current;\n\n      if (tracking) {\n        if (now >= tracking.cleanAt) {\n          // It\'s time to tidy up this leaked reaction.\n          tracking.reaction.dispose();\n          ref.current = null;\n          uncommittedReactionRefs.delete(ref);\n        }\n      }\n    });\n\n    if (uncommittedReactionRefs.size > 0) {\n      // We\'ve just finished a round of cleanups but there are still\n      // some leak candidates outstanding.\n      ensureCleanupTimerRunning();\n    }\n  }\n\n  return {\n    addReactionToTrack: function addReactionToTrack(reactionTrackingRef, reaction,\n    /**\n     * On timer based implementation we don\'t really need this object,\n     * but we keep the same api\n     */\n    objectRetainedByReact) {\n      reactionTrackingRef.current = createTrackingData(reaction);\n      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n      return reactionTrackingRef.current;\n    },\n    recordReactionAsCommitted: recordReactionAsCommitted,\n    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,\n    resetCleanupScheduleForTests: resetCleanupScheduleForTests\n  };\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js\n\n\n\n\nvar reactionCleanupTracking_a = FinalizationRegistryLocal ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryLocal) : createTimerBasedReactionCleanupTracking(),\n    reactionCleanupTracking_addReactionToTrack = reactionCleanupTracking_a.addReactionToTrack,\n    reactionCleanupTracking_recordReactionAsCommitted = reactionCleanupTracking_a.recordReactionAsCommitted,\n    reactionCleanupTracking_resetCleanupScheduleForTests = reactionCleanupTracking_a.resetCleanupScheduleForTests,\n    reactionCleanupTracking_forceCleanupTimerToRunNowForTests = reactionCleanupTracking_a.forceCleanupTimerToRunNowForTests;\n\n\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/staticRendering.js\nvar globalIsUsingStaticRendering = false;\nfunction enableStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useObserver.js\nvar useObserver_read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === "function" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i["return"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\n\n\n\n\n\n\n\nfunction observerComponentNameFor(baseComponentName) {\n  return "observer" + baseComponentName;\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\n\n\nvar ObjectToBeRetainedByReact =\n/** @class */\nfunction () {\n  function ObjectToBeRetainedByReact() {}\n\n  return ObjectToBeRetainedByReact;\n}();\n\nfunction useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = "observed";\n  }\n\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n\n  var _a = useObserver_read(react_default.a.useState(new ObjectToBeRetainedByReact()), 1),\n      objectRetainedByReact = _a[0];\n\n  var forceUpdate = useForceUpdate(); // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n\n  var reactionTrackingRef = react_default.a.useRef(null);\n\n  if (!reactionTrackingRef.current) {\n    // First render for this component (or first time since a previous\n    // reaction from an abandoned render was disposed).\n    var newReaction = new mobx_esm["b" /* Reaction */](observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we\'re a component that hasn\'t yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don\'t want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (trackingData_1.mounted) {\n        // We have reached useEffect(), so we\'re mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven\'t yet reached useEffect(), so we\'ll need to trigger a re-render\n        // when (and if) useEffect() arrives.\n        trackingData_1.changedBeforeMount = true;\n      }\n    });\n    var trackingData_1 = reactionCleanupTracking_addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);\n  }\n\n  var reaction = reactionTrackingRef.current.reaction;\n  react_default.a.useDebugValue(reaction, printDebugValue);\n  react_default.a.useEffect(function () {\n    // Called on first mount only\n    reactionCleanupTracking_recordReactionAsCommitted(reactionTrackingRef);\n\n    if (reactionTrackingRef.current) {\n      // Great. We\'ve already got our reaction from our render;\n      // all we need to do is to record that it\'s now mounted,\n      // to allow future observable changes to trigger re-renders\n      reactionTrackingRef.current.mounted = true; // Got a change before first mount, force an update\n\n      if (reactionTrackingRef.current.changedBeforeMount) {\n        reactionTrackingRef.current.changedBeforeMount = false;\n        forceUpdate();\n      }\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This can be due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up\n      // Re-create the reaction\n      reactionTrackingRef.current = {\n        reaction: new mobx_esm["b" /* Reaction */](observerComponentNameFor(baseComponentName), function () {\n          // We\'ve definitely already been mounted at this point\n          forceUpdate();\n        }),\n        mounted: true,\n        changedBeforeMount: false,\n        cleanAt: Infinity\n      };\n      forceUpdate();\n    }\n\n    return function () {\n      reactionTrackingRef.current.reaction.dispose();\n      reactionTrackingRef.current = null;\n    };\n  }, []); // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n\n  var rendering;\n  var exception;\n  reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n\n  return rendering;\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/observer.js\nvar __assign = undefined && undefined.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\n\n\n // n.b. base case is not used for actual typings or exported in the typing files\n\nfunction observer(baseComponent, options) {\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n\n  var realOptions = __assign({\n    forwardRef: false\n  }, options);\n\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n\n  var wrappedComponent = function wrappedComponent(props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  };\n\n  wrappedComponent.displayName = baseComponentName; // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n\n  var memoComponent;\n\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can\'t let the baseComponent do it\n    //    since it wouldn\'t be a callable function anymore\n    memoComponent = Object(react["memo"])(Object(react["forwardRef"])(wrappedComponent));\n  } else {\n    memoComponent = Object(react["memo"])(wrappedComponent);\n  }\n\n  copyStaticProperties(baseComponent, memoComponent);\n  memoComponent.displayName = baseComponentName;\n  return memoComponent;\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true\n};\n\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/ObserverComponent.js\n\n\nfunction ObserverComponent(_a) {\n  var children = _a.children,\n      render = _a.render;\n  var component = children || render;\n\n  if (typeof component !== "function") {\n    return null;\n  }\n\n  return useObserver(component);\n}\n\nif (false) {}\n\nObserverComponent.displayName = "Observer";\n\n\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === "children" ? "render" : "children";\n  var hasProp = typeof props[key] === "function";\n  var hasExtraProp = typeof props[extraKey] === "function";\n\n  if (hasProp && hasExtraProp) {\n    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);\n  }\n\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n\n  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to" + " `" + componentName + "`, expected `function`.");\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalObservable.js\n\n\nfunction useLocalObservable(initializer, annotations) {\n  return Object(react["useState"])(function () {\n    return Object(mobx_esm["n" /* observable */])(initializer(), annotations, {\n      autoBind: true\n    });\n  })[0];\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useAsObservableSource.js\nvar useAsObservableSource_read = undefined && undefined.__read || function (o, n) {\n  var m = typeof Symbol === "function" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i["return"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\n\n\n\nfunction useAsObservableSource(current) {\n  if (false) {}\n\n  var _a = useAsObservableSource_read(Object(react["useState"])(function () {\n    return Object(mobx_esm["n" /* observable */])(current, {}, {\n      deep: false\n    });\n  }), 1),\n      res = _a[0];\n\n  Object(mobx_esm["o" /* runInAction */])(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalStore.js\n\n\n\n\nfunction useLocalStore(initializer, current) {\n  if (false) {}\n  var source = current && useAsObservableSource(current);\n  return Object(react["useState"])(function () {\n    return Object(mobx_esm["n" /* observable */])(initializer(source), undefined, {\n      autoBind: true\n    });\n  })[0];\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/index.js\n\n\n\n\n\n\nobserverBatching(react_dom["unstable_batchedUpdates"]);\n\n\n\n\n\n\n\nfunction es_useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = "observed";\n  }\n\n  if (false) {}\n\n  return useObserver(fn, baseComponentName);\n}\n\nfunction useStaticRendering(enable) {\n  if (false) {}\n\n  enableStaticRendering(enable);\n}\n// CONCATENATED MODULE: ./node_modules/mobx-react/dist/mobxreact.esm.js\n\n\n\n\nvar symbolId = 0;\n\nfunction createSymbol(name) {\n  if (typeof Symbol === "function") {\n    return Symbol(name);\n  }\n\n  var symbol = "__$mobx-react " + name + " (" + symbolId + ")";\n  symbolId++;\n  return symbol;\n}\n\nvar createdSymbols = {};\n\nfunction newSymbol(name) {\n  if (!createdSymbols[name]) {\n    createdSymbols[name] = createSymbol(name);\n  }\n\n  return createdSymbols[name];\n}\n\nfunction shallowEqual(objA, objB) {\n  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (is(objA, objB)) return true;\n\n  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return false;\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\n\nvar mobxreact_esm_hoistBlackList = {\n  $$typeof: 1,\n  render: 1,\n  compare: 1,\n  type: 1,\n  childContextTypes: 1,\n  contextType: 1,\n  contextTypes: 1,\n  defaultProps: 1,\n  getDefaultProps: 1,\n  getDerivedStateFromError: 1,\n  getDerivedStateFromProps: 1,\n  mixins: 1,\n  propTypes: 1\n};\n\nfunction mobxreact_esm_copyStaticProperties(base, target) {\n  var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));\n  Object.getOwnPropertyNames(base).forEach(function (key) {\n    if (!mobxreact_esm_hoistBlackList[key] && protoProps.indexOf(key) === -1) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n/**\r\n * Helper to set `prop` to `this` as non-enumerable (hidden prop)\r\n * @param target\r\n * @param prop\r\n * @param value\r\n */\n\n\nfunction setHiddenProp(target, prop, value) {\n  if (!Object.hasOwnProperty.call(target, prop)) {\n    Object.defineProperty(target, prop, {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: value\n    });\n  } else {\n    target[prop] = value;\n  }\n}\n/**\r\n * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks\r\n * and the handler provided by mobx-react\r\n */\n\n\nvar mobxMixins = /*#__PURE__*/newSymbol("patchMixins");\nvar mobxPatchedDefinition = /*#__PURE__*/newSymbol("patchedDefinition");\n\nfunction getMixins(target, methodName) {\n  var mixins = target[mobxMixins] = target[mobxMixins] || {};\n  var methodMixins = mixins[methodName] = mixins[methodName] || {};\n  methodMixins.locks = methodMixins.locks || 0;\n  methodMixins.methods = methodMixins.methods || [];\n  return methodMixins;\n}\n\nfunction wrapper(realMethod, mixins) {\n  var _this = this;\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  } // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls\n\n\n  mixins.locks++;\n\n  try {\n    var retVal;\n\n    if (realMethod !== undefined && realMethod !== null) {\n      retVal = realMethod.apply(this, args);\n    }\n\n    return retVal;\n  } finally {\n    mixins.locks--;\n\n    if (mixins.locks === 0) {\n      mixins.methods.forEach(function (mx) {\n        mx.apply(_this, args);\n      });\n    }\n  }\n}\n\nfunction wrapFunction(realMethod, mixins) {\n  var fn = function fn() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));\n  };\n\n  return fn;\n}\n\nfunction patch(target, methodName, mixinMethod) {\n  var mixins = getMixins(target, methodName);\n\n  if (mixins.methods.indexOf(mixinMethod) < 0) {\n    mixins.methods.push(mixinMethod);\n  }\n\n  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);\n\n  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {\n    // already patched definition, do not repatch\n    return;\n  }\n\n  var originalMethod = target[methodName];\n  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);\n  Object.defineProperty(target, methodName, newDefinition);\n}\n\nfunction createDefinition(target, methodName, enumerable, mixins, originalMethod) {\n  var _ref;\n\n  var wrappedFunc = wrapFunction(originalMethod, mixins);\n  return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {\n    return wrappedFunc;\n  }, _ref.set = function set(value) {\n    if (this === target) {\n      wrappedFunc = wrapFunction(value, mixins);\n    } else {\n      // when it is an instance of the prototype/a child prototype patch that particular case again separately\n      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc\n      // e.g. the method for super might not be the same as the method for the prototype which might be not the same\n      // as the method for the instance\n      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);\n      Object.defineProperty(this, methodName, newDefinition);\n    }\n  }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;\n}\n\nvar mobxAdminProperty = mobx_esm["a" /* $mobx */] || "$mobx";\nvar mobxObserverProperty = /*#__PURE__*/newSymbol("isMobXReactObserver");\nvar mobxIsUnmounted = /*#__PURE__*/newSymbol("isUnmounted");\nvar skipRenderKey = /*#__PURE__*/newSymbol("skipRender");\nvar isForcingUpdateKey = /*#__PURE__*/newSymbol("isForcingUpdate");\n\nfunction makeClassComponentObserver(componentClass) {\n  var target = componentClass.prototype;\n\n  if (componentClass[mobxObserverProperty]) {\n    var displayName = getDisplayName(target);\n    console.warn("The provided component class (" + displayName + ") \\n                has already been declared as an observer component.");\n  } else {\n    componentClass[mobxObserverProperty] = true;\n  }\n\n  if (target.componentWillReact) throw new Error("The componentWillReact life-cycle event is no longer supported");\n\n  if (componentClass["__proto__"] !== react["PureComponent"]) {\n    if (!target.shouldComponentUpdate) target.shouldComponentUpdate = observerSCU;else if (target.shouldComponentUpdate !== observerSCU) // n.b. unequal check, instead of existence check, as @observer might be on superclass as well\n      throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");\n  } // this.props and this.state are made observable, just to make sure @computed fields that\n  // are defined inside the component, and which rely on state or props, re-compute if state or props change\n  // (otherwise the computed wouldn\'t update and become stale on props change, since props are not observable)\n  // However, this solution is not without it\'s own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+\n\n\n  makeObservableProp(target, "props");\n  makeObservableProp(target, "state");\n  var baseRender = target.render;\n\n  target.render = function () {\n    return makeComponentReactive.call(this, baseRender);\n  };\n\n  patch(target, "componentWillUnmount", function () {\n    var _this$render$mobxAdmi;\n\n    if (isUsingStaticRendering() === true) return;\n    (_this$render$mobxAdmi = this.render[mobxAdminProperty]) == null ? void 0 : _this$render$mobxAdmi.dispose();\n    this[mobxIsUnmounted] = true;\n\n    if (!this.render[mobxAdminProperty]) {\n      // Render may have been hot-swapped and/or overriden by a subclass.\n      var _displayName = getDisplayName(this);\n\n      console.warn("The reactive render of an observer class component (" + _displayName + ") \\n                was overriden after MobX attached. This may result in a memory leak if the \\n                overriden reactive render was not properly disposed.");\n    }\n  });\n  return componentClass;\n} // Generates a friendly name for debugging\n\n\nfunction getDisplayName(comp) {\n  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";\n}\n\nfunction makeComponentReactive(render) {\n  var _this = this;\n\n  if (isUsingStaticRendering() === true) return render.call(this);\n  /**\r\n   * If props are shallowly modified, react will render anyway,\r\n   * so atom.reportChanged() should not result in yet another re-render\r\n   */\n\n  setHiddenProp(this, skipRenderKey, false);\n  /**\r\n   * forceUpdate will re-assign this.props. We don\'t want that to cause a loop,\r\n   * so detect these changes\r\n   */\n\n  setHiddenProp(this, isForcingUpdateKey, false);\n  var initialName = getDisplayName(this);\n  var baseRender = render.bind(this);\n  var isRenderingPending = false;\n  var reaction = new mobx_esm["b" /* Reaction */](initialName + ".render()", function () {\n    if (!isRenderingPending) {\n      // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)\n      // This unidiomatic React usage but React will correctly warn about this so we continue as usual\n      // See #85 / Pull #44\n      isRenderingPending = true;\n\n      if (_this[mobxIsUnmounted] !== true) {\n        var hasError = true;\n\n        try {\n          setHiddenProp(_this, isForcingUpdateKey, true);\n          if (!_this[skipRenderKey]) react["Component"].prototype.forceUpdate.call(_this);\n          hasError = false;\n        } finally {\n          setHiddenProp(_this, isForcingUpdateKey, false);\n          if (hasError) reaction.dispose();\n        }\n      }\n    }\n  });\n  reaction["reactComponent"] = this;\n  reactiveRender[mobxAdminProperty] = reaction;\n  this.render = reactiveRender;\n\n  function reactiveRender() {\n    isRenderingPending = false;\n    var exception = undefined;\n    var rendering = undefined;\n    reaction.track(function () {\n      try {\n        rendering = Object(mobx_esm["c" /* _allowStateChanges */])(false, baseRender);\n      } catch (e) {\n        exception = e;\n      }\n    });\n\n    if (exception) {\n      throw exception;\n    }\n\n    return rendering;\n  }\n\n  return reactiveRender.call(this);\n}\n\nfunction observerSCU(nextProps, nextState) {\n  if (isUsingStaticRendering()) {\n    console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");\n  } // update on any state changes (as is the default)\n\n\n  if (this.state !== nextState) {\n    return true;\n  } // update if props are shallowly not equal, inspired by PureRenderMixin\n  // we could return just \'false\' here, and avoid the `skipRender` checks etc\n  // however, it is nicer if lifecycle events are triggered like usually,\n  // so we return true here if props are shallowly modified.\n\n\n  return !shallowEqual(this.props, nextProps);\n}\n\nfunction makeObservableProp(target, propName) {\n  var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");\n  var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");\n\n  function getAtom() {\n    if (!this[atomHolderKey]) {\n      setHiddenProp(this, atomHolderKey, Object(mobx_esm["g" /* createAtom */])("reactive " + propName));\n    }\n\n    return this[atomHolderKey];\n  }\n\n  Object.defineProperty(target, propName, {\n    configurable: true,\n    enumerable: true,\n    get: function get() {\n      var prevReadState = false;\n\n      if (mobx_esm["e" /* _allowStateReadsStart */] && mobx_esm["d" /* _allowStateReadsEnd */]) {\n        prevReadState = Object(mobx_esm["e" /* _allowStateReadsStart */])(true);\n      }\n\n      getAtom.call(this).reportObserved();\n\n      if (mobx_esm["e" /* _allowStateReadsStart */] && mobx_esm["d" /* _allowStateReadsEnd */]) {\n        Object(mobx_esm["d" /* _allowStateReadsEnd */])(prevReadState);\n      }\n\n      return this[valueHolderKey];\n    },\n    set: function set(v) {\n      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {\n        setHiddenProp(this, valueHolderKey, v);\n        setHiddenProp(this, skipRenderKey, true);\n        getAtom.call(this).reportChanged();\n        setHiddenProp(this, skipRenderKey, false);\n      } else {\n        setHiddenProp(this, valueHolderKey, v);\n      }\n    }\n  });\n}\n\nvar hasSymbol = typeof Symbol === "function" && Symbol["for"]; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609\n\nvar ReactForwardRefSymbol = hasSymbol ? /*#__PURE__*/Symbol["for"]("react.forward_ref") : typeof react["forwardRef"] === "function" && /*#__PURE__*/Object(react["forwardRef"])(function (props) {\n  return null;\n})["$$typeof"];\nvar ReactMemoSymbol = hasSymbol ? /*#__PURE__*/Symbol["for"]("react.memo") : typeof react["memo"] === "function" && /*#__PURE__*/Object(react["memo"])(function (props) {\n  return null;\n})["$$typeof"];\n/**\r\n * Observer function / decorator\r\n */\n\nfunction mobxreact_esm_observer(component) {\n  if (component["isMobxInjector"] === true) {\n    console.warn("Mobx observer: You are trying to use \'observer\' on a component that already has \'inject\'. Please apply \'observer\' before applying \'inject\'");\n  }\n\n  if (ReactMemoSymbol && component["$$typeof"] === ReactMemoSymbol) {\n    throw new Error("Mobx observer: You are trying to use \'observer\' on a function component wrapped in either another observer or \'React.memo\'. The observer already applies \'React.memo\' for you.");\n  } // Unwrap forward refs into `<Observer>` component\n  // we need to unwrap the render, because it is the inner render that needs to be tracked,\n  // not the ForwardRef HoC\n\n\n  if (ReactForwardRefSymbol && component["$$typeof"] === ReactForwardRefSymbol) {\n    var baseRender = component["render"];\n    if (typeof baseRender !== "function") throw new Error("render property of ForwardRef was not a function");\n    return Object(react["forwardRef"])(function ObserverForwardRef() {\n      var args = arguments;\n      return Object(react["createElement"])(ObserverComponent, null, function () {\n        return baseRender.apply(undefined, args);\n      });\n    });\n  } // Function component\n\n\n  if (typeof component === "function" && (!component.prototype || !component.prototype.render) && !component["isReactClass"] && !Object.prototype.isPrototypeOf.call(react["Component"], component)) {\n    return observer(component);\n  }\n\n  return makeClassComponentObserver(component);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar MobXProviderContext = /*#__PURE__*/react_default.a.createContext({});\n\nfunction Provider(props) {\n  var children = props.children,\n      stores = _objectWithoutPropertiesLoose(props, ["children"]);\n\n  var parentValue = react_default.a.useContext(MobXProviderContext);\n  var mutableProviderRef = react_default.a.useRef(_extends({}, parentValue, stores));\n  var value = mutableProviderRef.current;\n\n  if (false) { var newValue; }\n\n  return react_default.a.createElement(MobXProviderContext.Provider, {\n    value: value\n  }, children);\n}\n\nProvider.displayName = "MobXProvider";\n/**\r\n * Store Injection\r\n */\n\nfunction createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {\n  // Support forward refs\n  var Injector = react_default.a.forwardRef(function (props, ref) {\n    var newProps = _extends({}, props);\n\n    var context = react_default.a.useContext(MobXProviderContext);\n    Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});\n\n    if (ref) {\n      newProps.ref = ref;\n    }\n\n    return react_default.a.createElement(component, newProps);\n  });\n  if (makeReactive) Injector = mobxreact_esm_observer(Injector);\n  Injector["isMobxInjector"] = true; // assigned late to suppress observer warning\n  // Static fields from component should be visible on the generated Injector\n\n  mobxreact_esm_copyStaticProperties(component, Injector);\n  Injector["wrappedComponent"] = component;\n  Injector.displayName = getInjectName(component, injectNames);\n  return Injector;\n}\n\nfunction getInjectName(component, injectNames) {\n  var displayName;\n  var componentName = component.displayName || component.name || component.constructor && component.constructor.name || "Component";\n  if (injectNames) displayName = "inject-with-" + injectNames + "(" + componentName + ")";else displayName = "inject(" + componentName + ")";\n  return displayName;\n}\n\nfunction grabStoresByName(storeNames) {\n  return function (baseStores, nextProps) {\n    storeNames.forEach(function (storeName) {\n      if (storeName in nextProps // prefer props over stores\n      ) return;\n      if (!(storeName in baseStores)) throw new Error("MobX injector: Store \'" + storeName + "\' is not available! Make sure it is provided by some Provider");\n      nextProps[storeName] = baseStores[storeName];\n    });\n    return nextProps;\n  };\n}\n/**\r\n * higher order component that injects stores to a child.\r\n * takes either a varargs list of strings, which are stores read from the context,\r\n * or a function that manually maps the available stores from the context to props:\r\n * storesToProps(mobxStores, props, context) => newProps\r\n */\n\n\nfunction inject() {\n  for (var _len = arguments.length, storeNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    storeNames[_key] = arguments[_key];\n  }\n\n  if (typeof arguments[0] === "function") {\n    var grabStoresFn = arguments[0];\n    return function (componentClass) {\n      return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);\n    };\n  } else {\n    return function (componentClass) {\n      return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join("-"), false);\n    };\n  }\n}\n\nvar protoStoreKey = /*#__PURE__*/newSymbol("disposeOnUnmountProto");\nvar instStoreKey = /*#__PURE__*/newSymbol("disposeOnUnmountInst");\n\nfunction runDisposersOnWillUnmount() {\n  var _this = this;\n\n  [].concat(this[protoStoreKey] || [], this[instStoreKey] || []).forEach(function (propKeyOrFunction) {\n    var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;\n\n    if (prop !== undefined && prop !== null) {\n      if (Array.isArray(prop)) prop.map(function (f) {\n        return f();\n      });else prop();\n    }\n  });\n}\n\nfunction disposeOnUnmount(target, propertyKeyOrFunction) {\n  if (Array.isArray(propertyKeyOrFunction)) {\n    return propertyKeyOrFunction.map(function (fn) {\n      return disposeOnUnmount(target, fn);\n    });\n  }\n\n  var c = Object.getPrototypeOf(target).constructor;\n  var c2 = Object.getPrototypeOf(target.constructor); // Special case for react-hot-loader\n\n  var c3 = Object.getPrototypeOf(Object.getPrototypeOf(target));\n\n  if (!(c === react_default.a.Component || c === react_default.a.PureComponent || c2 === react_default.a.Component || c2 === react_default.a.PureComponent || c3 === react_default.a.Component || c3 === react_default.a.PureComponent)) {\n    throw new Error("[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.");\n  }\n\n  if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function" && !Array.isArray(propertyKeyOrFunction)) {\n    throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");\n  } // decorator\'s target is the prototype, so it doesn\'t have any instance properties like props\n\n\n  var isDecorator = typeof propertyKeyOrFunction === "string"; // add property key / function we want run (disposed) to the store\n\n  var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];\n  var store = isDecorator ? // decorators are added to the prototype store\n  target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store\n  target[instStoreKey] || (target[instStoreKey] = []);\n  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already\n\n  if (!componentWasAlreadyModified) {\n    patch(target, "componentWillUnmount", runDisposersOnWillUnmount);\n  } // return the disposer as is if invoked as a non decorator\n\n\n  if (typeof propertyKeyOrFunction !== "string") {\n    return propertyKeyOrFunction;\n  }\n}\n\nfunction createChainableTypeChecker(validator) {\n  function checkType(isRequired, props, propName, componentName, location, propFullName) {\n    for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {\n      rest[_key - 6] = arguments[_key];\n    }\n\n    return Object(mobx_esm["p" /* untracked */])(function () {\n      componentName = componentName || "<<anonymous>>";\n      propFullName = propFullName || propName;\n\n      if (props[propName] == null) {\n        if (isRequired) {\n          var actual = props[propName] === null ? "null" : "undefined";\n          return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");\n        }\n\n        return null;\n      } else {\n        // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise\n        return validator.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));\n      }\n    });\n  }\n\n  var chainedCheckType = checkType.bind(null, false); // Add isRequired to satisfy Requirable\n\n  chainedCheckType.isRequired = checkType.bind(null, true);\n  return chainedCheckType;\n} // Copied from React.PropTypes\n\n\nfunction isSymbol(propType, propValue) {\n  // Native Symbol.\n  if (propType === "symbol") {\n    return true;\n  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === \'Symbol\'\n\n\n  if (propValue["@@toStringTag"] === "Symbol") {\n    return true;\n  } // Fallback for non-spec compliant Symbols which are polyfilled.\n\n\n  if (typeof Symbol === "function" && propValue instanceof Symbol) {\n    return true;\n  }\n\n  return false;\n} // Copied from React.PropTypes\n\n\nfunction getPropType(propValue) {\n  var propType = typeof propValue;\n\n  if (Array.isArray(propValue)) {\n    return "array";\n  }\n\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return \'function\' rather than\n    // \'object\' for typeof a RegExp. We\'ll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return "object";\n  }\n\n  if (isSymbol(propType, propValue)) {\n    return "symbol";\n  }\n\n  return propType;\n} // This handles more types than `getPropType`. Only used for error messages.\n// Copied from React.PropTypes\n\n\nfunction getPreciseType(propValue) {\n  var propType = getPropType(propValue);\n\n  if (propType === "object") {\n    if (propValue instanceof Date) {\n      return "date";\n    } else if (propValue instanceof RegExp) {\n      return "regexp";\n    }\n  }\n\n  return propType;\n}\n\nfunction createObservableTypeCheckerCreator(allowNativeType, mobxType) {\n  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {\n    return Object(mobx_esm["p" /* untracked */])(function () {\n      if (allowNativeType) {\n        if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;\n      }\n\n      var mobxChecker;\n\n      switch (mobxType) {\n        case "Array":\n          mobxChecker = mobx_esm["i" /* isObservableArray */];\n          break;\n\n        case "Object":\n          mobxChecker = mobx_esm["k" /* isObservableObject */];\n          break;\n\n        case "Map":\n          mobxChecker = mobx_esm["j" /* isObservableMap */];\n          break;\n\n        default:\n          throw new Error("Unexpected mobxType: " + mobxType);\n      }\n\n      var propValue = props[propName];\n\n      if (!mobxChecker(propValue)) {\n        var preciseType = getPreciseType(propValue);\n        var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";\n        return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");\n      }\n\n      return null;\n    });\n  });\n}\n\nfunction createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {\n  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {\n      rest[_key2 - 5] = arguments[_key2];\n    }\n\n    return Object(mobx_esm["p" /* untracked */])(function () {\n      if (typeof typeChecker !== "function") {\n        return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");\n      } else {\n        var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName, location, propFullName);\n        if (error instanceof Error) return error;\n        var propValue = props[propName];\n\n        for (var i = 0; i < propValue.length; i++) {\n          error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));\n          if (error instanceof Error) return error;\n        }\n\n        return null;\n      }\n    });\n  });\n}\n\nvar observableArray = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Array");\nvar observableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, false);\nvar observableMap = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Map");\nvar observableObject = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Object");\nvar arrayOrObservableArray = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Array");\nvar arrayOrObservableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, true);\nvar objectOrObservableObject = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Object");\nvar PropTypes = {\n  observableArray: observableArray,\n  observableArrayOf: observableArrayOf,\n  observableMap: observableMap,\n  observableObject: observableObject,\n  arrayOrObservableArray: arrayOrObservableArray,\n  arrayOrObservableArrayOf: arrayOrObservableArrayOf,\n  objectOrObservableObject: objectOrObservableObject\n};\nif (!react["Component"]) throw new Error("mobx-react requires React to be available");\nif (!mobx_esm["n" /* observable */]) throw new Error("mobx-react requires mobx to be available");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ _toConsumableArray; });\n\n// CONCATENATED MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n// CONCATENATED MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n// CONCATENATED MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n// CONCATENATED MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n// CONCATENATED MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n// CONCATENATED MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFlO0FBQ2Y7O0FBRUEsd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTs7QUFFQTtBQUNBLEM7O0FDUjJFO0FBQzVEO0FBQ2YsaUNBQWlDLGlCQUFnQjtBQUNqRCxDOztBQ0hlO0FBQ2Y7QUFDQSxDOztBQ0YyRTtBQUM1RDtBQUNmO0FBQ0Esb0NBQW9DLGlCQUFnQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsaUJBQWdCO0FBQ3RHLEM7O0FDUmU7QUFDZjtBQUNBLEM7O0FDRjZFO0FBQ0o7QUFDc0I7QUFDbEI7QUFDOUQ7QUFDZixTQUFTLGtCQUFpQixTQUFTLGdCQUFlLFNBQVMsMkJBQTBCLFNBQVMsa0JBQWlCO0FBQy9HIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWRcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ _objectSpread2; });\n\n// CONCATENATED MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n// CONCATENATED MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\n\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSxDOztBQ2J1RTs7QUFFdkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRWU7QUFDZixpQkFBaUIsc0JBQXNCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQSxRQUFRLGVBQWM7QUFDdEIsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {\n    return;\n  }\n\n  if (false) {}\n\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(12);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiXSwibmFtZXMiOlsiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJwcm9jZXNzIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFNBQVNBLFFBQVQsR0FBb0I7QUFDbEI7QUFDQSxNQUNFLE9BQU9DLDhCQUFQLEtBQTBDLFdBQTFDLElBQ0EsT0FBT0EsOEJBQThCLENBQUNELFFBQXRDLEtBQW1ELFVBRnJELEVBR0U7QUFDQTtBQUNEOztBQUNELE1BQUlFLEtBQUosRUFBMkMsRUFTMUM7O0FBQ0QsTUFBSTtBQUNGO0FBQ0FELGtDQUE4QixDQUFDRCxRQUEvQixDQUF3Q0EsUUFBeEM7QUFDRCxHQUhELENBR0UsT0FBT0csR0FBUCxFQUFZO0FBQ1o7QUFDQTtBQUNBQyxXQUFPLENBQUNDLEtBQVIsQ0FBY0YsR0FBZDtBQUNEO0FBQ0Y7O0FBRUQsSUFBSUQsSUFBSixFQUEyQztBQUN6QztBQUNBO0FBQ0FGLFVBQVE7QUFDUk0sUUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxtQkFBTyxDQUFDLEVBQUQsQ0FBeEI7QUFDRCxDQUxELE1BS08iLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _classCallCheck; });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIl0sIm5hbWVzIjpbImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJzaG91bGRVc2VOYXRpdmUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImkiLCJmcm9tQ2hhckNvZGUiLCJvcmRlcjIiLCJtYXAiLCJuIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5cyIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9tIiwidG8iLCJzeW1ib2xzIiwicyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImtleSIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFYTtBQUNiOztBQUNBLElBQUlBLHFCQUFxQixHQUFHQyxNQUFNLENBQUNELHFCQUFuQztBQUNBLElBQUlFLGNBQWMsR0FBR0QsTUFBTSxDQUFDRSxTQUFQLENBQWlCRCxjQUF0QztBQUNBLElBQUlFLGdCQUFnQixHQUFHSCxNQUFNLENBQUNFLFNBQVAsQ0FBaUJFLG9CQUF4Qzs7QUFFQSxTQUFTQyxRQUFULENBQWtCQyxHQUFsQixFQUF1QjtBQUN0QixNQUFJQSxHQUFHLEtBQUssSUFBUixJQUFnQkEsR0FBRyxLQUFLQyxTQUE1QixFQUF1QztBQUN0QyxVQUFNLElBQUlDLFNBQUosQ0FBYyx1REFBZCxDQUFOO0FBQ0E7O0FBRUQsU0FBT1IsTUFBTSxDQUFDTSxHQUFELENBQWI7QUFDQTs7QUFFRCxTQUFTRyxlQUFULEdBQTJCO0FBQzFCLE1BQUk7QUFDSCxRQUFJLENB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QUUsQ0FBQ0MsT0FBTyxDQUFDbEIsQ0FBRCxDQUFSLENBQUYsR0FBaUJnQixJQUFJLENBQUNFLE9BQU8sQ0FBQ2xCLENBQUQsQ0FBUixDQUFyQjtBQUNBO0FBQ0Q7QUFDRDtBQUNEOztBQUVELFNBQU9pQixFQUFQO0FBQ0EsQ0F6QkQiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* unused harmony export escape */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return unescape; });\n/**\n * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar _ref = '',\n    replace = _ref.replace; // escape\n\nvar es = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g;\nvar ca = /[&<>'\"]/g;\nvar esca = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  \"'\": '&#39;',\n  '\"': '&quot;'\n};\n\nvar pe = function pe(m) {\n  return esca[m];\n};\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`.\n * @param {string} es the input to safely escape\n * @returns {string} the escaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */\n\n\nvar escape = function escape(es) {\n  return replace.call(es, ca, pe);\n}; // unescape\n\nvar unes = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': \"'\",\n  '&#39;': \"'\",\n  '&quot;': '\"',\n  '&#34;': '\"'\n};\n\nvar cape = function cape(m) {\n  return unes[m];\n};\n/**\n * Safely unescape previously escaped entities such as `&`, `<`, `>`, `\"`,\n * and `'`.\n * @param {string} un a previously escaped string\n * @returns {string} the unescaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */\n\n\nvar unescape = function unescape(un) {\n  return replace.call(un, es, cape);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9odG1sLWVzY2FwZXIvZXNtL2luZGV4LmpzIl0sIm5hbWVzIjpbInJlcGxhY2UiLCJlcyIsImNhIiwiZXNjYSIsInBlIiwibSIsImVzY2FwZSIsImNhbGwiLCJ1bmVzIiwiY2FwZSIsInVuZXNjYXBlIiwidW4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7V0FFa0IsRTtJQUFYQSxPLFFBQUFBLE8sRUFFUDs7QUFDQSxJQUFNQyxFQUFFLEdBQUcsZ0RBQVg7QUFDQSxJQUFNQyxFQUFFLEdBQUcsVUFBWDtBQUVBLElBQU1DLElBQUksR0FBRztBQUNYLE9BQUssT0FETTtBQUVYLE9BQUssTUFGTTtBQUdYLE9BQUssTUFITTtBQUlYLE9BQUssT0FKTTtBQUtYLE9BQUs7QUFMTSxDQUFiOztBQU9BLElBQU1DLEVBQUUsR0FBRyxTQUFMQSxFQUFLLENBQUFDLENBQUM7QUFBQSxTQUFJRixJQUFJLENBQUNFLENBQUQsQ0FBUjtBQUFBLENBQVo7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sSUFBTUMsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBQUwsRUFBRTtBQUFBLFNBQUlELE9BQU8sQ0FBQ08sSUFBUixDQUFhTixFQUFiLEVBQWlCQyxFQUFqQixFQUFxQkUsRUFBckIsQ0FBSjtBQUFBLENBQWpCLEMsQ0FHUDs7QUFDQSxJQUFNSSxJQUFJLEdBQUc7QUFDWCxXQUFTLEdBREU7QUFFWCxXQUFTLEdBRkU7QUFHWCxVQUFRLEdBSEc7QUFJWCxXQUFTLEdBSkU7QUFLWCxVQUFRLEdBTEc7QUFNWCxXQUFTLEdBTkU7QUFPWCxZQUFVLEdBUEM7QUFRWCxXQUFTLEdBUkU7QUFTWCxZQUFVLEdBVEM7QUFVWCxXQUFTO0FBVkUsQ0FBYjs7QUFZQSxJQUFNQyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFBSixDQUFDO0FBQUEsU0FBSUcsSUFBSSxDQUFDSCxDQUFELENBQVI7QUFBQSxDQUFkO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sSUFBTUssUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQUMsRUFBRTtBQUFBLFNBQUlYLE9BQU8sQ0FBQ08sSUFBUixDQUFhSSxFQUFiLEVBQWlCVixFQUFqQixFQUFxQlEsSUFBckIsQ0FBSjtBQUFBLENBQW5CIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoQykgMjAxNy1wcmVzZW50IGJ5IEFuZHJlYSBHaWFtbWFyY2hpIC0gQFdlYlJlZmxlY3Rpb25cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbmNvbnN0IHtyZXBsYWNlfSA9ICcnO1xuXG4vLyBlc2NhcGVcbmNvbnN0IGVzID0gLyYoPzphbXB8IzM4fGx0fCM2MHxndHwjNjJ8YXBvc3wjMzl8cXVvdHwjMzQpOy9nO1xuY29uc3QgY2EgPSAvWyY8PidcIl0vZztcblxuY29uc3QgZXNjYSA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gIFwiJ1wiOiAnJiMzOTsnLFxuICAnXCInOiAnJnF1b3Q7J1xufTtcbmNvbnN0IHBlID0gbSA9PiBlc2NhW21dO1xuXG4vKipcbiAqIFNhZmVseSBlc2NhcGUgSFRNTCBlbnRpdGllcyBzdWNoIGFzIGAmYCwgYDxgLCBgPmAsIGBcImAsIGFuZCBgJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXMgdGhlIGlucHV0IHRvIHNhZmVseSBlc2NhcGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBlc2NhcGVkIGlucHV0LCBhbmQgaXQgKip0aHJvd3MqKiBhbiBlcnJvciBpZlxuICogIHRoZSBpbnB1dCB0eXBlIGlzIHVuZXhwZWN0ZWQsIGV4Y2VwdCBmb3IgYm9vbGVhbiBhbmQgbnVtYmVycyxcbiAqICBjb252ZXJ0ZWQgYXMgc3RyaW5nLlxuICovXG5leHBvcnQgY29uc3QgZXNjYXBlID0gZXMgPT4gcmVwbGFjZS5jYWxsKGVzLCBjYSwgcGUpO1xuXG5cbi8vIHVuZXNjYXBlXG5jb25zdCB1bmVzID0ge1xuICAnJmFtcDsnOiAnJicsXG4gICcmIzM4Oyc6ICcmJyxcbiAgJyZsdDsnOiAnPCcsXG4gICcmIzYwOyc6ICc8JyxcbiAgJyZndDsnOiAnPicsXG4gICcmIzYyOyc6ICc+JyxcbiAgJyZhcG9zOyc6IFwiJ1wiLFxuICAnJiMzOTsnOiBcIidcIixcbiAgJyZxdW90Oyc6ICdcIicsXG4gICcmIzM0Oyc6ICdcIidcbn07XG5jb25zdCBjYXBlID0gbSA9PiB1bmVzW21dO1xuXG4vKipcbiAqIFNhZmVseSB1bmVzY2FwZSBwcmV2aW91c2x5IGVzY2FwZWQgZW50aXRpZXMgc3VjaCBhcyBgJmAsIGA8YCwgYD5gLCBgXCJgLFxuICogYW5kIGAnYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1biBhIHByZXZpb3VzbHkgZXNjYXBlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSB1bmVzY2FwZWQgaW5wdXQsIGFuZCBpdCAqKnRocm93cyoqIGFuIGVycm9yIGlmXG4gKiAgdGhlIGlucHV0IHR5cGUgaXMgdW5leHBlY3RlZCwgZXhjZXB0IGZvciBib29sZWFuIGFuZCBudW1iZXJzLFxuICogIGNvbnZlcnRlZCBhcyBzdHJpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCB1bmVzY2FwZSA9IHVuID0+IHJlcGxhY2UuY2FsbCh1biwgZXMsIGNhcGUpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _createClass; });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v17.0.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar l = __webpack_require__(8),\n    n = 60103,\n    p = 60106;\n\nexports.Fragment = 60107;\nexports.StrictMode = 60108;\nexports.Profiler = 60114;\nvar q = 60109,\n    r = 60110,\n    t = 60112;\nexports.Suspense = 60113;\nvar u = 60115,\n    v = 60116;\n\nif ("function" === typeof Symbol && Symbol.for) {\n  var w = Symbol.for;\n  n = w("react.element");\n  p = w("react.portal");\n  exports.Fragment = w("react.fragment");\n  exports.StrictMode = w("react.strict_mode");\n  exports.Profiler = w("react.profiler");\n  q = w("react.provider");\n  r = w("react.context");\n  t = w("react.forward_ref");\n  exports.Suspense = w("react.suspense");\n  u = w("react.memo");\n  v = w("react.lazy");\n}\n\nvar x = "function" === typeof Symbol && Symbol.iterator;\n\nfunction y(a) {\n  if (null === a || "object" !== typeof a) return null;\n  a = x && a[x] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\n\nfunction z(a) {\n  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {\n    b += "&args[]=" + encodeURIComponent(arguments[c]);\n  }\n\n  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";\n}\n\nvar A = {\n  isMounted: function isMounted() {\n    return !1;\n  },\n  enqueueForceUpdate: function enqueueForceUpdate() {},\n  enqueueReplaceState: function enqueueReplaceState() {},\n  enqueueSetState: function enqueueSetState() {}\n},\n    B = {};\n\nfunction C(a, b, c) {\n  this.props = a;\n  this.context = b;\n  this.refs = B;\n  this.updater = c || A;\n}\n\nC.prototype.isReactComponent = {};\n\nC.prototype.setState = function (a, b) {\n  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(z(85));\n  this.updater.enqueueSetState(this, a, b, "setState");\n};\n\nC.prototype.forceUpdate = function (a) {\n  this.updater.enqueueForceUpdate(this, a, "forceUpdate");\n};\n\nfunction D() {}\n\nD.prototype = C.prototype;\n\nfunction E(a, b, c) {\n  this.props = a;\n  this.context = b;\n  this.refs = B;\n  this.updater = c || A;\n}\n\nvar F = E.prototype = new D();\nF.constructor = E;\nl(F, C.prototype);\nF.isPureReactComponent = !0;\nvar G = {\n  current: null\n},\n    H = Object.prototype.hasOwnProperty,\n    I = {\n  key: !0,\n  ref: !0,\n  __self: !0,\n  __source: !0\n};\n\nfunction J(a, b, c) {\n  var e,\n      d = {},\n      k = null,\n      h = null;\n  if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {\n    H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);\n  }\n  var g = arguments.length - 2;\n  if (1 === g) d.children = c;else if (1 < g) {\n    for (var f = Array(g), m = 0; m < g; m++) {\n      f[m] = arguments[m + 2];\n    }\n\n    d.children = f;\n  }\n  if (a && a.defaultProps) for (e in g = a.defaultProps, g) {\n    void 0 === d[e] && (d[e] = g[e]);\n  }\n  return {\n    $$typeof: n,\n    type: a,\n    key: k,\n    ref: h,\n    props: d,\n    _owner: G.current\n  };\n}\n\nfunction K(a, b) {\n  return {\n    $$typeof: n,\n    type: a.type,\n    key: b,\n    ref: a.ref,\n    props: a.props,\n    _owner: a._owner\n  };\n}\n\nfunction L(a) {\n  return "object" === typeof a && null !== a && a.$$typeof === n;\n}\n\nfunction escape(a) {\n  var b = {\n    "=": "=0",\n    ":": "=2"\n  };\n  return "$" + a.replace(/[=:]/g, function (a) {\n    return b[a];\n  });\n}\n\nvar M = /\\/+/g;\n\nfunction N(a, b) {\n  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);\n}\n\nfunction O(a, b, c, e, d) {\n  var k = typeof a;\n  if ("undefined" === k || "boolean" === k) a = null;\n  var h = !1;\n  if (null === a) h = !0;else switch (k) {\n    case "string":\n    case "number":\n      h = !0;\n      break;\n\n    case "object":\n      switch (a.$$typeof) {\n        case n:\n        case p:\n          h = !0;\n      }\n\n  }\n  if (h) return h = a, d = d(h), a = "" === e ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function (a) {\n    return a;\n  })) : null != d && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;\n  h = 0;\n  e = "" === e ? "." : e + ":";\n  if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {\n    k = a[g];\n    var f = e + N(k, g);\n    h += O(k, b, c, f, d);\n  } else if (f = y(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {\n    k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);\n  } else if ("object" === k) throw b = "" + a, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));\n  return h;\n}\n\nfunction P(a, b, c) {\n  if (null == a) return a;\n  var e = [],\n      d = 0;\n  O(a, e, "", "", function (a) {\n    return b.call(c, a, d++);\n  });\n  return e;\n}\n\nfunction Q(a) {\n  if (-1 === a._status) {\n    var b = a._result;\n    b = b();\n    a._status = 0;\n    a._result = b;\n    b.then(function (b) {\n      0 === a._status && (b = b.default, a._status = 1, a._result = b);\n    }, function (b) {\n      0 === a._status && (a._status = 2, a._result = b);\n    });\n  }\n\n  if (1 === a._status) return a._result;\n  throw a._result;\n}\n\nvar R = {\n  current: null\n};\n\nfunction S() {\n  var a = R.current;\n  if (null === a) throw Error(z(321));\n  return a;\n}\n\nvar T = {\n  ReactCurrentDispatcher: R,\n  ReactCurrentBatchConfig: {\n    transition: 0\n  },\n  ReactCurrentOwner: G,\n  IsSomeRendererActing: {\n    current: !1\n  },\n  assign: l\n};\nexports.Children = {\n  map: P,\n  forEach: function forEach(a, b, c) {\n    P(a, function () {\n      b.apply(this, arguments);\n    }, c);\n  },\n  count: function count(a) {\n    var b = 0;\n    P(a, function () {\n      b++;\n    });\n    return b;\n  },\n  toArray: function toArray(a) {\n    return P(a, function (a) {\n      return a;\n    }) || [];\n  },\n  only: function only(a) {\n    if (!L(a)) throw Error(z(143));\n    return a;\n  }\n};\nexports.Component = C;\nexports.PureComponent = E;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;\n\nexports.cloneElement = function (a, b, c) {\n  if (null === a || void 0 === a) throw Error(z(267, a));\n  var e = l({}, a.props),\n      d = a.key,\n      k = a.ref,\n      h = a._owner;\n\n  if (null != b) {\n    void 0 !== b.ref && (k = b.ref, h = G.current);\n    void 0 !== b.key && (d = "" + b.key);\n    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;\n\n    for (f in b) {\n      H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);\n    }\n  }\n\n  var f = arguments.length - 2;\n  if (1 === f) e.children = c;else if (1 < f) {\n    g = Array(f);\n\n    for (var m = 0; m < f; m++) {\n      g[m] = arguments[m + 2];\n    }\n\n    e.children = g;\n  }\n  return {\n    $$typeof: n,\n    type: a.type,\n    key: d,\n    ref: k,\n    props: e,\n    _owner: h\n  };\n};\n\nexports.createContext = function (a, b) {\n  void 0 === b && (b = null);\n  a = {\n    $$typeof: r,\n    _calculateChangedBits: b,\n    _currentValue: a,\n    _currentValue2: a,\n    _threadCount: 0,\n    Provider: null,\n    Consumer: null\n  };\n  a.Provider = {\n    $$typeof: q,\n    _context: a\n  };\n  return a.Consumer = a;\n};\n\nexports.createElement = J;\n\nexports.createFactory = function (a) {\n  var b = J.bind(null, a);\n  b.type = a;\n  return b;\n};\n\nexports.createRef = function () {\n  return {\n    current: null\n  };\n};\n\nexports.forwardRef = function (a) {\n  return {\n    $$typeof: t,\n    render: a\n  };\n};\n\nexports.isValidElement = L;\n\nexports.lazy = function (a) {\n  return {\n    $$typeof: v,\n    _payload: {\n      _status: -1,\n      _result: a\n    },\n    _init: Q\n  };\n};\n\nexports.memo = function (a, b) {\n  return {\n    $$typeof: u,\n    type: a,\n    compare: void 0 === b ? null : b\n  };\n};\n\nexports.useCallback = function (a, b) {\n  return S().useCallback(a, b);\n};\n\nexports.useContext = function (a, b) {\n  return S().useContext(a, b);\n};\n\nexports.useDebugValue = function () {};\n\nexports.useEffect = function (a, b) {\n  return S().useEffect(a, b);\n};\n\nexports.useImperativeHandle = function (a, b, c) {\n  return S().useImperativeHandle(a, b, c);\n};\n\nexports.useLayoutEffect = function (a, b) {\n  return S().useLayoutEffect(a, b);\n};\n\nexports.useMemo = function (a, b) {\n  return S().useMemo(a, b);\n};\n\nexports.useReducer = function (a, b, c) {\n  return S().useReducer(a, b, c);\n};\n\nexports.useRef = function (a) {\n  return S().useRef(a);\n};\n\nexports.useState = function (a) {\n  return S().useState(a);\n};\n\nexports.version = "17.0.1";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v17.0.1\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n\n\nvar aa = __webpack_require__(0),\n    m = __webpack_require__(8),\n    r = __webpack_require__(13);\n\nfunction y(a) {\n  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {\n    b += "&args[]=" + encodeURIComponent(arguments[c]);\n  }\n\n  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";\n}\n\nif (!aa) throw Error(y(227));\nvar ba = new Set(),\n    ca = {};\n\nfunction da(a, b) {\n  ea(a, b);\n  ea(a + "Capture", b);\n}\n\nfunction ea(a, b) {\n  ca[a] = b;\n\n  for (a = 0; a < b.length; a++) {\n    ba.add(b[a]);\n  }\n}\n\nvar fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),\n    ha = /^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,\n    ia = Object.prototype.hasOwnProperty,\n    ja = {},\n    ka = {};\n\nfunction la(a) {\n  if (ia.call(ka, a)) return !0;\n  if (ia.call(ja, a)) return !1;\n  if (ha.test(a)) return ka[a] = !0;\n  ja[a] = !0;\n  return !1;\n}\n\nfunction ma(a, b, c, d) {\n  if (null !== c && 0 === c.type) return !1;\n\n  switch (typeof b) {\n    case "function":\n    case "symbol":\n      return !0;\n\n    case "boolean":\n      if (d) return !1;\n      if (null !== c) return !c.acceptsBooleans;\n      a = a.toLowerCase().slice(0, 5);\n      return "data-" !== a && "aria-" !== a;\n\n    default:\n      return !1;\n  }\n}\n\nfunction na(a, b, c, d) {\n  if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;\n  if (d) return !1;\n  if (null !== c) switch (c.type) {\n    case 3:\n      return !b;\n\n    case 4:\n      return !1 === b;\n\n    case 5:\n      return isNaN(b);\n\n    case 6:\n      return isNaN(b) || 1 > b;\n  }\n  return !1;\n}\n\nfunction B(a, b, c, d, e, f, g) {\n  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;\n  this.attributeName = d;\n  this.attributeNamespace = e;\n  this.mustUseProperty = c;\n  this.propertyName = a;\n  this.type = b;\n  this.sanitizeURL = f;\n  this.removeEmptyString = g;\n}\n\nvar D = {};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {\n  D[a] = new B(a, 0, !1, a, null, !1, !1);\n});\n[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {\n  var b = a[0];\n  D[b] = new B(b, 1, !1, a[1], null, !1, !1);\n});\n["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {\n  D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);\n});\n["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {\n  D[a] = new B(a, 2, !1, a, null, !1, !1);\n});\n"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {\n  D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);\n});\n["checked", "multiple", "muted", "selected"].forEach(function (a) {\n  D[a] = new B(a, 3, !0, a, null, !1, !1);\n});\n["capture", "download"].forEach(function (a) {\n  D[a] = new B(a, 4, !1, a, null, !1, !1);\n});\n["cols", "rows", "size", "span"].forEach(function (a) {\n  D[a] = new B(a, 6, !1, a, null, !1, !1);\n});\n["rowSpan", "start"].forEach(function (a) {\n  D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);\n});\nvar oa = /[\\-:]([a-z])/g;\n\nfunction pa(a) {\n  return a[1].toUpperCase();\n}\n\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, null, !1, !1);\n});\n"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);\n});\n["xml:base", "xml:lang", "xml:space"].forEach(function (a) {\n  var b = a.replace(oa, pa);\n  D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);\n});\n["tabIndex", "crossOrigin"].forEach(function (a) {\n  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);\n});\nD.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);\n["src", "href", "action", "formAction"].forEach(function (a) {\n  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);\n});\n\nfunction qa(a, b, c, d) {\n  var e = D.hasOwnProperty(b) ? D[b] : null;\n  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;\n  f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));\n}\n\nvar ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n    sa = 60103,\n    ta = 60106,\n    ua = 60107,\n    wa = 60108,\n    xa = 60114,\n    ya = 60109,\n    za = 60110,\n    Aa = 60112,\n    Ba = 60113,\n    Ca = 60120,\n    Da = 60115,\n    Ea = 60116,\n    Fa = 60121,\n    Ga = 60128,\n    Ha = 60129,\n    Ia = 60130,\n    Ja = 60131;\n\nif ("function" === typeof Symbol && Symbol.for) {\n  var E = Symbol.for;\n  sa = E("react.element");\n  ta = E("react.portal");\n  ua = E("react.fragment");\n  wa = E("react.strict_mode");\n  xa = E("react.profiler");\n  ya = E("react.provider");\n  za = E("react.context");\n  Aa = E("react.forward_ref");\n  Ba = E("react.suspense");\n  Ca = E("react.suspense_list");\n  Da = E("react.memo");\n  Ea = E("react.lazy");\n  Fa = E("react.block");\n  E("react.scope");\n  Ga = E("react.opaque.id");\n  Ha = E("react.debug_trace_mode");\n  Ia = E("react.offscreen");\n  Ja = E("react.legacy_hidden");\n}\n\nvar Ka = "function" === typeof Symbol && Symbol.iterator;\n\nfunction La(a) {\n  if (null === a || "object" !== typeof a) return null;\n  a = Ka && a[Ka] || a["@@iterator"];\n  return "function" === typeof a ? a : null;\n}\n\nvar Ma;\n\nfunction Na(a) {\n  if (void 0 === Ma) try {\n    throw Error();\n  } catch (c) {\n    var b = c.stack.trim().match(/\\n( *(at )?)/);\n    Ma = b && b[1] || "";\n  }\n  return "\\n" + Ma + a;\n}\n\nvar Oa = !1;\n\nfunction Pa(a, b) {\n  if (!a || Oa) return "";\n  Oa = !0;\n  var c = Error.prepareStackTrace;\n  Error.prepareStackTrace = void 0;\n\n  try {\n    if (b) {\n      if (b = function b() {\n        throw Error();\n      }, Object.defineProperty(b.prototype, "props", {\n        set: function set() {\n          throw Error();\n        }\n      }), "object" === typeof Reflect && Reflect.construct) {\n        try {\n          Reflect.construct(b, []);\n        } catch (k) {\n          var d = k;\n        }\n\n        Reflect.construct(a, [], b);\n      } else {\n        try {\n          b.call();\n        } catch (k) {\n          d = k;\n        }\n\n        a.call(b.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (k) {\n        d = k;\n      }\n\n      a();\n    }\n  } catch (k) {\n    if (k && d && "string" === typeof k.stack) {\n      for (var e = k.stack.split("\\n"), f = d.stack.split("\\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) {\n        h--;\n      }\n\n      for (; 1 <= g && 0 <= h; g--, h--) {\n        if (e[g] !== f[h]) {\n          if (1 !== g || 1 !== h) {\n            do {\n              if (g--, h--, 0 > h || e[g] !== f[h]) return "\\n" + e[g].replace(" at new ", " at ");\n            } while (1 <= g && 0 <= h);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    Oa = !1, Error.prepareStackTrace = c;\n  }\n\n  return (a = a ? a.displayName || a.name : "") ? Na(a) : "";\n}\n\nfunction Qa(a) {\n  switch (a.tag) {\n    case 5:\n      return Na(a.type);\n\n    case 16:\n      return Na("Lazy");\n\n    case 13:\n      return Na("Suspense");\n\n    case 19:\n      return Na("SuspenseList");\n\n    case 0:\n    case 2:\n    case 15:\n      return a = Pa(a.type, !1), a;\n\n    case 11:\n      return a = Pa(a.type.render, !1), a;\n\n    case 22:\n      return a = Pa(a.type._render, !1), a;\n\n    case 1:\n      return a = Pa(a.type, !0), a;\n\n    default:\n      return "";\n  }\n}\n\nfunction Ra(a) {\n  if (null == a) return null;\n  if ("function" === typeof a) return a.displayName || a.name || null;\n  if ("string" === typeof a) return a;\n\n  switch (a) {\n    case ua:\n      return "Fragment";\n\n    case ta:\n      return "Portal";\n\n    case xa:\n      return "Profiler";\n\n    case wa:\n      return "StrictMode";\n\n    case Ba:\n      return "Suspense";\n\n    case Ca:\n      return "SuspenseList";\n  }\n\n  if ("object" === typeof a) switch (a.$$typeof) {\n    case za:\n      return (a.displayName || "Context") + ".Consumer";\n\n    case ya:\n      return (a._context.displayName || "Context") + ".Provider";\n\n    case Aa:\n      var b = a.render;\n      b = b.displayName || b.name || "";\n      return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");\n\n    case Da:\n      return Ra(a.type);\n\n    case Fa:\n      return Ra(a._render);\n\n    case Ea:\n      b = a._payload;\n      a = a._init;\n\n      try {\n        return Ra(a(b));\n      } catch (c) {}\n\n  }\n  return null;\n}\n\nfunction Sa(a) {\n  switch (typeof a) {\n    case "boolean":\n    case "number":\n    case "object":\n    case "string":\n    case "undefined":\n      return a;\n\n    default:\n      return "";\n  }\n}\n\nfunction Ta(a) {\n  var b = a.type;\n  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);\n}\n\nfunction Ua(a) {\n  var b = Ta(a) ? "checked" : "value",\n      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),\n      d = "" + a[b];\n\n  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {\n    var e = c.get,\n        f = c.set;\n    Object.defineProperty(a, b, {\n      configurable: !0,\n      get: function get() {\n        return e.call(this);\n      },\n      set: function set(a) {\n        d = "" + a;\n        f.call(this, a);\n      }\n    });\n    Object.defineProperty(a, b, {\n      enumerable: c.enumerable\n    });\n    return {\n      getValue: function getValue() {\n        return d;\n      },\n      setValue: function setValue(a) {\n        d = "" + a;\n      },\n      stopTracking: function stopTracking() {\n        a._valueTracker = null;\n        delete a[b];\n      }\n    };\n  }\n}\n\nfunction Va(a) {\n  a._valueTracker || (a._valueTracker = Ua(a));\n}\n\nfunction Wa(a) {\n  if (!a) return !1;\n  var b = a._valueTracker;\n  if (!b) return !0;\n  var c = b.getValue();\n  var d = "";\n  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);\n  a = d;\n  return a !== c ? (b.setValue(a), !0) : !1;\n}\n\nfunction Xa(a) {\n  a = a || ("undefined" !== typeof document ? document : void 0);\n  if ("undefined" === typeof a) return null;\n\n  try {\n    return a.activeElement || a.body;\n  } catch (b) {\n    return a.body;\n  }\n}\n\nfunction Ya(a, b) {\n  var c = b.checked;\n  return m({}, b, {\n    defaultChecked: void 0,\n    defaultValue: void 0,\n    value: void 0,\n    checked: null != c ? c : a._wrapperState.initialChecked\n  });\n}\n\nfunction Za(a, b) {\n  var c = null == b.defaultValue ? "" : b.defaultValue,\n      d = null != b.checked ? b.checked : b.defaultChecked;\n  c = Sa(null != b.value ? b.value : c);\n  a._wrapperState = {\n    initialChecked: d,\n    initialValue: c,\n    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value\n  };\n}\n\nfunction $a(a, b) {\n  b = b.checked;\n  null != b && qa(a, "checked", b, !1);\n}\n\nfunction ab(a, b) {\n  $a(a, b);\n  var c = Sa(b.value),\n      d = b.type;\n  if (null != c) {\n    if ("number" === d) {\n      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;\n    } else a.value !== "" + c && (a.value = "" + c);\n  } else if ("submit" === d || "reset" === d) {\n    a.removeAttribute("value");\n    return;\n  }\n  b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));\n  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);\n}\n\nfunction cb(a, b, c) {\n  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {\n    var d = b.type;\n    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;\n    b = "" + a._wrapperState.initialValue;\n    c || b === a.value || (a.value = b);\n    a.defaultValue = b;\n  }\n\n  c = a.name;\n  "" !== c && (a.name = "");\n  a.defaultChecked = !!a._wrapperState.initialChecked;\n  "" !== c && (a.name = c);\n}\n\nfunction bb(a, b, c) {\n  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);\n}\n\nfunction db(a) {\n  var b = "";\n  aa.Children.forEach(a, function (a) {\n    null != a && (b += a);\n  });\n  return b;\n}\n\nfunction eb(a, b) {\n  a = m({\n    children: void 0\n  }, b);\n  if (b = db(b.children)) a.children = b;\n  return a;\n}\n\nfunction fb(a, b, c, d) {\n  a = a.options;\n\n  if (b) {\n    b = {};\n\n    for (var e = 0; e < c.length; e++) {\n      b["$" + c[e]] = !0;\n    }\n\n    for (c = 0; c < a.length; c++) {\n      e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);\n    }\n  } else {\n    c = "" + Sa(c);\n    b = null;\n\n    for (e = 0; e < a.length; e++) {\n      if (a[e].value === c) {\n        a[e].selected = !0;\n        d && (a[e].defaultSelected = !0);\n        return;\n      }\n\n      null !== b || a[e].disabled || (b = a[e]);\n    }\n\n    null !== b && (b.selected = !0);\n  }\n}\n\nfunction gb(a, b) {\n  if (null != b.dangerouslySetInnerHTML) throw Error(y(91));\n  return m({}, b, {\n    value: void 0,\n    defaultValue: void 0,\n    children: "" + a._wrapperState.initialValue\n  });\n}\n\nfunction hb(a, b) {\n  var c = b.value;\n\n  if (null == c) {\n    c = b.children;\n    b = b.defaultValue;\n\n    if (null != c) {\n      if (null != b) throw Error(y(92));\n\n      if (Array.isArray(c)) {\n        if (!(1 >= c.length)) throw Error(y(93));\n        c = c[0];\n      }\n\n      b = c;\n    }\n\n    null == b && (b = "");\n    c = b;\n  }\n\n  a._wrapperState = {\n    initialValue: Sa(c)\n  };\n}\n\nfunction ib(a, b) {\n  var c = Sa(b.value),\n      d = Sa(b.defaultValue);\n  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));\n  null != d && (a.defaultValue = "" + d);\n}\n\nfunction jb(a) {\n  var b = a.textContent;\n  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);\n}\n\nvar kb = {\n  html: "http://www.w3.org/1999/xhtml",\n  mathml: "http://www.w3.org/1998/Math/MathML",\n  svg: "http://www.w3.org/2000/svg"\n};\n\nfunction lb(a) {\n  switch (a) {\n    case "svg":\n      return "http://www.w3.org/2000/svg";\n\n    case "math":\n      return "http://www.w3.org/1998/Math/MathML";\n\n    default:\n      return "http://www.w3.org/1999/xhtml";\n  }\n}\n\nfunction mb(a, b) {\n  return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;\n}\n\nvar nb,\n    ob = function (a) {\n  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {\n    MSApp.execUnsafeLocalFunction(function () {\n      return a(b, c, d, e);\n    });\n  } : a;\n}(function (a, b) {\n  if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;else {\n    nb = nb || document.createElement("div");\n    nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";\n\n    for (b = nb.firstChild; a.firstChild;) {\n      a.removeChild(a.firstChild);\n    }\n\n    for (; b.firstChild;) {\n      a.appendChild(b.firstChild);\n    }\n  }\n});\n\nfunction pb(a, b) {\n  if (b) {\n    var c = a.firstChild;\n\n    if (c && c === a.lastChild && 3 === c.nodeType) {\n      c.nodeValue = b;\n      return;\n    }\n  }\n\n  a.textContent = b;\n}\n\nvar qb = {\n  animationIterationCount: !0,\n  borderImageOutset: !0,\n  borderImageSlice: !0,\n  borderImageWidth: !0,\n  boxFlex: !0,\n  boxFlexGroup: !0,\n  boxOrdinalGroup: !0,\n  columnCount: !0,\n  columns: !0,\n  flex: !0,\n  flexGrow: !0,\n  flexPositive: !0,\n  flexShrink: !0,\n  flexNegative: !0,\n  flexOrder: !0,\n  gridArea: !0,\n  gridRow: !0,\n  gridRowEnd: !0,\n  gridRowSpan: !0,\n  gridRowStart: !0,\n  gridColumn: !0,\n  gridColumnEnd: !0,\n  gridColumnSpan: !0,\n  gridColumnStart: !0,\n  fontWeight: !0,\n  lineClamp: !0,\n  lineHeight: !0,\n  opacity: !0,\n  order: !0,\n  orphans: !0,\n  tabSize: !0,\n  widows: !0,\n  zIndex: !0,\n  zoom: !0,\n  fillOpacity: !0,\n  floodOpacity: !0,\n  stopOpacity: !0,\n  strokeDasharray: !0,\n  strokeDashoffset: !0,\n  strokeMiterlimit: !0,\n  strokeOpacity: !0,\n  strokeWidth: !0\n},\n    rb = ["Webkit", "ms", "Moz", "O"];\nObject.keys(qb).forEach(function (a) {\n  rb.forEach(function (b) {\n    b = b + a.charAt(0).toUpperCase() + a.substring(1);\n    qb[b] = qb[a];\n  });\n});\n\nfunction sb(a, b, c) {\n  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";\n}\n\nfunction tb(a, b) {\n  a = a.style;\n\n  for (var c in b) {\n    if (b.hasOwnProperty(c)) {\n      var d = 0 === c.indexOf("--"),\n          e = sb(c, b[c], d);\n      "float" === c && (c = "cssFloat");\n      d ? a.setProperty(c, e) : a[c] = e;\n    }\n  }\n}\n\nvar ub = m({\n  menuitem: !0\n}, {\n  area: !0,\n  base: !0,\n  br: !0,\n  col: !0,\n  embed: !0,\n  hr: !0,\n  img: !0,\n  input: !0,\n  keygen: !0,\n  link: !0,\n  meta: !0,\n  param: !0,\n  source: !0,\n  track: !0,\n  wbr: !0\n});\n\nfunction vb(a, b) {\n  if (b) {\n    if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));\n\n    if (null != b.dangerouslySetInnerHTML) {\n      if (null != b.children) throw Error(y(60));\n      if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(y(61));\n    }\n\n    if (null != b.style && "object" !== typeof b.style) throw Error(y(62));\n  }\n}\n\nfunction wb(a, b) {\n  if (-1 === a.indexOf("-")) return "string" === typeof b.is;\n\n  switch (a) {\n    case "annotation-xml":\n    case "color-profile":\n    case "font-face":\n    case "font-face-src":\n    case "font-face-uri":\n    case "font-face-format":\n    case "font-face-name":\n    case "missing-glyph":\n      return !1;\n\n    default:\n      return !0;\n  }\n}\n\nfunction xb(a) {\n  a = a.target || a.srcElement || window;\n  a.correspondingUseElement && (a = a.correspondingUseElement);\n  return 3 === a.nodeType ? a.parentNode : a;\n}\n\nvar yb = null,\n    zb = null,\n    Ab = null;\n\nfunction Bb(a) {\n  if (a = Cb(a)) {\n    if ("function" !== typeof yb) throw Error(y(280));\n    var b = a.stateNode;\n    b && (b = Db(b), yb(a.stateNode, a.type, b));\n  }\n}\n\nfunction Eb(a) {\n  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;\n}\n\nfunction Fb() {\n  if (zb) {\n    var a = zb,\n        b = Ab;\n    Ab = zb = null;\n    Bb(a);\n    if (b) for (a = 0; a < b.length; a++) {\n      Bb(b[a]);\n    }\n  }\n}\n\nfunction Gb(a, b) {\n  return a(b);\n}\n\nfunction Hb(a, b, c, d, e) {\n  return a(b, c, d, e);\n}\n\nfunction Ib() {}\n\nvar Jb = Gb,\n    Kb = !1,\n    Lb = !1;\n\nfunction Mb() {\n  if (null !== zb || null !== Ab) Ib(), Fb();\n}\n\nfunction Nb(a, b, c) {\n  if (Lb) return a(b, c);\n  Lb = !0;\n\n  try {\n    return Jb(a, b, c);\n  } finally {\n    Lb = !1, Mb();\n  }\n}\n\nfunction Ob(a, b) {\n  var c = a.stateNode;\n  if (null === c) return null;\n  var d = Db(c);\n  if (null === d) return null;\n  c = d[b];\n\n  a: switch (b) {\n    case "onClick":\n    case "onClickCapture":\n    case "onDoubleClick":\n    case "onDoubleClickCapture":\n    case "onMouseDown":\n    case "onMouseDownCapture":\n    case "onMouseMove":\n    case "onMouseMoveCapture":\n    case "onMouseUp":\n    case "onMouseUpCapture":\n    case "onMouseEnter":\n      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));\n      a = !d;\n      break a;\n\n    default:\n      a = !1;\n  }\n\n  if (a) return null;\n  if (c && "function" !== typeof c) throw Error(y(231, b, typeof c));\n  return c;\n}\n\nvar Pb = !1;\nif (fa) try {\n  var Qb = {};\n  Object.defineProperty(Qb, "passive", {\n    get: function get() {\n      Pb = !0;\n    }\n  });\n  window.addEventListener("test", Qb, Qb);\n  window.removeEventListener("test", Qb, Qb);\n} catch (a) {\n  Pb = !1;\n}\n\nfunction Rb(a, b, c, d, e, f, g, h, k) {\n  var l = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    b.apply(c, l);\n  } catch (n) {\n    this.onError(n);\n  }\n}\n\nvar Sb = !1,\n    Tb = null,\n    Ub = !1,\n    Vb = null,\n    Wb = {\n  onError: function onError(a) {\n    Sb = !0;\n    Tb = a;\n  }\n};\n\nfunction Xb(a, b, c, d, e, f, g, h, k) {\n  Sb = !1;\n  Tb = null;\n  Rb.apply(Wb, arguments);\n}\n\nfunction Yb(a, b, c, d, e, f, g, h, k) {\n  Xb.apply(this, arguments);\n\n  if (Sb) {\n    if (Sb) {\n      var l = Tb;\n      Sb = !1;\n      Tb = null;\n    } else throw Error(y(198));\n\n    Ub || (Ub = !0, Vb = l);\n  }\n}\n\nfunction Zb(a) {\n  var b = a,\n      c = a;\n  if (a.alternate) for (; b.return;) {\n    b = b.return;\n  } else {\n    a = b;\n\n    do {\n      b = a, 0 !== (b.flags & 1026) && (c = b.return), a = b.return;\n    } while (a);\n  }\n  return 3 === b.tag ? c : null;\n}\n\nfunction $b(a) {\n  if (13 === a.tag) {\n    var b = a.memoizedState;\n    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));\n    if (null !== b) return b.dehydrated;\n  }\n\n  return null;\n}\n\nfunction ac(a) {\n  if (Zb(a) !== a) throw Error(y(188));\n}\n\nfunction bc(a) {\n  var b = a.alternate;\n\n  if (!b) {\n    b = Zb(a);\n    if (null === b) throw Error(y(188));\n    return b !== a ? null : a;\n  }\n\n  for (var c = a, d = b;;) {\n    var e = c.return;\n    if (null === e) break;\n    var f = e.alternate;\n\n    if (null === f) {\n      d = e.return;\n\n      if (null !== d) {\n        c = d;\n        continue;\n      }\n\n      break;\n    }\n\n    if (e.child === f.child) {\n      for (f = e.child; f;) {\n        if (f === c) return ac(e), a;\n        if (f === d) return ac(e), b;\n        f = f.sibling;\n      }\n\n      throw Error(y(188));\n    }\n\n    if (c.return !== d.return) c = e, d = f;else {\n      for (var g = !1, h = e.child; h;) {\n        if (h === c) {\n          g = !0;\n          c = e;\n          d = f;\n          break;\n        }\n\n        if (h === d) {\n          g = !0;\n          d = e;\n          c = f;\n          break;\n        }\n\n        h = h.sibling;\n      }\n\n      if (!g) {\n        for (h = f.child; h;) {\n          if (h === c) {\n            g = !0;\n            c = f;\n            d = e;\n            break;\n          }\n\n          if (h === d) {\n            g = !0;\n            d = f;\n            c = e;\n            break;\n          }\n\n          h = h.sibling;\n        }\n\n        if (!g) throw Error(y(189));\n      }\n    }\n    if (c.alternate !== d) throw Error(y(190));\n  }\n\n  if (3 !== c.tag) throw Error(y(188));\n  return c.stateNode.current === c ? a : b;\n}\n\nfunction cc(a) {\n  a = bc(a);\n  if (!a) return null;\n\n  for (var b = a;;) {\n    if (5 === b.tag || 6 === b.tag) return b;\n    if (b.child) b.child.return = b, b = b.child;else {\n      if (b === a) break;\n\n      for (; !b.sibling;) {\n        if (!b.return || b.return === a) return null;\n        b = b.return;\n      }\n\n      b.sibling.return = b.return;\n      b = b.sibling;\n    }\n  }\n\n  return null;\n}\n\nfunction dc(a, b) {\n  for (var c = a.alternate; null !== b;) {\n    if (b === a || b === c) return !0;\n    b = b.return;\n  }\n\n  return !1;\n}\n\nvar ec,\n    fc,\n    gc,\n    hc,\n    ic = !1,\n    jc = [],\n    kc = null,\n    lc = null,\n    mc = null,\n    nc = new Map(),\n    oc = new Map(),\n    pc = [],\n    qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");\n\nfunction rc(a, b, c, d, e) {\n  return {\n    blockedOn: a,\n    domEventName: b,\n    eventSystemFlags: c | 16,\n    nativeEvent: e,\n    targetContainers: [d]\n  };\n}\n\nfunction sc(a, b) {\n  switch (a) {\n    case "focusin":\n    case "focusout":\n      kc = null;\n      break;\n\n    case "dragenter":\n    case "dragleave":\n      lc = null;\n      break;\n\n    case "mouseover":\n    case "mouseout":\n      mc = null;\n      break;\n\n    case "pointerover":\n    case "pointerout":\n      nc.delete(b.pointerId);\n      break;\n\n    case "gotpointercapture":\n    case "lostpointercapture":\n      oc.delete(b.pointerId);\n  }\n}\n\nfunction tc(a, b, c, d, e, f) {\n  if (null === a || a.nativeEvent !== f) return a = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a;\n  a.eventSystemFlags |= d;\n  b = a.targetContainers;\n  null !== e && -1 === b.indexOf(e) && b.push(e);\n  return a;\n}\n\nfunction uc(a, b, c, d, e) {\n  switch (b) {\n    case "focusin":\n      return kc = tc(kc, a, b, c, d, e), !0;\n\n    case "dragenter":\n      return lc = tc(lc, a, b, c, d, e), !0;\n\n    case "mouseover":\n      return mc = tc(mc, a, b, c, d, e), !0;\n\n    case "pointerover":\n      var f = e.pointerId;\n      nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));\n      return !0;\n\n    case "gotpointercapture":\n      return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;\n  }\n\n  return !1;\n}\n\nfunction vc(a) {\n  var b = wc(a.target);\n\n  if (null !== b) {\n    var c = Zb(b);\n    if (null !== c) if (b = c.tag, 13 === b) {\n      if (b = $b(c), null !== b) {\n        a.blockedOn = b;\n        hc(a.lanePriority, function () {\n          r.unstable_runWithPriority(a.priority, function () {\n            gc(c);\n          });\n        });\n        return;\n      }\n    } else if (3 === b && c.stateNode.hydrate) {\n      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;\n      return;\n    }\n  }\n\n  a.blockedOn = null;\n}\n\nfunction xc(a) {\n  if (null !== a.blockedOn) return !1;\n\n  for (var b = a.targetContainers; 0 < b.length;) {\n    var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);\n    if (null !== c) return b = Cb(c), null !== b && fc(b), a.blockedOn = c, !1;\n    b.shift();\n  }\n\n  return !0;\n}\n\nfunction zc(a, b, c) {\n  xc(a) && c.delete(b);\n}\n\nfunction Ac() {\n  for (ic = !1; 0 < jc.length;) {\n    var a = jc[0];\n\n    if (null !== a.blockedOn) {\n      a = Cb(a.blockedOn);\n      null !== a && ec(a);\n      break;\n    }\n\n    for (var b = a.targetContainers; 0 < b.length;) {\n      var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);\n\n      if (null !== c) {\n        a.blockedOn = c;\n        break;\n      }\n\n      b.shift();\n    }\n\n    null === a.blockedOn && jc.shift();\n  }\n\n  null !== kc && xc(kc) && (kc = null);\n  null !== lc && xc(lc) && (lc = null);\n  null !== mc && xc(mc) && (mc = null);\n  nc.forEach(zc);\n  oc.forEach(zc);\n}\n\nfunction Bc(a, b) {\n  a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));\n}\n\nfunction Cc(a) {\n  function b(b) {\n    return Bc(b, a);\n  }\n\n  if (0 < jc.length) {\n    Bc(jc[0], a);\n\n    for (var c = 1; c < jc.length; c++) {\n      var d = jc[c];\n      d.blockedOn === a && (d.blockedOn = null);\n    }\n  }\n\n  null !== kc && Bc(kc, a);\n  null !== lc && Bc(lc, a);\n  null !== mc && Bc(mc, a);\n  nc.forEach(b);\n  oc.forEach(b);\n\n  for (c = 0; c < pc.length; c++) {\n    d = pc[c], d.blockedOn === a && (d.blockedOn = null);\n  }\n\n  for (; 0 < pc.length && (c = pc[0], null === c.blockedOn);) {\n    vc(c), null === c.blockedOn && pc.shift();\n  }\n}\n\nfunction Dc(a, b) {\n  var c = {};\n  c[a.toLowerCase()] = b.toLowerCase();\n  c["Webkit" + a] = "webkit" + b;\n  c["Moz" + a] = "moz" + b;\n  return c;\n}\n\nvar Ec = {\n  animationend: Dc("Animation", "AnimationEnd"),\n  animationiteration: Dc("Animation", "AnimationIteration"),\n  animationstart: Dc("Animation", "AnimationStart"),\n  transitionend: Dc("Transition", "TransitionEnd")\n},\n    Fc = {},\n    Gc = {};\nfa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);\n\nfunction Hc(a) {\n  if (Fc[a]) return Fc[a];\n  if (!Ec[a]) return a;\n  var b = Ec[a],\n      c;\n\n  for (c in b) {\n    if (b.hasOwnProperty(c) && c in Gc) return Fc[a] = b[c];\n  }\n\n  return a;\n}\n\nvar Ic = Hc("animationend"),\n    Jc = Hc("animationiteration"),\n    Kc = Hc("animationstart"),\n    Lc = Hc("transitionend"),\n    Mc = new Map(),\n    Nc = new Map(),\n    Oc = ["abort", "abort", Ic, "animationEnd", Jc, "animationIteration", Kc, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", Lc, "transitionEnd", "waiting", "waiting"];\n\nfunction Pc(a, b) {\n  for (var c = 0; c < a.length; c += 2) {\n    var d = a[c],\n        e = a[c + 1];\n    e = "on" + (e[0].toUpperCase() + e.slice(1));\n    Nc.set(d, b);\n    Mc.set(d, e);\n    da(e, [d]);\n  }\n}\n\nvar Qc = r.unstable_now;\nQc();\nvar F = 8;\n\nfunction Rc(a) {\n  if (0 !== (1 & a)) return F = 15, 1;\n  if (0 !== (2 & a)) return F = 14, 2;\n  if (0 !== (4 & a)) return F = 13, 4;\n  var b = 24 & a;\n  if (0 !== b) return F = 12, b;\n  if (0 !== (a & 32)) return F = 11, 32;\n  b = 192 & a;\n  if (0 !== b) return F = 10, b;\n  if (0 !== (a & 256)) return F = 9, 256;\n  b = 3584 & a;\n  if (0 !== b) return F = 8, b;\n  if (0 !== (a & 4096)) return F = 7, 4096;\n  b = 4186112 & a;\n  if (0 !== b) return F = 6, b;\n  b = 62914560 & a;\n  if (0 !== b) return F = 5, b;\n  if (a & 67108864) return F = 4, 67108864;\n  if (0 !== (a & 134217728)) return F = 3, 134217728;\n  b = 805306368 & a;\n  if (0 !== b) return F = 2, b;\n  if (0 !== (1073741824 & a)) return F = 1, 1073741824;\n  F = 8;\n  return a;\n}\n\nfunction Sc(a) {\n  switch (a) {\n    case 99:\n      return 15;\n\n    case 98:\n      return 10;\n\n    case 97:\n    case 96:\n      return 8;\n\n    case 95:\n      return 2;\n\n    default:\n      return 0;\n  }\n}\n\nfunction Tc(a) {\n  switch (a) {\n    case 15:\n    case 14:\n      return 99;\n\n    case 13:\n    case 12:\n    case 11:\n    case 10:\n      return 98;\n\n    case 9:\n    case 8:\n    case 7:\n    case 6:\n    case 4:\n    case 5:\n      return 97;\n\n    case 3:\n    case 2:\n    case 1:\n      return 95;\n\n    case 0:\n      return 90;\n\n    default:\n      throw Error(y(358, a));\n  }\n}\n\nfunction Uc(a, b) {\n  var c = a.pendingLanes;\n  if (0 === c) return F = 0;\n  var d = 0,\n      e = 0,\n      f = a.expiredLanes,\n      g = a.suspendedLanes,\n      h = a.pingedLanes;\n  if (0 !== f) d = f, e = F = 15;else if (f = c & 134217727, 0 !== f) {\n    var k = f & ~g;\n    0 !== k ? (d = Rc(k), e = F) : (h &= f, 0 !== h && (d = Rc(h), e = F));\n  } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F) : 0 !== h && (d = Rc(h), e = F);\n  if (0 === d) return 0;\n  d = 31 - Vc(d);\n  d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;\n\n  if (0 !== b && b !== d && 0 === (b & g)) {\n    Rc(b);\n    if (e <= F) return b;\n    F = e;\n  }\n\n  b = a.entangledLanes;\n  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) {\n    c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;\n  }\n  return d;\n}\n\nfunction Wc(a) {\n  a = a.pendingLanes & -1073741825;\n  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;\n}\n\nfunction Xc(a, b) {\n  switch (a) {\n    case 15:\n      return 1;\n\n    case 14:\n      return 2;\n\n    case 12:\n      return a = Yc(24 & ~b), 0 === a ? Xc(10, b) : a;\n\n    case 10:\n      return a = Yc(192 & ~b), 0 === a ? Xc(8, b) : a;\n\n    case 8:\n      return a = Yc(3584 & ~b), 0 === a && (a = Yc(4186112 & ~b), 0 === a && (a = 512)), a;\n\n    case 2:\n      return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;\n  }\n\n  throw Error(y(358, a));\n}\n\nfunction Yc(a) {\n  return a & -a;\n}\n\nfunction Zc(a) {\n  for (var b = [], c = 0; 31 > c; c++) {\n    b.push(a);\n  }\n\n  return b;\n}\n\nfunction $c(a, b, c) {\n  a.pendingLanes |= b;\n  var d = b - 1;\n  a.suspendedLanes &= d;\n  a.pingedLanes &= d;\n  a = a.eventTimes;\n  b = 31 - Vc(b);\n  a[b] = c;\n}\n\nvar Vc = Math.clz32 ? Math.clz32 : ad,\n    bd = Math.log,\n    cd = Math.LN2;\n\nfunction ad(a) {\n  return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;\n}\n\nvar dd = r.unstable_UserBlockingPriority,\n    ed = r.unstable_runWithPriority,\n    fd = !0;\n\nfunction gd(a, b, c, d) {\n  Kb || Ib();\n  var e = hd,\n      f = Kb;\n  Kb = !0;\n\n  try {\n    Hb(e, a, b, c, d);\n  } finally {\n    (Kb = f) || Mb();\n  }\n}\n\nfunction id(a, b, c, d) {\n  ed(dd, hd.bind(null, a, b, c, d));\n}\n\nfunction hd(a, b, c, d) {\n  if (fd) {\n    var e;\n    if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) a = rc(null, a, b, c, d), jc.push(a);else {\n      var f = yc(a, b, c, d);\n      if (null === f) e && sc(a, d);else {\n        if (e) {\n          if (-1 < qc.indexOf(a)) {\n            a = rc(f, a, b, c, d);\n            jc.push(a);\n            return;\n          }\n\n          if (uc(f, a, b, c, d)) return;\n          sc(a, d);\n        }\n\n        jd(a, b, d, null, c);\n      }\n    }\n  }\n}\n\nfunction yc(a, b, c, d) {\n  var e = xb(d);\n  e = wc(e);\n\n  if (null !== e) {\n    var f = Zb(e);\n    if (null === f) e = null;else {\n      var g = f.tag;\n\n      if (13 === g) {\n        e = $b(f);\n        if (null !== e) return e;\n        e = null;\n      } else if (3 === g) {\n        if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;\n        e = null;\n      } else f !== e && (e = null);\n    }\n  }\n\n  jd(a, b, d, e, c);\n  return null;\n}\n\nvar kd = null,\n    ld = null,\n    md = null;\n\nfunction nd() {\n  if (md) return md;\n  var a,\n      b = ld,\n      c = b.length,\n      d,\n      e = "value" in kd ? kd.value : kd.textContent,\n      f = e.length;\n\n  for (a = 0; a < c && b[a] === e[a]; a++) {\n    ;\n  }\n\n  var g = c - a;\n\n  for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {\n    ;\n  }\n\n  return md = e.slice(a, 1 < d ? 1 - d : void 0);\n}\n\nfunction od(a) {\n  var b = a.keyCode;\n  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;\n  10 === a && (a = 13);\n  return 32 <= a || 13 === a ? a : 0;\n}\n\nfunction pd() {\n  return !0;\n}\n\nfunction qd() {\n  return !1;\n}\n\nfunction rd(a) {\n  function b(b, d, e, f, g) {\n    this._reactName = b;\n    this._targetInst = e;\n    this.type = d;\n    this.nativeEvent = f;\n    this.target = g;\n    this.currentTarget = null;\n\n    for (var c in a) {\n      a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);\n    }\n\n    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;\n    this.isPropagationStopped = qd;\n    return this;\n  }\n\n  m(b.prototype, {\n    preventDefault: function preventDefault() {\n      this.defaultPrevented = !0;\n      var a = this.nativeEvent;\n      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);\n    },\n    stopPropagation: function stopPropagation() {\n      var a = this.nativeEvent;\n      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);\n    },\n    persist: function persist() {},\n    isPersistent: pd\n  });\n  return b;\n}\n\nvar sd = {\n  eventPhase: 0,\n  bubbles: 0,\n  cancelable: 0,\n  timeStamp: function timeStamp(a) {\n    return a.timeStamp || Date.now();\n  },\n  defaultPrevented: 0,\n  isTrusted: 0\n},\n    td = rd(sd),\n    ud = m({}, sd, {\n  view: 0,\n  detail: 0\n}),\n    vd = rd(ud),\n    wd,\n    xd,\n    yd,\n    Ad = m({}, ud, {\n  screenX: 0,\n  screenY: 0,\n  clientX: 0,\n  clientY: 0,\n  pageX: 0,\n  pageY: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  getModifierState: zd,\n  button: 0,\n  buttons: 0,\n  relatedTarget: function relatedTarget(a) {\n    return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;\n  },\n  movementX: function movementX(a) {\n    if ("movementX" in a) return a.movementX;\n    a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);\n    return wd;\n  },\n  movementY: function movementY(a) {\n    return "movementY" in a ? a.movementY : xd;\n  }\n}),\n    Bd = rd(Ad),\n    Cd = m({}, Ad, {\n  dataTransfer: 0\n}),\n    Dd = rd(Cd),\n    Ed = m({}, ud, {\n  relatedTarget: 0\n}),\n    Fd = rd(Ed),\n    Gd = m({}, sd, {\n  animationName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n}),\n    Hd = rd(Gd),\n    Id = m({}, sd, {\n  clipboardData: function clipboardData(a) {\n    return "clipboardData" in a ? a.clipboardData : window.clipboardData;\n  }\n}),\n    Jd = rd(Id),\n    Kd = m({}, sd, {\n  data: 0\n}),\n    Ld = rd(Kd),\n    Md = {\n  Esc: "Escape",\n  Spacebar: " ",\n  Left: "ArrowLeft",\n  Up: "ArrowUp",\n  Right: "ArrowRight",\n  Down: "ArrowDown",\n  Del: "Delete",\n  Win: "OS",\n  Menu: "ContextMenu",\n  Apps: "ContextMenu",\n  Scroll: "ScrollLock",\n  MozPrintableKey: "Unidentified"\n},\n    Nd = {\n  8: "Backspace",\n  9: "Tab",\n  12: "Clear",\n  13: "Enter",\n  16: "Shift",\n  17: "Control",\n  18: "Alt",\n  19: "Pause",\n  20: "CapsLock",\n  27: "Escape",\n  32: " ",\n  33: "PageUp",\n  34: "PageDown",\n  35: "End",\n  36: "Home",\n  37: "ArrowLeft",\n  38: "ArrowUp",\n  39: "ArrowRight",\n  40: "ArrowDown",\n  45: "Insert",\n  46: "Delete",\n  112: "F1",\n  113: "F2",\n  114: "F3",\n  115: "F4",\n  116: "F5",\n  117: "F6",\n  118: "F7",\n  119: "F8",\n  120: "F9",\n  121: "F10",\n  122: "F11",\n  123: "F12",\n  144: "NumLock",\n  145: "ScrollLock",\n  224: "Meta"\n},\n    Od = {\n  Alt: "altKey",\n  Control: "ctrlKey",\n  Meta: "metaKey",\n  Shift: "shiftKey"\n};\n\nfunction Pd(a) {\n  var b = this.nativeEvent;\n  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;\n}\n\nfunction zd() {\n  return Pd;\n}\n\nvar Qd = m({}, ud, {\n  key: function key(a) {\n    if (a.key) {\n      var b = Md[a.key] || a.key;\n      if ("Unidentified" !== b) return b;\n    }\n\n    return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";\n  },\n  code: 0,\n  location: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  repeat: 0,\n  locale: 0,\n  getModifierState: zd,\n  charCode: function charCode(a) {\n    return "keypress" === a.type ? od(a) : 0;\n  },\n  keyCode: function keyCode(a) {\n    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n  },\n  which: function which(a) {\n    return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;\n  }\n}),\n    Rd = rd(Qd),\n    Sd = m({}, Ad, {\n  pointerId: 0,\n  width: 0,\n  height: 0,\n  pressure: 0,\n  tangentialPressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  twist: 0,\n  pointerType: 0,\n  isPrimary: 0\n}),\n    Td = rd(Sd),\n    Ud = m({}, ud, {\n  touches: 0,\n  targetTouches: 0,\n  changedTouches: 0,\n  altKey: 0,\n  metaKey: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  getModifierState: zd\n}),\n    Vd = rd(Ud),\n    Wd = m({}, sd, {\n  propertyName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0\n}),\n    Xd = rd(Wd),\n    Yd = m({}, Ad, {\n  deltaX: function deltaX(a) {\n    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;\n  },\n  deltaY: function deltaY(a) {\n    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;\n  },\n  deltaZ: 0,\n  deltaMode: 0\n}),\n    Zd = rd(Yd),\n    $d = [9, 13, 27, 32],\n    ae = fa && "CompositionEvent" in window,\n    be = null;\nfa && "documentMode" in document && (be = document.documentMode);\nvar ce = fa && "TextEvent" in window && !be,\n    de = fa && (!ae || be && 8 < be && 11 >= be),\n    ee = String.fromCharCode(32),\n    fe = !1;\n\nfunction ge(a, b) {\n  switch (a) {\n    case "keyup":\n      return -1 !== $d.indexOf(b.keyCode);\n\n    case "keydown":\n      return 229 !== b.keyCode;\n\n    case "keypress":\n    case "mousedown":\n    case "focusout":\n      return !0;\n\n    default:\n      return !1;\n  }\n}\n\nfunction he(a) {\n  a = a.detail;\n  return "object" === typeof a && "data" in a ? a.data : null;\n}\n\nvar ie = !1;\n\nfunction je(a, b) {\n  switch (a) {\n    case "compositionend":\n      return he(b);\n\n    case "keypress":\n      if (32 !== b.which) return null;\n      fe = !0;\n      return ee;\n\n    case "textInput":\n      return a = b.data, a === ee && fe ? null : a;\n\n    default:\n      return null;\n  }\n}\n\nfunction ke(a, b) {\n  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;\n\n  switch (a) {\n    case "paste":\n      return null;\n\n    case "keypress":\n      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {\n        if (b.char && 1 < b.char.length) return b.char;\n        if (b.which) return String.fromCharCode(b.which);\n      }\n\n      return null;\n\n    case "compositionend":\n      return de && "ko" !== b.locale ? null : b.data;\n\n    default:\n      return null;\n  }\n}\n\nvar le = {\n  color: !0,\n  date: !0,\n  datetime: !0,\n  "datetime-local": !0,\n  email: !0,\n  month: !0,\n  number: !0,\n  password: !0,\n  range: !0,\n  search: !0,\n  tel: !0,\n  text: !0,\n  time: !0,\n  url: !0,\n  week: !0\n};\n\nfunction me(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;\n}\n\nfunction ne(a, b, c, d) {\n  Eb(d);\n  b = oe(b, "onChange");\n  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({\n    event: c,\n    listeners: b\n  }));\n}\n\nvar pe = null,\n    qe = null;\n\nfunction re(a) {\n  se(a, 0);\n}\n\nfunction te(a) {\n  var b = ue(a);\n  if (Wa(b)) return a;\n}\n\nfunction ve(a, b) {\n  if ("change" === a) return b;\n}\n\nvar we = !1;\n\nif (fa) {\n  var xe;\n\n  if (fa) {\n    var ye = ("oninput" in document);\n\n    if (!ye) {\n      var ze = document.createElement("div");\n      ze.setAttribute("oninput", "return;");\n      ye = "function" === typeof ze.oninput;\n    }\n\n    xe = ye;\n  } else xe = !1;\n\n  we = xe && (!document.documentMode || 9 < document.documentMode);\n}\n\nfunction Ae() {\n  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);\n}\n\nfunction Be(a) {\n  if ("value" === a.propertyName && te(qe)) {\n    var b = [];\n    ne(b, qe, a, xb(a));\n    a = re;\n    if (Kb) a(b);else {\n      Kb = !0;\n\n      try {\n        Gb(a, b);\n      } finally {\n        Kb = !1, Mb();\n      }\n    }\n  }\n}\n\nfunction Ce(a, b, c) {\n  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();\n}\n\nfunction De(a) {\n  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);\n}\n\nfunction Ee(a, b) {\n  if ("click" === a) return te(b);\n}\n\nfunction Fe(a, b) {\n  if ("input" === a || "change" === a) return te(b);\n}\n\nfunction Ge(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\n\nvar He = "function" === typeof Object.is ? Object.is : Ge,\n    Ie = Object.prototype.hasOwnProperty;\n\nfunction Je(a, b) {\n  if (He(a, b)) return !0;\n  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;\n  var c = Object.keys(a),\n      d = Object.keys(b);\n  if (c.length !== d.length) return !1;\n\n  for (d = 0; d < c.length; d++) {\n    if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;\n  }\n\n  return !0;\n}\n\nfunction Ke(a) {\n  for (; a && a.firstChild;) {\n    a = a.firstChild;\n  }\n\n  return a;\n}\n\nfunction Le(a, b) {\n  var c = Ke(a);\n  a = 0;\n\n  for (var d; c;) {\n    if (3 === c.nodeType) {\n      d = a + c.textContent.length;\n      if (a <= b && d >= b) return {\n        node: c,\n        offset: b - a\n      };\n      a = d;\n    }\n\n    a: {\n      for (; c;) {\n        if (c.nextSibling) {\n          c = c.nextSibling;\n          break a;\n        }\n\n        c = c.parentNode;\n      }\n\n      c = void 0;\n    }\n\n    c = Ke(c);\n  }\n}\n\nfunction Me(a, b) {\n  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;\n}\n\nfunction Ne() {\n  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {\n    try {\n      var c = "string" === typeof b.contentWindow.location.href;\n    } catch (d) {\n      c = !1;\n    }\n\n    if (c) a = b.contentWindow;else break;\n    b = Xa(a.document);\n  }\n\n  return b;\n}\n\nfunction Oe(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);\n}\n\nvar Pe = fa && "documentMode" in document && 11 >= document.documentMode,\n    Qe = null,\n    Re = null,\n    Se = null,\n    Te = !1;\n\nfunction Ue(a, b, c) {\n  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;\n  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {\n    start: d.selectionStart,\n    end: d.selectionEnd\n  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {\n    anchorNode: d.anchorNode,\n    anchorOffset: d.anchorOffset,\n    focusNode: d.focusNode,\n    focusOffset: d.focusOffset\n  }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({\n    event: b,\n    listeners: d\n  }), b.target = Qe)));\n}\n\nPc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);\nPc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);\nPc(Oc, 2);\n\nfor (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++) {\n  Nc.set(Ve[We], 0);\n}\n\nea("onMouseEnter", ["mouseout", "mouseover"]);\nea("onMouseLeave", ["mouseout", "mouseover"]);\nea("onPointerEnter", ["pointerout", "pointerover"]);\nea("onPointerLeave", ["pointerout", "pointerover"]);\nda("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));\nda("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));\nda("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);\nda("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));\nvar Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),\n    Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));\n\nfunction Ze(a, b, c) {\n  var d = a.type || "unknown-event";\n  a.currentTarget = c;\n  Yb(d, b, void 0, a);\n  a.currentTarget = null;\n}\n\nfunction se(a, b) {\n  b = 0 !== (b & 4);\n\n  for (var c = 0; c < a.length; c++) {\n    var d = a[c],\n        e = d.event;\n    d = d.listeners;\n\n    a: {\n      var f = void 0;\n      if (b) for (var g = d.length - 1; 0 <= g; g--) {\n        var h = d[g],\n            k = h.instance,\n            l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        Ze(e, h, l);\n        f = k;\n      } else for (g = 0; g < d.length; g++) {\n        h = d[g];\n        k = h.instance;\n        l = h.currentTarget;\n        h = h.listener;\n        if (k !== f && e.isPropagationStopped()) break a;\n        Ze(e, h, l);\n        f = k;\n      }\n    }\n  }\n\n  if (Ub) throw a = Vb, Ub = !1, Vb = null, a;\n}\n\nfunction G(a, b) {\n  var c = $e(b),\n      d = a + "__bubble";\n  c.has(d) || (af(b, a, 2, !1), c.add(d));\n}\n\nvar bf = "_reactListening" + Math.random().toString(36).slice(2);\n\nfunction cf(a) {\n  a[bf] || (a[bf] = !0, ba.forEach(function (b) {\n    Ye.has(b) || df(b, !1, a, null);\n    df(b, !0, a, null);\n  }));\n}\n\nfunction df(a, b, c, d) {\n  var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,\n      f = c;\n  "selectionchange" === a && 9 !== c.nodeType && (f = c.ownerDocument);\n\n  if (null !== d && !b && Ye.has(a)) {\n    if ("scroll" !== a) return;\n    e |= 2;\n    f = d;\n  }\n\n  var g = $e(f),\n      h = a + "__" + (b ? "capture" : "bubble");\n  g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));\n}\n\nfunction af(a, b, c, d) {\n  var e = Nc.get(b);\n\n  switch (void 0 === e ? 2 : e) {\n    case 0:\n      e = gd;\n      break;\n\n    case 1:\n      e = id;\n      break;\n\n    default:\n      e = hd;\n  }\n\n  c = e.bind(null, b, c, a);\n  e = void 0;\n  !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);\n  d ? void 0 !== e ? a.addEventListener(b, c, {\n    capture: !0,\n    passive: e\n  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {\n    passive: e\n  }) : a.addEventListener(b, c, !1);\n}\n\nfunction jd(a, b, c, d, e) {\n  var f = d;\n  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {\n    if (null === d) return;\n    var g = d.tag;\n\n    if (3 === g || 4 === g) {\n      var h = d.stateNode.containerInfo;\n      if (h === e || 8 === h.nodeType && h.parentNode === e) break;\n      if (4 === g) for (g = d.return; null !== g;) {\n        var k = g.tag;\n        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;\n        g = g.return;\n      }\n\n      for (; null !== h;) {\n        g = wc(h);\n        if (null === g) return;\n        k = g.tag;\n\n        if (5 === k || 6 === k) {\n          d = f = g;\n          continue a;\n        }\n\n        h = h.parentNode;\n      }\n    }\n\n    d = d.return;\n  }\n  Nb(function () {\n    var d = f,\n        e = xb(c),\n        g = [];\n\n    a: {\n      var h = Mc.get(a);\n\n      if (void 0 !== h) {\n        var k = td,\n            x = a;\n\n        switch (a) {\n          case "keypress":\n            if (0 === od(c)) break a;\n\n          case "keydown":\n          case "keyup":\n            k = Rd;\n            break;\n\n          case "focusin":\n            x = "focus";\n            k = Fd;\n            break;\n\n          case "focusout":\n            x = "blur";\n            k = Fd;\n            break;\n\n          case "beforeblur":\n          case "afterblur":\n            k = Fd;\n            break;\n\n          case "click":\n            if (2 === c.button) break a;\n\n          case "auxclick":\n          case "dblclick":\n          case "mousedown":\n          case "mousemove":\n          case "mouseup":\n          case "mouseout":\n          case "mouseover":\n          case "contextmenu":\n            k = Bd;\n            break;\n\n          case "drag":\n          case "dragend":\n          case "dragenter":\n          case "dragexit":\n          case "dragleave":\n          case "dragover":\n          case "dragstart":\n          case "drop":\n            k = Dd;\n            break;\n\n          case "touchcancel":\n          case "touchend":\n          case "touchmove":\n          case "touchstart":\n            k = Vd;\n            break;\n\n          case Ic:\n          case Jc:\n          case Kc:\n            k = Hd;\n            break;\n\n          case Lc:\n            k = Xd;\n            break;\n\n          case "scroll":\n            k = vd;\n            break;\n\n          case "wheel":\n            k = Zd;\n            break;\n\n          case "copy":\n          case "cut":\n          case "paste":\n            k = Jd;\n            break;\n\n          case "gotpointercapture":\n          case "lostpointercapture":\n          case "pointercancel":\n          case "pointerdown":\n          case "pointermove":\n          case "pointerout":\n          case "pointerover":\n          case "pointerup":\n            k = Td;\n        }\n\n        var w = 0 !== (b & 4),\n            z = !w && "scroll" === a,\n            u = w ? null !== h ? h + "Capture" : null : h;\n        w = [];\n\n        for (var t = d, q; null !== t;) {\n          q = t;\n          var v = q.stateNode;\n          5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));\n          if (z) break;\n          t = t.return;\n        }\n\n        0 < w.length && (h = new k(h, x, null, c, e), g.push({\n          event: h,\n          listeners: w\n        }));\n      }\n    }\n\n    if (0 === (b & 7)) {\n      a: {\n        h = "mouseover" === a || "pointerover" === a;\n        k = "mouseout" === a || "pointerout" === a;\n        if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;\n\n        if (k || h) {\n          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;\n\n          if (k) {\n            if (x = c.relatedTarget || c.toElement, k = d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;\n          } else k = null, x = d;\n\n          if (k !== x) {\n            w = Bd;\n            v = "onMouseLeave";\n            u = "onMouseEnter";\n            t = "mouse";\n            if ("pointerout" === a || "pointerover" === a) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";\n            z = null == k ? h : ue(k);\n            q = null == x ? h : ue(x);\n            h = new w(v, t + "leave", k, c, e);\n            h.target = z;\n            h.relatedTarget = q;\n            v = null;\n            wc(e) === d && (w = new w(u, t + "enter", x, c, e), w.target = q, w.relatedTarget = z, v = w);\n            z = v;\n            if (k && x) b: {\n              w = k;\n              u = x;\n              t = 0;\n\n              for (q = w; q; q = gf(q)) {\n                t++;\n              }\n\n              q = 0;\n\n              for (v = u; v; v = gf(v)) {\n                q++;\n              }\n\n              for (; 0 < t - q;) {\n                w = gf(w), t--;\n              }\n\n              for (; 0 < q - t;) {\n                u = gf(u), q--;\n              }\n\n              for (; t--;) {\n                if (w === u || null !== u && w === u.alternate) break b;\n                w = gf(w);\n                u = gf(u);\n              }\n\n              w = null;\n            } else w = null;\n            null !== k && hf(g, h, k, w, !1);\n            null !== x && null !== z && hf(g, z, x, w, !0);\n          }\n        }\n      }\n\n      a: {\n        h = d ? ue(d) : window;\n        k = h.nodeName && h.nodeName.toLowerCase();\n        if ("select" === k || "input" === k && "file" === h.type) var J = ve;else if (me(h)) {\n          if (we) J = Fe;else {\n            J = De;\n            var K = Ce;\n          }\n        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);\n\n        if (J && (J = J(a, d))) {\n          ne(g, J, c, e);\n          break a;\n        }\n\n        K && K(a, h, d);\n        "focusout" === a && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);\n      }\n\n      K = d ? ue(d) : window;\n\n      switch (a) {\n        case "focusin":\n          if (me(K) || "true" === K.contentEditable) Qe = K, Re = d, Se = null;\n          break;\n\n        case "focusout":\n          Se = Re = Qe = null;\n          break;\n\n        case "mousedown":\n          Te = !0;\n          break;\n\n        case "contextmenu":\n        case "mouseup":\n        case "dragend":\n          Te = !1;\n          Ue(g, c, e);\n          break;\n\n        case "selectionchange":\n          if (Pe) break;\n\n        case "keydown":\n        case "keyup":\n          Ue(g, c, e);\n      }\n\n      var Q;\n      if (ae) b: {\n        switch (a) {\n          case "compositionstart":\n            var L = "onCompositionStart";\n            break b;\n\n          case "compositionend":\n            L = "onCompositionEnd";\n            break b;\n\n          case "compositionupdate":\n            L = "onCompositionUpdate";\n            break b;\n        }\n\n        L = void 0;\n      } else ie ? ge(a, c) && (L = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (L = "onCompositionStart");\n      L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d, L), 0 < K.length && (L = new Ld(L, a, null, c, e), g.push({\n        event: L,\n        listeners: K\n      }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));\n      if (Q = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({\n        event: e,\n        listeners: d\n      }), e.data = Q);\n    }\n\n    se(g, b);\n  });\n}\n\nfunction ef(a, b, c) {\n  return {\n    instance: a,\n    listener: b,\n    currentTarget: c\n  };\n}\n\nfunction oe(a, b) {\n  for (var c = b + "Capture", d = []; null !== a;) {\n    var e = a,\n        f = e.stateNode;\n    5 === e.tag && null !== f && (e = f, f = Ob(a, c), null != f && d.unshift(ef(a, f, e)), f = Ob(a, b), null != f && d.push(ef(a, f, e)));\n    a = a.return;\n  }\n\n  return d;\n}\n\nfunction gf(a) {\n  if (null === a) return null;\n\n  do {\n    a = a.return;\n  } while (a && 5 !== a.tag);\n\n  return a ? a : null;\n}\n\nfunction hf(a, b, c, d, e) {\n  for (var f = b._reactName, g = []; null !== c && c !== d;) {\n    var h = c,\n        k = h.alternate,\n        l = h.stateNode;\n    if (null !== k && k === d) break;\n    5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));\n    c = c.return;\n  }\n\n  0 !== g.length && a.push({\n    event: b,\n    listeners: g\n  });\n}\n\nfunction jf() {}\n\nvar kf = null,\n    lf = null;\n\nfunction mf(a, b) {\n  switch (a) {\n    case "button":\n    case "input":\n    case "select":\n    case "textarea":\n      return !!b.autoFocus;\n  }\n\n  return !1;\n}\n\nfunction nf(a, b) {\n  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;\n}\n\nvar of = "function" === typeof setTimeout ? setTimeout : void 0,\n    pf = "function" === typeof clearTimeout ? clearTimeout : void 0;\n\nfunction qf(a) {\n  1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));\n}\n\nfunction rf(a) {\n  for (; null != a; a = a.nextSibling) {\n    var b = a.nodeType;\n    if (1 === b || 3 === b) break;\n  }\n\n  return a;\n}\n\nfunction sf(a) {\n  a = a.previousSibling;\n\n  for (var b = 0; a;) {\n    if (8 === a.nodeType) {\n      var c = a.data;\n\n      if ("$" === c || "$!" === c || "$?" === c) {\n        if (0 === b) return a;\n        b--;\n      } else "/$" === c && b++;\n    }\n\n    a = a.previousSibling;\n  }\n\n  return null;\n}\n\nvar tf = 0;\n\nfunction uf(a) {\n  return {\n    $$typeof: Ga,\n    toString: a,\n    valueOf: a\n  };\n}\n\nvar vf = Math.random().toString(36).slice(2),\n    wf = "__reactFiber$" + vf,\n    xf = "__reactProps$" + vf,\n    ff = "__reactContainer$" + vf,\n    yf = "__reactEvents$" + vf;\n\nfunction wc(a) {\n  var b = a[wf];\n  if (b) return b;\n\n  for (var c = a.parentNode; c;) {\n    if (b = c[ff] || c[wf]) {\n      c = b.alternate;\n      if (null !== b.child || null !== c && null !== c.child) for (a = sf(a); null !== a;) {\n        if (c = a[wf]) return c;\n        a = sf(a);\n      }\n      return b;\n    }\n\n    a = c;\n    c = a.parentNode;\n  }\n\n  return null;\n}\n\nfunction Cb(a) {\n  a = a[wf] || a[ff];\n  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;\n}\n\nfunction ue(a) {\n  if (5 === a.tag || 6 === a.tag) return a.stateNode;\n  throw Error(y(33));\n}\n\nfunction Db(a) {\n  return a[xf] || null;\n}\n\nfunction $e(a) {\n  var b = a[yf];\n  void 0 === b && (b = a[yf] = new Set());\n  return b;\n}\n\nvar zf = [],\n    Af = -1;\n\nfunction Bf(a) {\n  return {\n    current: a\n  };\n}\n\nfunction H(a) {\n  0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);\n}\n\nfunction I(a, b) {\n  Af++;\n  zf[Af] = a.current;\n  a.current = b;\n}\n\nvar Cf = {},\n    M = Bf(Cf),\n    N = Bf(!1),\n    Df = Cf;\n\nfunction Ef(a, b) {\n  var c = a.type.contextTypes;\n  if (!c) return Cf;\n  var d = a.stateNode;\n  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n  var e = {},\n      f;\n\n  for (f in c) {\n    e[f] = b[f];\n  }\n\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n  return e;\n}\n\nfunction Ff(a) {\n  a = a.childContextTypes;\n  return null !== a && void 0 !== a;\n}\n\nfunction Gf() {\n  H(N);\n  H(M);\n}\n\nfunction Hf(a, b, c) {\n  if (M.current !== Cf) throw Error(y(168));\n  I(M, b);\n  I(N, c);\n}\n\nfunction If(a, b, c) {\n  var d = a.stateNode;\n  a = b.childContextTypes;\n  if ("function" !== typeof d.getChildContext) return c;\n  d = d.getChildContext();\n\n  for (var e in d) {\n    if (!(e in a)) throw Error(y(108, Ra(b) || "Unknown", e));\n  }\n\n  return m({}, c, d);\n}\n\nfunction Jf(a) {\n  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;\n  Df = M.current;\n  I(M, a);\n  I(N, N.current);\n  return !0;\n}\n\nfunction Kf(a, b, c) {\n  var d = a.stateNode;\n  if (!d) throw Error(y(169));\n  c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);\n  I(N, c);\n}\n\nvar Lf = null,\n    Mf = null,\n    Nf = r.unstable_runWithPriority,\n    Of = r.unstable_scheduleCallback,\n    Pf = r.unstable_cancelCallback,\n    Qf = r.unstable_shouldYield,\n    Rf = r.unstable_requestPaint,\n    Sf = r.unstable_now,\n    Tf = r.unstable_getCurrentPriorityLevel,\n    Uf = r.unstable_ImmediatePriority,\n    Vf = r.unstable_UserBlockingPriority,\n    Wf = r.unstable_NormalPriority,\n    Xf = r.unstable_LowPriority,\n    Yf = r.unstable_IdlePriority,\n    Zf = {},\n    $f = void 0 !== Rf ? Rf : function () {},\n    ag = null,\n    bg = null,\n    cg = !1,\n    dg = Sf(),\n    O = 1E4 > dg ? Sf : function () {\n  return Sf() - dg;\n};\n\nfunction eg() {\n  switch (Tf()) {\n    case Uf:\n      return 99;\n\n    case Vf:\n      return 98;\n\n    case Wf:\n      return 97;\n\n    case Xf:\n      return 96;\n\n    case Yf:\n      return 95;\n\n    default:\n      throw Error(y(332));\n  }\n}\n\nfunction fg(a) {\n  switch (a) {\n    case 99:\n      return Uf;\n\n    case 98:\n      return Vf;\n\n    case 97:\n      return Wf;\n\n    case 96:\n      return Xf;\n\n    case 95:\n      return Yf;\n\n    default:\n      throw Error(y(332));\n  }\n}\n\nfunction gg(a, b) {\n  a = fg(a);\n  return Nf(a, b);\n}\n\nfunction hg(a, b, c) {\n  a = fg(a);\n  return Of(a, b, c);\n}\n\nfunction ig() {\n  if (null !== bg) {\n    var a = bg;\n    bg = null;\n    Pf(a);\n  }\n\n  jg();\n}\n\nfunction jg() {\n  if (!cg && null !== ag) {\n    cg = !0;\n    var a = 0;\n\n    try {\n      var b = ag;\n      gg(99, function () {\n        for (; a < b.length; a++) {\n          var c = b[a];\n\n          do {\n            c = c(!0);\n          } while (null !== c);\n        }\n      });\n      ag = null;\n    } catch (c) {\n      throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c;\n    } finally {\n      cg = !1;\n    }\n  }\n}\n\nvar kg = ra.ReactCurrentBatchConfig;\n\nfunction lg(a, b) {\n  if (a && a.defaultProps) {\n    b = m({}, b);\n    a = a.defaultProps;\n\n    for (var c in a) {\n      void 0 === b[c] && (b[c] = a[c]);\n    }\n\n    return b;\n  }\n\n  return b;\n}\n\nvar mg = Bf(null),\n    ng = null,\n    og = null,\n    pg = null;\n\nfunction qg() {\n  pg = og = ng = null;\n}\n\nfunction rg(a) {\n  var b = mg.current;\n  H(mg);\n  a.type._context._currentValue = b;\n}\n\nfunction sg(a, b) {\n  for (; null !== a;) {\n    var c = a.alternate;\n    if ((a.childLanes & b) === b) {\n      if (null === c || (c.childLanes & b) === b) break;else c.childLanes |= b;\n    } else a.childLanes |= b, null !== c && (c.childLanes |= b);\n    a = a.return;\n  }\n}\n\nfunction tg(a, b) {\n  ng = a;\n  pg = og = null;\n  a = a.dependencies;\n  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), a.firstContext = null);\n}\n\nfunction vg(a, b) {\n  if (pg !== a && !1 !== b && 0 !== b) {\n    if ("number" !== typeof b || 1073741823 === b) pg = a, b = 1073741823;\n    b = {\n      context: a,\n      observedBits: b,\n      next: null\n    };\n\n    if (null === og) {\n      if (null === ng) throw Error(y(308));\n      og = b;\n      ng.dependencies = {\n        lanes: 0,\n        firstContext: b,\n        responders: null\n      };\n    } else og = og.next = b;\n  }\n\n  return a._currentValue;\n}\n\nvar wg = !1;\n\nfunction xg(a) {\n  a.updateQueue = {\n    baseState: a.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null\n    },\n    effects: null\n  };\n}\n\nfunction yg(a, b) {\n  a = a.updateQueue;\n  b.updateQueue === a && (b.updateQueue = {\n    baseState: a.baseState,\n    firstBaseUpdate: a.firstBaseUpdate,\n    lastBaseUpdate: a.lastBaseUpdate,\n    shared: a.shared,\n    effects: a.effects\n  });\n}\n\nfunction zg(a, b) {\n  return {\n    eventTime: a,\n    lane: b,\n    tag: 0,\n    payload: null,\n    callback: null,\n    next: null\n  };\n}\n\nfunction Ag(a, b) {\n  a = a.updateQueue;\n\n  if (null !== a) {\n    a = a.shared;\n    var c = a.pending;\n    null === c ? b.next = b : (b.next = c.next, c.next = b);\n    a.pending = b;\n  }\n}\n\nfunction Bg(a, b) {\n  var c = a.updateQueue,\n      d = a.alternate;\n\n  if (null !== d && (d = d.updateQueue, c === d)) {\n    var e = null,\n        f = null;\n    c = c.firstBaseUpdate;\n\n    if (null !== c) {\n      do {\n        var g = {\n          eventTime: c.eventTime,\n          lane: c.lane,\n          tag: c.tag,\n          payload: c.payload,\n          callback: c.callback,\n          next: null\n        };\n        null === f ? e = f = g : f = f.next = g;\n        c = c.next;\n      } while (null !== c);\n\n      null === f ? e = f = b : f = f.next = b;\n    } else e = f = b;\n\n    c = {\n      baseState: d.baseState,\n      firstBaseUpdate: e,\n      lastBaseUpdate: f,\n      shared: d.shared,\n      effects: d.effects\n    };\n    a.updateQueue = c;\n    return;\n  }\n\n  a = c.lastBaseUpdate;\n  null === a ? c.firstBaseUpdate = b : a.next = b;\n  c.lastBaseUpdate = b;\n}\n\nfunction Cg(a, b, c, d) {\n  var e = a.updateQueue;\n  wg = !1;\n  var f = e.firstBaseUpdate,\n      g = e.lastBaseUpdate,\n      h = e.shared.pending;\n\n  if (null !== h) {\n    e.shared.pending = null;\n    var k = h,\n        l = k.next;\n    k.next = null;\n    null === g ? f = l : g.next = l;\n    g = k;\n    var n = a.alternate;\n\n    if (null !== n) {\n      n = n.updateQueue;\n      var A = n.lastBaseUpdate;\n      A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);\n    }\n  }\n\n  if (null !== f) {\n    A = e.baseState;\n    g = 0;\n    n = l = k = null;\n\n    do {\n      h = f.lane;\n      var p = f.eventTime;\n\n      if ((d & h) === h) {\n        null !== n && (n = n.next = {\n          eventTime: p,\n          lane: 0,\n          tag: f.tag,\n          payload: f.payload,\n          callback: f.callback,\n          next: null\n        });\n\n        a: {\n          var C = a,\n              x = f;\n          h = b;\n          p = c;\n\n          switch (x.tag) {\n            case 1:\n              C = x.payload;\n\n              if ("function" === typeof C) {\n                A = C.call(p, A, h);\n                break a;\n              }\n\n              A = C;\n              break a;\n\n            case 3:\n              C.flags = C.flags & -4097 | 64;\n\n            case 0:\n              C = x.payload;\n              h = "function" === typeof C ? C.call(p, A, h) : C;\n              if (null === h || void 0 === h) break a;\n              A = m({}, A, h);\n              break a;\n\n            case 2:\n              wg = !0;\n          }\n        }\n\n        null !== f.callback && (a.flags |= 32, h = e.effects, null === h ? e.effects = [f] : h.push(f));\n      } else p = {\n        eventTime: p,\n        lane: h,\n        tag: f.tag,\n        payload: f.payload,\n        callback: f.callback,\n        next: null\n      }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;\n\n      f = f.next;\n      if (null === f) if (h = e.shared.pending, null === h) break;else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;\n    } while (1);\n\n    null === n && (k = A);\n    e.baseState = k;\n    e.firstBaseUpdate = l;\n    e.lastBaseUpdate = n;\n    Dg |= g;\n    a.lanes = g;\n    a.memoizedState = A;\n  }\n}\n\nfunction Eg(a, b, c) {\n  a = b.effects;\n  b.effects = null;\n  if (null !== a) for (b = 0; b < a.length; b++) {\n    var d = a[b],\n        e = d.callback;\n\n    if (null !== e) {\n      d.callback = null;\n      d = c;\n      if ("function" !== typeof e) throw Error(y(191, e));\n      e.call(d);\n    }\n  }\n}\n\nvar Fg = new aa.Component().refs;\n\nfunction Gg(a, b, c, d) {\n  b = a.memoizedState;\n  c = c(d, b);\n  c = null === c || void 0 === c ? b : m({}, b, c);\n  a.memoizedState = c;\n  0 === a.lanes && (a.updateQueue.baseState = c);\n}\n\nvar Kg = {\n  isMounted: function isMounted(a) {\n    return (a = a._reactInternals) ? Zb(a) === a : !1;\n  },\n  enqueueSetState: function enqueueSetState(a, b, c) {\n    a = a._reactInternals;\n    var d = Hg(),\n        e = Ig(a),\n        f = zg(d, e);\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    Ag(a, f);\n    Jg(a, e, d);\n  },\n  enqueueReplaceState: function enqueueReplaceState(a, b, c) {\n    a = a._reactInternals;\n    var d = Hg(),\n        e = Ig(a),\n        f = zg(d, e);\n    f.tag = 1;\n    f.payload = b;\n    void 0 !== c && null !== c && (f.callback = c);\n    Ag(a, f);\n    Jg(a, e, d);\n  },\n  enqueueForceUpdate: function enqueueForceUpdate(a, b) {\n    a = a._reactInternals;\n    var c = Hg(),\n        d = Ig(a),\n        e = zg(c, d);\n    e.tag = 2;\n    void 0 !== b && null !== b && (e.callback = b);\n    Ag(a, e);\n    Jg(a, d, c);\n  }\n};\n\nfunction Lg(a, b, c, d, e, f, g) {\n  a = a.stateNode;\n  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;\n}\n\nfunction Mg(a, b, c) {\n  var d = !1,\n      e = Cf;\n  var f = b.contextType;\n  "object" === typeof f && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);\n  b = new b(c, f);\n  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n  b.updater = Kg;\n  a.stateNode = b;\n  b._reactInternals = a;\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n  return b;\n}\n\nfunction Ng(a, b, c, d) {\n  a = b.state;\n  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n  b.state !== a && Kg.enqueueReplaceState(b, b.state, null);\n}\n\nfunction Og(a, b, c, d) {\n  var e = a.stateNode;\n  e.props = c;\n  e.state = a.memoizedState;\n  e.refs = Fg;\n  xg(a);\n  var f = b.contextType;\n  "object" === typeof f && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));\n  Cg(a, c, e, d);\n  e.state = a.memoizedState;\n  f = b.getDerivedStateFromProps;\n  "function" === typeof f && (Gg(a, b, f, c), e.state = a.memoizedState);\n  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);\n  "function" === typeof e.componentDidMount && (a.flags |= 4);\n}\n\nvar Pg = Array.isArray;\n\nfunction Qg(a, b, c) {\n  a = c.ref;\n\n  if (null !== a && "function" !== typeof a && "object" !== typeof a) {\n    if (c._owner) {\n      c = c._owner;\n\n      if (c) {\n        if (1 !== c.tag) throw Error(y(309));\n        var d = c.stateNode;\n      }\n\n      if (!d) throw Error(y(147, a));\n      var e = "" + a;\n      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;\n\n      b = function b(a) {\n        var b = d.refs;\n        b === Fg && (b = d.refs = {});\n        null === a ? delete b[e] : b[e] = a;\n      };\n\n      b._stringRef = e;\n      return b;\n    }\n\n    if ("string" !== typeof a) throw Error(y(284));\n    if (!c._owner) throw Error(y(290, a));\n  }\n\n  return a;\n}\n\nfunction Rg(a, b) {\n  if ("textarea" !== a.type) throw Error(y(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));\n}\n\nfunction Sg(a) {\n  function b(b, c) {\n    if (a) {\n      var d = b.lastEffect;\n      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;\n      c.nextEffect = null;\n      c.flags = 8;\n    }\n  }\n\n  function c(c, d) {\n    if (!a) return null;\n\n    for (; null !== d;) {\n      b(c, d), d = d.sibling;\n    }\n\n    return null;\n  }\n\n  function d(a, b) {\n    for (a = new Map(); null !== b;) {\n      null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;\n    }\n\n    return a;\n  }\n\n  function e(a, b) {\n    a = Tg(a, b);\n    a.index = 0;\n    a.sibling = null;\n    return a;\n  }\n\n  function f(b, c, d) {\n    b.index = d;\n    if (!a) return c;\n    d = b.alternate;\n    if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;\n    b.flags = 2;\n    return c;\n  }\n\n  function g(b) {\n    a && null === b.alternate && (b.flags = 2);\n    return b;\n  }\n\n  function h(a, b, c, d) {\n    if (null === b || 6 !== b.tag) return b = Ug(c, a.mode, d), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n\n  function k(a, b, c, d) {\n    if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Qg(a, b, c), d.return = a, d;\n    d = Vg(c.type, c.key, c.props, null, a.mode, d);\n    d.ref = Qg(a, b, c);\n    d.return = a;\n    return d;\n  }\n\n  function l(a, b, c, d) {\n    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a.mode, d), b.return = a, b;\n    b = e(b, c.children || []);\n    b.return = a;\n    return b;\n  }\n\n  function n(a, b, c, d, f) {\n    if (null === b || 7 !== b.tag) return b = Xg(c, a.mode, d, f), b.return = a, b;\n    b = e(b, c);\n    b.return = a;\n    return b;\n  }\n\n  function A(a, b, c) {\n    if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a.mode, c), b.return = a, b;\n\n    if ("object" === typeof b && null !== b) {\n      switch (b.$$typeof) {\n        case sa:\n          return c = Vg(b.type, b.key, b.props, null, a.mode, c), c.ref = Qg(a, null, b), c.return = a, c;\n\n        case ta:\n          return b = Wg(b, a.mode, c), b.return = a, b;\n      }\n\n      if (Pg(b) || La(b)) return b = Xg(b, a.mode, c, null), b.return = a, b;\n      Rg(a, b);\n    }\n\n    return null;\n  }\n\n  function p(a, b, c, d) {\n    var e = null !== b ? b.key : null;\n    if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);\n\n    if ("object" === typeof c && null !== c) {\n      switch (c.$$typeof) {\n        case sa:\n          return c.key === e ? c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d) : null;\n\n        case ta:\n          return c.key === e ? l(a, b, c, d) : null;\n      }\n\n      if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);\n      Rg(a, c);\n    }\n\n    return null;\n  }\n\n  function C(a, b, c, d, e) {\n    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);\n\n    if ("object" === typeof d && null !== d) {\n      switch (d.$$typeof) {\n        case sa:\n          return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);\n\n        case ta:\n          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);\n      }\n\n      if (Pg(d) || La(d)) return a = a.get(c) || null, n(b, a, d, e, null);\n      Rg(b, d);\n    }\n\n    return null;\n  }\n\n  function x(e, g, h, k) {\n    for (var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++) {\n      u.index > z ? (q = u, u = null) : q = u.sibling;\n      var n = p(e, u, h[z], k);\n\n      if (null === n) {\n        null === u && (u = q);\n        break;\n      }\n\n      a && u && null === n.alternate && b(e, u);\n      g = f(n, g, z);\n      null === t ? l = n : t.sibling = n;\n      t = n;\n      u = q;\n    }\n\n    if (z === h.length) return c(e, u), l;\n\n    if (null === u) {\n      for (; z < h.length; z++) {\n        u = A(e, h[z], k), null !== u && (g = f(u, g, z), null === t ? l = u : t.sibling = u, t = u);\n      }\n\n      return l;\n    }\n\n    for (u = d(e, u); z < h.length; z++) {\n      q = C(u, e, z, h[z], k), null !== q && (a && null !== q.alternate && u.delete(null === q.key ? z : q.key), g = f(q, g, z), null === t ? l = q : t.sibling = q, t = q);\n    }\n\n    a && u.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n\n  function w(e, g, h, k) {\n    var l = La(h);\n    if ("function" !== typeof l) throw Error(y(150));\n    h = l.call(h);\n    if (null == h) throw Error(y(151));\n\n    for (var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()) {\n      u.index > z ? (q = u, u = null) : q = u.sibling;\n      var w = p(e, u, n.value, k);\n\n      if (null === w) {\n        null === u && (u = q);\n        break;\n      }\n\n      a && u && null === w.alternate && b(e, u);\n      g = f(w, g, z);\n      null === t ? l = w : t.sibling = w;\n      t = w;\n      u = q;\n    }\n\n    if (n.done) return c(e, u), l;\n\n    if (null === u) {\n      for (; !n.done; z++, n = h.next()) {\n        n = A(e, n.value, k), null !== n && (g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);\n      }\n\n      return l;\n    }\n\n    for (u = d(e, u); !n.done; z++, n = h.next()) {\n      n = C(u, e, z, n.value, k), null !== n && (a && null !== n.alternate && u.delete(null === n.key ? z : n.key), g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);\n    }\n\n    a && u.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n\n  return function (a, d, f, h) {\n    var k = "object" === typeof f && null !== f && f.type === ua && null === f.key;\n    k && (f = f.props.children);\n    var l = "object" === typeof f && null !== f;\n    if (l) switch (f.$$typeof) {\n      case sa:\n        a: {\n          l = f.key;\n\n          for (k = d; null !== k;) {\n            if (k.key === l) {\n              switch (k.tag) {\n                case 7:\n                  if (f.type === ua) {\n                    c(a, k.sibling);\n                    d = e(k, f.props.children);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n\n                  break;\n\n                default:\n                  if (k.elementType === f.type) {\n                    c(a, k.sibling);\n                    d = e(k, f.props);\n                    d.ref = Qg(a, k, f);\n                    d.return = a;\n                    a = d;\n                    break a;\n                  }\n\n              }\n\n              c(a, k);\n              break;\n            } else b(a, k);\n\n            k = k.sibling;\n          }\n\n          f.type === ua ? (d = Xg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Vg(f.type, f.key, f.props, null, a.mode, h), h.ref = Qg(a, d, f), h.return = a, a = h);\n        }\n\n        return g(a);\n\n      case ta:\n        a: {\n          for (k = f.key; null !== d;) {\n            if (d.key === k) {\n              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                c(a, d.sibling);\n                d = e(d, f.children || []);\n                d.return = a;\n                a = d;\n                break a;\n              } else {\n                c(a, d);\n                break;\n              }\n            } else b(a, d);\n            d = d.sibling;\n          }\n\n          d = Wg(f, a.mode, h);\n          d.return = a;\n          a = d;\n        }\n\n        return g(a);\n    }\n    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Ug(f, a.mode, h), d.return = a, a = d), g(a);\n    if (Pg(f)) return x(a, d, f, h);\n    if (La(f)) return w(a, d, f, h);\n    l && Rg(a, f);\n    if ("undefined" === typeof f && !k) switch (a.tag) {\n      case 1:\n      case 22:\n      case 0:\n      case 11:\n      case 15:\n        throw Error(y(152, Ra(a.type) || "Component"));\n    }\n    return c(a, d);\n  };\n}\n\nvar Yg = Sg(!0),\n    Zg = Sg(!1),\n    $g = {},\n    ah = Bf($g),\n    bh = Bf($g),\n    ch = Bf($g);\n\nfunction dh(a) {\n  if (a === $g) throw Error(y(174));\n  return a;\n}\n\nfunction eh(a, b) {\n  I(ch, b);\n  I(bh, a);\n  I(ah, $g);\n  a = b.nodeType;\n\n  switch (a) {\n    case 9:\n    case 11:\n      b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");\n      break;\n\n    default:\n      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);\n  }\n\n  H(ah);\n  I(ah, b);\n}\n\nfunction fh() {\n  H(ah);\n  H(bh);\n  H(ch);\n}\n\nfunction gh(a) {\n  dh(ch.current);\n  var b = dh(ah.current);\n  var c = mb(b, a.type);\n  b !== c && (I(bh, a), I(ah, c));\n}\n\nfunction hh(a) {\n  bh.current === a && (H(ah), H(bh));\n}\n\nvar P = Bf(0);\n\nfunction ih(a) {\n  for (var b = a; null !== b;) {\n    if (13 === b.tag) {\n      var c = b.memoizedState;\n      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;\n    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {\n      if (0 !== (b.flags & 64)) return b;\n    } else if (null !== b.child) {\n      b.child.return = b;\n      b = b.child;\n      continue;\n    }\n\n    if (b === a) break;\n\n    for (; null === b.sibling;) {\n      if (null === b.return || b.return === a) return null;\n      b = b.return;\n    }\n\n    b.sibling.return = b.return;\n    b = b.sibling;\n  }\n\n  return null;\n}\n\nvar jh = null,\n    kh = null,\n    lh = !1;\n\nfunction mh(a, b) {\n  var c = nh(5, null, null, 0);\n  c.elementType = "DELETED";\n  c.type = "DELETED";\n  c.stateNode = b;\n  c.return = a;\n  c.flags = 8;\n  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;\n}\n\nfunction oh(a, b) {\n  switch (a.tag) {\n    case 5:\n      var c = a.type;\n      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;\n      return null !== b ? (a.stateNode = b, !0) : !1;\n\n    case 6:\n      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;\n\n    case 13:\n      return !1;\n\n    default:\n      return !1;\n  }\n}\n\nfunction ph(a) {\n  if (lh) {\n    var b = kh;\n\n    if (b) {\n      var c = b;\n\n      if (!oh(a, b)) {\n        b = rf(c.nextSibling);\n\n        if (!b || !oh(a, b)) {\n          a.flags = a.flags & -1025 | 2;\n          lh = !1;\n          jh = a;\n          return;\n        }\n\n        mh(jh, c);\n      }\n\n      jh = a;\n      kh = rf(b.firstChild);\n    } else a.flags = a.flags & -1025 | 2, lh = !1, jh = a;\n  }\n}\n\nfunction qh(a) {\n  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) {\n    a = a.return;\n  }\n\n  jh = a;\n}\n\nfunction rh(a) {\n  if (a !== jh) return !1;\n  if (!lh) return qh(a), lh = !0, !1;\n  var b = a.type;\n  if (5 !== a.tag || "head" !== b && "body" !== b && !nf(b, a.memoizedProps)) for (b = kh; b;) {\n    mh(a, b), b = rf(b.nextSibling);\n  }\n  qh(a);\n\n  if (13 === a.tag) {\n    a = a.memoizedState;\n    a = null !== a ? a.dehydrated : null;\n    if (!a) throw Error(y(317));\n\n    a: {\n      a = a.nextSibling;\n\n      for (b = 0; a;) {\n        if (8 === a.nodeType) {\n          var c = a.data;\n\n          if ("/$" === c) {\n            if (0 === b) {\n              kh = rf(a.nextSibling);\n              break a;\n            }\n\n            b--;\n          } else "$" !== c && "$!" !== c && "$?" !== c || b++;\n        }\n\n        a = a.nextSibling;\n      }\n\n      kh = null;\n    }\n  } else kh = jh ? rf(a.stateNode.nextSibling) : null;\n\n  return !0;\n}\n\nfunction sh() {\n  kh = jh = null;\n  lh = !1;\n}\n\nvar th = [];\n\nfunction uh() {\n  for (var a = 0; a < th.length; a++) {\n    th[a]._workInProgressVersionPrimary = null;\n  }\n\n  th.length = 0;\n}\n\nvar vh = ra.ReactCurrentDispatcher,\n    wh = ra.ReactCurrentBatchConfig,\n    xh = 0,\n    R = null,\n    S = null,\n    T = null,\n    yh = !1,\n    zh = !1;\n\nfunction Ah() {\n  throw Error(y(321));\n}\n\nfunction Bh(a, b) {\n  if (null === b) return !1;\n\n  for (var c = 0; c < b.length && c < a.length; c++) {\n    if (!He(a[c], b[c])) return !1;\n  }\n\n  return !0;\n}\n\nfunction Ch(a, b, c, d, e, f) {\n  xh = f;\n  R = b;\n  b.memoizedState = null;\n  b.updateQueue = null;\n  b.lanes = 0;\n  vh.current = null === a || null === a.memoizedState ? Dh : Eh;\n  a = c(d, e);\n\n  if (zh) {\n    f = 0;\n\n    do {\n      zh = !1;\n      if (!(25 > f)) throw Error(y(301));\n      f += 1;\n      T = S = null;\n      b.updateQueue = null;\n      vh.current = Fh;\n      a = c(d, e);\n    } while (zh);\n  }\n\n  vh.current = Gh;\n  b = null !== S && null !== S.next;\n  xh = 0;\n  T = S = R = null;\n  yh = !1;\n  if (b) throw Error(y(300));\n  return a;\n}\n\nfunction Hh() {\n  var a = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n  null === T ? R.memoizedState = T = a : T = T.next = a;\n  return T;\n}\n\nfunction Ih() {\n  if (null === S) {\n    var a = R.alternate;\n    a = null !== a ? a.memoizedState : null;\n  } else a = S.next;\n\n  var b = null === T ? R.memoizedState : T.next;\n  if (null !== b) T = b, S = a;else {\n    if (null === a) throw Error(y(310));\n    S = a;\n    a = {\n      memoizedState: S.memoizedState,\n      baseState: S.baseState,\n      baseQueue: S.baseQueue,\n      queue: S.queue,\n      next: null\n    };\n    null === T ? R.memoizedState = T = a : T = T.next = a;\n  }\n  return T;\n}\n\nfunction Jh(a, b) {\n  return "function" === typeof b ? b(a) : b;\n}\n\nfunction Kh(a) {\n  var b = Ih(),\n      c = b.queue;\n  if (null === c) throw Error(y(311));\n  c.lastRenderedReducer = a;\n  var d = S,\n      e = d.baseQueue,\n      f = c.pending;\n\n  if (null !== f) {\n    if (null !== e) {\n      var g = e.next;\n      e.next = f.next;\n      f.next = g;\n    }\n\n    d.baseQueue = e = f;\n    c.pending = null;\n  }\n\n  if (null !== e) {\n    e = e.next;\n    d = d.baseState;\n    var h = g = f = null,\n        k = e;\n\n    do {\n      var l = k.lane;\n      if ((xh & l) === l) null !== h && (h = h.next = {\n        lane: 0,\n        action: k.action,\n        eagerReducer: k.eagerReducer,\n        eagerState: k.eagerState,\n        next: null\n      }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);else {\n        var n = {\n          lane: l,\n          action: k.action,\n          eagerReducer: k.eagerReducer,\n          eagerState: k.eagerState,\n          next: null\n        };\n        null === h ? (g = h = n, f = d) : h = h.next = n;\n        R.lanes |= l;\n        Dg |= l;\n      }\n      k = k.next;\n    } while (null !== k && k !== e);\n\n    null === h ? f = d : h.next = g;\n    He(d, b.memoizedState) || (ug = !0);\n    b.memoizedState = d;\n    b.baseState = f;\n    b.baseQueue = h;\n    c.lastRenderedState = d;\n  }\n\n  return [b.memoizedState, c.dispatch];\n}\n\nfunction Lh(a) {\n  var b = Ih(),\n      c = b.queue;\n  if (null === c) throw Error(y(311));\n  c.lastRenderedReducer = a;\n  var d = c.dispatch,\n      e = c.pending,\n      f = b.memoizedState;\n\n  if (null !== e) {\n    c.pending = null;\n    var g = e = e.next;\n\n    do {\n      f = a(f, g.action), g = g.next;\n    } while (g !== e);\n\n    He(f, b.memoizedState) || (ug = !0);\n    b.memoizedState = f;\n    null === b.baseQueue && (b.baseState = f);\n    c.lastRenderedState = f;\n  }\n\n  return [f, d];\n}\n\nfunction Mh(a, b, c) {\n  var d = b._getVersion;\n  d = d(b._source);\n  var e = b._workInProgressVersionPrimary;\n  if (null !== e) a = e === d;else if (a = a.mutableReadLanes, a = (xh & a) === a) b._workInProgressVersionPrimary = d, th.push(b);\n  if (a) return c(b._source);\n  th.push(b);\n  throw Error(y(350));\n}\n\nfunction Nh(a, b, c, d) {\n  var e = U;\n  if (null === e) throw Error(y(349));\n  var f = b._getVersion,\n      g = f(b._source),\n      h = vh.current,\n      k = h.useState(function () {\n    return Mh(e, b, c);\n  }),\n      l = k[1],\n      n = k[0];\n  k = T;\n  var A = a.memoizedState,\n      p = A.refs,\n      C = p.getSnapshot,\n      x = A.source;\n  A = A.subscribe;\n  var w = R;\n  a.memoizedState = {\n    refs: p,\n    source: b,\n    subscribe: d\n  };\n  h.useEffect(function () {\n    p.getSnapshot = c;\n    p.setSnapshot = l;\n    var a = f(b._source);\n\n    if (!He(g, a)) {\n      a = c(b._source);\n      He(n, a) || (l(a), a = Ig(w), e.mutableReadLanes |= a & e.pendingLanes);\n      a = e.mutableReadLanes;\n      e.entangledLanes |= a;\n\n      for (var d = e.entanglements, h = a; 0 < h;) {\n        var k = 31 - Vc(h),\n            v = 1 << k;\n        d[k] |= a;\n        h &= ~v;\n      }\n    }\n  }, [c, b, d]);\n  h.useEffect(function () {\n    return d(b._source, function () {\n      var a = p.getSnapshot,\n          c = p.setSnapshot;\n\n      try {\n        c(a(b._source));\n        var d = Ig(w);\n        e.mutableReadLanes |= d & e.pendingLanes;\n      } catch (q) {\n        c(function () {\n          throw q;\n        });\n      }\n    });\n  }, [b, d]);\n  He(C, c) && He(x, b) && He(A, d) || (a = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: Jh,\n    lastRenderedState: n\n  }, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);\n  return n;\n}\n\nfunction Ph(a, b, c) {\n  var d = Ih();\n  return Nh(d, a, b, c);\n}\n\nfunction Qh(a) {\n  var b = Hh();\n  "function" === typeof a && (a = a());\n  b.memoizedState = b.baseState = a;\n  a = b.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: Jh,\n    lastRenderedState: a\n  };\n  a = a.dispatch = Oh.bind(null, R, a);\n  return [b.memoizedState, a];\n}\n\nfunction Rh(a, b, c, d) {\n  a = {\n    tag: a,\n    create: b,\n    destroy: c,\n    deps: d,\n    next: null\n  };\n  b = R.updateQueue;\n  null === b ? (b = {\n    lastEffect: null\n  }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));\n  return a;\n}\n\nfunction Sh(a) {\n  var b = Hh();\n  a = {\n    current: a\n  };\n  return b.memoizedState = a;\n}\n\nfunction Th() {\n  return Ih().memoizedState;\n}\n\nfunction Uh(a, b, c, d) {\n  var e = Hh();\n  R.flags |= a;\n  e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);\n}\n\nfunction Vh(a, b, c, d) {\n  var e = Ih();\n  d = void 0 === d ? null : d;\n  var f = void 0;\n\n  if (null !== S) {\n    var g = S.memoizedState;\n    f = g.destroy;\n\n    if (null !== d && Bh(d, g.deps)) {\n      Rh(b, c, f, d);\n      return;\n    }\n  }\n\n  R.flags |= a;\n  e.memoizedState = Rh(1 | b, c, f, d);\n}\n\nfunction Wh(a, b) {\n  return Uh(516, 4, a, b);\n}\n\nfunction Xh(a, b) {\n  return Vh(516, 4, a, b);\n}\n\nfunction Yh(a, b) {\n  return Vh(4, 2, a, b);\n}\n\nfunction Zh(a, b) {\n  if ("function" === typeof b) return a = a(), b(a), function () {\n    b(null);\n  };\n  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {\n    b.current = null;\n  };\n}\n\nfunction $h(a, b, c) {\n  c = null !== c && void 0 !== c ? c.concat([a]) : null;\n  return Vh(4, 2, Zh.bind(null, b, a), c);\n}\n\nfunction ai() {}\n\nfunction bi(a, b) {\n  var c = Ih();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Bh(b, d[1])) return d[0];\n  c.memoizedState = [a, b];\n  return a;\n}\n\nfunction ci(a, b) {\n  var c = Ih();\n  b = void 0 === b ? null : b;\n  var d = c.memoizedState;\n  if (null !== d && null !== b && Bh(b, d[1])) return d[0];\n  a = a();\n  c.memoizedState = [a, b];\n  return a;\n}\n\nfunction di(a, b) {\n  var c = eg();\n  gg(98 > c ? 98 : c, function () {\n    a(!0);\n  });\n  gg(97 < c ? 97 : c, function () {\n    var c = wh.transition;\n    wh.transition = 1;\n\n    try {\n      a(!1), b();\n    } finally {\n      wh.transition = c;\n    }\n  });\n}\n\nfunction Oh(a, b, c) {\n  var d = Hg(),\n      e = Ig(a),\n      f = {\n    lane: e,\n    action: c,\n    eagerReducer: null,\n    eagerState: null,\n    next: null\n  },\n      g = b.pending;\n  null === g ? f.next = f : (f.next = g.next, g.next = f);\n  b.pending = f;\n  g = a.alternate;\n  if (a === R || null !== g && g === R) zh = yh = !0;else {\n    if (0 === a.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {\n      var h = b.lastRenderedState,\n          k = g(h, c);\n      f.eagerReducer = g;\n      f.eagerState = k;\n      if (He(k, h)) return;\n    } catch (l) {} finally {}\n    Jg(a, e, d);\n  }\n}\n\nvar Gh = {\n  readContext: vg,\n  useCallback: Ah,\n  useContext: Ah,\n  useEffect: Ah,\n  useImperativeHandle: Ah,\n  useLayoutEffect: Ah,\n  useMemo: Ah,\n  useReducer: Ah,\n  useRef: Ah,\n  useState: Ah,\n  useDebugValue: Ah,\n  useDeferredValue: Ah,\n  useTransition: Ah,\n  useMutableSource: Ah,\n  useOpaqueIdentifier: Ah,\n  unstable_isNewReconciler: !1\n},\n    Dh = {\n  readContext: vg,\n  useCallback: function useCallback(a, b) {\n    Hh().memoizedState = [a, void 0 === b ? null : b];\n    return a;\n  },\n  useContext: vg,\n  useEffect: Wh,\n  useImperativeHandle: function useImperativeHandle(a, b, c) {\n    c = null !== c && void 0 !== c ? c.concat([a]) : null;\n    return Uh(4, 2, Zh.bind(null, b, a), c);\n  },\n  useLayoutEffect: function useLayoutEffect(a, b) {\n    return Uh(4, 2, a, b);\n  },\n  useMemo: function useMemo(a, b) {\n    var c = Hh();\n    b = void 0 === b ? null : b;\n    a = a();\n    c.memoizedState = [a, b];\n    return a;\n  },\n  useReducer: function useReducer(a, b, c) {\n    var d = Hh();\n    b = void 0 !== c ? c(b) : b;\n    d.memoizedState = d.baseState = b;\n    a = d.queue = {\n      pending: null,\n      dispatch: null,\n      lastRenderedReducer: a,\n      lastRenderedState: b\n    };\n    a = a.dispatch = Oh.bind(null, R, a);\n    return [d.memoizedState, a];\n  },\n  useRef: Sh,\n  useState: Qh,\n  useDebugValue: ai,\n  useDeferredValue: function useDeferredValue(a) {\n    var b = Qh(a),\n        c = b[0],\n        d = b[1];\n    Wh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function useTransition() {\n    var a = Qh(!1),\n        b = a[0];\n    a = di.bind(null, a[1]);\n    Sh(a);\n    return [a, b];\n  },\n  useMutableSource: function useMutableSource(a, b, c) {\n    var d = Hh();\n    d.memoizedState = {\n      refs: {\n        getSnapshot: b,\n        setSnapshot: null\n      },\n      source: a,\n      subscribe: c\n    };\n    return Nh(d, a, b, c);\n  },\n  useOpaqueIdentifier: function useOpaqueIdentifier() {\n    if (lh) {\n      var a = !1,\n          b = uf(function () {\n        a || (a = !0, c("r:" + (tf++).toString(36)));\n        throw Error(y(355));\n      }),\n          c = Qh(b)[1];\n      0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function () {\n        c("r:" + (tf++).toString(36));\n      }, void 0, null));\n      return b;\n    }\n\n    b = "r:" + (tf++).toString(36);\n    Qh(b);\n    return b;\n  },\n  unstable_isNewReconciler: !1\n},\n    Eh = {\n  readContext: vg,\n  useCallback: bi,\n  useContext: vg,\n  useEffect: Xh,\n  useImperativeHandle: $h,\n  useLayoutEffect: Yh,\n  useMemo: ci,\n  useReducer: Kh,\n  useRef: Th,\n  useState: function useState() {\n    return Kh(Jh);\n  },\n  useDebugValue: ai,\n  useDeferredValue: function useDeferredValue(a) {\n    var b = Kh(Jh),\n        c = b[0],\n        d = b[1];\n    Xh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function useTransition() {\n    var a = Kh(Jh)[0];\n    return [Th().current, a];\n  },\n  useMutableSource: Ph,\n  useOpaqueIdentifier: function useOpaqueIdentifier() {\n    return Kh(Jh)[0];\n  },\n  unstable_isNewReconciler: !1\n},\n    Fh = {\n  readContext: vg,\n  useCallback: bi,\n  useContext: vg,\n  useEffect: Xh,\n  useImperativeHandle: $h,\n  useLayoutEffect: Yh,\n  useMemo: ci,\n  useReducer: Lh,\n  useRef: Th,\n  useState: function useState() {\n    return Lh(Jh);\n  },\n  useDebugValue: ai,\n  useDeferredValue: function useDeferredValue(a) {\n    var b = Lh(Jh),\n        c = b[0],\n        d = b[1];\n    Xh(function () {\n      var b = wh.transition;\n      wh.transition = 1;\n\n      try {\n        d(a);\n      } finally {\n        wh.transition = b;\n      }\n    }, [a]);\n    return c;\n  },\n  useTransition: function useTransition() {\n    var a = Lh(Jh)[0];\n    return [Th().current, a];\n  },\n  useMutableSource: Ph,\n  useOpaqueIdentifier: function useOpaqueIdentifier() {\n    return Lh(Jh)[0];\n  },\n  unstable_isNewReconciler: !1\n},\n    ei = ra.ReactCurrentOwner,\n    ug = !1;\n\nfunction fi(a, b, c, d) {\n  b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);\n}\n\nfunction gi(a, b, c, d, e) {\n  c = c.render;\n  var f = b.ref;\n  tg(b, e);\n  d = Ch(a, b, c, d, f, e);\n  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);\n  b.flags |= 1;\n  fi(a, b, d, e);\n  return b.child;\n}\n\nfunction ii(a, b, c, d, e, f) {\n  if (null === a) {\n    var g = c.type;\n    if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a, b, g, d, e, f);\n    a = Vg(c.type, null, d, b, b.mode, f);\n    a.ref = b.ref;\n    a.return = b;\n    return b.child = a;\n  }\n\n  g = a.child;\n  if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a.ref === b.ref)) return hi(a, b, f);\n  b.flags |= 1;\n  a = Tg(g, d);\n  a.ref = b.ref;\n  a.return = b;\n  return b.child = a;\n}\n\nfunction ki(a, b, c, d, e, f) {\n  if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref) if (ug = !1, 0 !== (f & e)) 0 !== (a.flags & 16384) && (ug = !0);else return b.lanes = a.lanes, hi(a, b, f);\n  return li(a, b, c, d, f);\n}\n\nfunction mi(a, b, c) {\n  var d = b.pendingProps,\n      e = d.children,\n      f = null !== a ? a.memoizedState : null;\n  if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {\n    if (0 === (b.mode & 4)) b.memoizedState = {\n      baseLanes: 0\n    }, ni(b, c);else if (0 !== (c & 1073741824)) b.memoizedState = {\n      baseLanes: 0\n    }, ni(b, null !== f ? f.baseLanes : c);else return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {\n      baseLanes: a\n    }, ni(b, a), null;\n  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);\n  fi(a, b, e, c);\n  return b.child;\n}\n\nfunction oi(a, b) {\n  var c = b.ref;\n  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 128;\n}\n\nfunction li(a, b, c, d, e) {\n  var f = Ff(c) ? Df : M.current;\n  f = Ef(b, f);\n  tg(b, e);\n  c = Ch(a, b, c, d, f, e);\n  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);\n  b.flags |= 1;\n  fi(a, b, c, e);\n  return b.child;\n}\n\nfunction pi(a, b, c, d, e) {\n  if (Ff(c)) {\n    var f = !0;\n    Jf(b);\n  } else f = !1;\n\n  tg(b, e);\n  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;else if (null === a) {\n    var g = b.stateNode,\n        h = b.memoizedProps;\n    g.props = h;\n    var k = g.context,\n        l = c.contextType;\n    "object" === typeof l && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));\n    var n = c.getDerivedStateFromProps,\n        A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;\n    A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);\n    wg = !1;\n    var p = b.memoizedState;\n    g.state = p;\n    Cg(b, d, g, e);\n    k = b.memoizedState;\n    h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);\n  } else {\n    g = b.stateNode;\n    yg(a, b);\n    h = b.memoizedProps;\n    l = b.type === b.elementType ? h : lg(b.type, h);\n    g.props = l;\n    A = b.pendingProps;\n    p = g.context;\n    k = c.contextType;\n    "object" === typeof k && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));\n    var C = c.getDerivedStateFromProps;\n    (n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);\n    wg = !1;\n    p = b.memoizedState;\n    g.state = p;\n    Cg(b, d, g, e);\n    var x = b.memoizedState;\n    h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);\n  }\n  return qi(a, b, c, d, f, e);\n}\n\nfunction qi(a, b, c, d, e, f) {\n  oi(a, b);\n  var g = 0 !== (b.flags & 64);\n  if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);\n  d = b.stateNode;\n  ei.current = b;\n  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();\n  b.flags |= 1;\n  null !== a && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);\n  b.memoizedState = d.state;\n  e && Kf(b, c, !0);\n  return b.child;\n}\n\nfunction ri(a) {\n  var b = a.stateNode;\n  b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);\n  eh(a, b.containerInfo);\n}\n\nvar si = {\n  dehydrated: null,\n  retryLane: 0\n};\n\nfunction ti(a, b, c) {\n  var d = b.pendingProps,\n      e = P.current,\n      f = !1,\n      g;\n  (g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));\n  g ? (f = !0, b.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);\n  I(P, e & 1);\n\n  if (null === a) {\n    void 0 !== d.fallback && ph(b);\n    a = d.children;\n    e = d.fallback;\n    if (f) return a = ui(b, a, e, c), b.child.memoizedState = {\n      baseLanes: c\n    }, b.memoizedState = si, a;\n    if ("number" === typeof d.unstable_expectedLoadTime) return a = ui(b, a, e, c), b.child.memoizedState = {\n      baseLanes: c\n    }, b.memoizedState = si, b.lanes = 33554432, a;\n    c = vi({\n      mode: "visible",\n      children: a\n    }, b.mode, c, null);\n    c.return = b;\n    return b.child = c;\n  }\n\n  if (null !== a.memoizedState) {\n    if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {\n      baseLanes: c\n    } : {\n      baseLanes: e.baseLanes | c\n    }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;\n    c = xi(a, b, d.children, c);\n    b.memoizedState = null;\n    return c;\n  }\n\n  if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {\n    baseLanes: c\n  } : {\n    baseLanes: e.baseLanes | c\n  }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;\n  c = xi(a, b, d.children, c);\n  b.memoizedState = null;\n  return c;\n}\n\nfunction ui(a, b, c, d) {\n  var e = a.mode,\n      f = a.child;\n  b = {\n    mode: "hidden",\n    children: b\n  };\n  0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);\n  c = Xg(c, e, d, null);\n  f.return = a;\n  c.return = a;\n  f.sibling = c;\n  a.child = f;\n  return c;\n}\n\nfunction xi(a, b, c, d) {\n  var e = a.child;\n  a = e.sibling;\n  c = Tg(e, {\n    mode: "visible",\n    children: c\n  });\n  0 === (b.mode & 2) && (c.lanes = d);\n  c.return = b;\n  c.sibling = null;\n  null !== a && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);\n  return b.child = c;\n}\n\nfunction wi(a, b, c, d, e) {\n  var f = b.mode,\n      g = a.child;\n  a = g.sibling;\n  var h = {\n    mode: "hidden",\n    children: c\n  };\n  0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);\n  null !== a ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2);\n  d.return = b;\n  c.return = b;\n  c.sibling = d;\n  b.child = c;\n  return d;\n}\n\nfunction yi(a, b) {\n  a.lanes |= b;\n  var c = a.alternate;\n  null !== c && (c.lanes |= b);\n  sg(a.return, b);\n}\n\nfunction zi(a, b, c, d, e, f) {\n  var g = a.memoizedState;\n  null === g ? a.memoizedState = {\n    isBackwards: b,\n    rendering: null,\n    renderingStartTime: 0,\n    last: d,\n    tail: c,\n    tailMode: e,\n    lastEffect: f\n  } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);\n}\n\nfunction Ai(a, b, c) {\n  var d = b.pendingProps,\n      e = d.revealOrder,\n      f = d.tail;\n  fi(a, b, d.children, c);\n  d = P.current;\n  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;else {\n    if (null !== a && 0 !== (a.flags & 64)) a: for (a = b.child; null !== a;) {\n      if (13 === a.tag) null !== a.memoizedState && yi(a, c);else if (19 === a.tag) yi(a, c);else if (null !== a.child) {\n        a.child.return = a;\n        a = a.child;\n        continue;\n      }\n      if (a === b) break a;\n\n      for (; null === a.sibling;) {\n        if (null === a.return || a.return === b) break a;\n        a = a.return;\n      }\n\n      a.sibling.return = a.return;\n      a = a.sibling;\n    }\n    d &= 1;\n  }\n  I(P, d);\n  if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {\n    case "forwards":\n      c = b.child;\n\n      for (e = null; null !== c;) {\n        a = c.alternate, null !== a && null === ih(a) && (e = c), c = c.sibling;\n      }\n\n      c = e;\n      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);\n      zi(b, !1, e, c, f, b.lastEffect);\n      break;\n\n    case "backwards":\n      c = null;\n      e = b.child;\n\n      for (b.child = null; null !== e;) {\n        a = e.alternate;\n\n        if (null !== a && null === ih(a)) {\n          b.child = e;\n          break;\n        }\n\n        a = e.sibling;\n        e.sibling = c;\n        c = e;\n        e = a;\n      }\n\n      zi(b, !0, c, null, f, b.lastEffect);\n      break;\n\n    case "together":\n      zi(b, !1, null, null, void 0, b.lastEffect);\n      break;\n\n    default:\n      b.memoizedState = null;\n  }\n  return b.child;\n}\n\nfunction hi(a, b, c) {\n  null !== a && (b.dependencies = a.dependencies);\n  Dg |= b.lanes;\n\n  if (0 !== (c & b.childLanes)) {\n    if (null !== a && b.child !== a.child) throw Error(y(153));\n\n    if (null !== b.child) {\n      a = b.child;\n      c = Tg(a, a.pendingProps);\n      b.child = c;\n\n      for (c.return = b; null !== a.sibling;) {\n        a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;\n      }\n\n      c.sibling = null;\n    }\n\n    return b.child;\n  }\n\n  return null;\n}\n\nvar Bi, Ci, Di, Ei;\n\nBi = function Bi(a, b) {\n  for (var c = b.child; null !== c;) {\n    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n    if (c === b) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n};\n\nCi = function Ci() {};\n\nDi = function Di(a, b, c, d) {\n  var e = a.memoizedProps;\n\n  if (e !== d) {\n    a = b.stateNode;\n    dh(ah.current);\n    var f = null;\n\n    switch (c) {\n      case "input":\n        e = Ya(a, e);\n        d = Ya(a, d);\n        f = [];\n        break;\n\n      case "option":\n        e = eb(a, e);\n        d = eb(a, d);\n        f = [];\n        break;\n\n      case "select":\n        e = m({}, e, {\n          value: void 0\n        });\n        d = m({}, d, {\n          value: void 0\n        });\n        f = [];\n        break;\n\n      case "textarea":\n        e = gb(a, e);\n        d = gb(a, d);\n        f = [];\n        break;\n\n      default:\n        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = jf);\n    }\n\n    vb(c, d);\n    var g;\n    c = null;\n\n    for (l in e) {\n      if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {\n        var h = e[l];\n\n        for (g in h) {\n          h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");\n        }\n      } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));\n    }\n\n    for (l in d) {\n      var k = d[l];\n      h = null != e ? e[l] : void 0;\n      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {\n        if (h) {\n          for (g in h) {\n            !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");\n          }\n\n          for (g in k) {\n            k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);\n          }\n        } else c || (f || (f = []), f.push(l, c)), c = k;\n      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G("scroll", a), f || h === k || (f = [])) : "object" === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));\n    }\n\n    c && (f = f || []).push("style", c);\n    var l = f;\n    if (b.updateQueue = l) b.flags |= 4;\n  }\n};\n\nEi = function Ei(a, b, c, d) {\n  c !== d && (b.flags |= 4);\n};\n\nfunction Fi(a, b) {\n  if (!lh) switch (a.tailMode) {\n    case "hidden":\n      b = a.tail;\n\n      for (var c = null; null !== b;) {\n        null !== b.alternate && (c = b), b = b.sibling;\n      }\n\n      null === c ? a.tail = null : c.sibling = null;\n      break;\n\n    case "collapsed":\n      c = a.tail;\n\n      for (var d = null; null !== c;) {\n        null !== c.alternate && (d = c), c = c.sibling;\n      }\n\n      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;\n  }\n}\n\nfunction Gi(a, b, c) {\n  var d = b.pendingProps;\n\n  switch (b.tag) {\n    case 2:\n    case 16:\n    case 15:\n    case 0:\n    case 11:\n    case 7:\n    case 8:\n    case 12:\n    case 9:\n    case 14:\n      return null;\n\n    case 1:\n      return Ff(b.type) && Gf(), null;\n\n    case 3:\n      fh();\n      H(N);\n      H(M);\n      uh();\n      d = b.stateNode;\n      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);\n      if (null === a || null === a.child) rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);\n      Ci(b);\n      return null;\n\n    case 5:\n      hh(b);\n      var e = dh(ch.current);\n      c = b.type;\n      if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);else {\n        if (!d) {\n          if (null === b.stateNode) throw Error(y(166));\n          return null;\n        }\n\n        a = dh(ah.current);\n\n        if (rh(b)) {\n          d = b.stateNode;\n          c = b.type;\n          var f = b.memoizedProps;\n          d[wf] = b;\n          d[xf] = f;\n\n          switch (c) {\n            case "dialog":\n              G("cancel", d);\n              G("close", d);\n              break;\n\n            case "iframe":\n            case "object":\n            case "embed":\n              G("load", d);\n              break;\n\n            case "video":\n            case "audio":\n              for (a = 0; a < Xe.length; a++) {\n                G(Xe[a], d);\n              }\n\n              break;\n\n            case "source":\n              G("error", d);\n              break;\n\n            case "img":\n            case "image":\n            case "link":\n              G("error", d);\n              G("load", d);\n              break;\n\n            case "details":\n              G("toggle", d);\n              break;\n\n            case "input":\n              Za(d, f);\n              G("invalid", d);\n              break;\n\n            case "select":\n              d._wrapperState = {\n                wasMultiple: !!f.multiple\n              };\n              G("invalid", d);\n              break;\n\n            case "textarea":\n              hb(d, f), G("invalid", d);\n          }\n\n          vb(c, f);\n          a = null;\n\n          for (var g in f) {\n            f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a = ["children", e]) : "number" === typeof e && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G("scroll", d));\n          }\n\n          switch (c) {\n            case "input":\n              Va(d);\n              cb(d, f, !0);\n              break;\n\n            case "textarea":\n              Va(d);\n              jb(d);\n              break;\n\n            case "select":\n            case "option":\n              break;\n\n            default:\n              "function" === typeof f.onClick && (d.onclick = jf);\n          }\n\n          d = a;\n          b.updateQueue = d;\n          null !== d && (b.flags |= 4);\n        } else {\n          g = 9 === e.nodeType ? e : e.ownerDocument;\n          a === kb.html && (a = lb(c));\n          a === kb.html ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {\n            is: d.is\n          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);\n          a[wf] = b;\n          a[xf] = d;\n          Bi(a, b, !1, !1);\n          b.stateNode = a;\n          g = wb(c, d);\n\n          switch (c) {\n            case "dialog":\n              G("cancel", a);\n              G("close", a);\n              e = d;\n              break;\n\n            case "iframe":\n            case "object":\n            case "embed":\n              G("load", a);\n              e = d;\n              break;\n\n            case "video":\n            case "audio":\n              for (e = 0; e < Xe.length; e++) {\n                G(Xe[e], a);\n              }\n\n              e = d;\n              break;\n\n            case "source":\n              G("error", a);\n              e = d;\n              break;\n\n            case "img":\n            case "image":\n            case "link":\n              G("error", a);\n              G("load", a);\n              e = d;\n              break;\n\n            case "details":\n              G("toggle", a);\n              e = d;\n              break;\n\n            case "input":\n              Za(a, d);\n              e = Ya(a, d);\n              G("invalid", a);\n              break;\n\n            case "option":\n              e = eb(a, d);\n              break;\n\n            case "select":\n              a._wrapperState = {\n                wasMultiple: !!d.multiple\n              };\n              e = m({}, d, {\n                value: void 0\n              });\n              G("invalid", a);\n              break;\n\n            case "textarea":\n              hb(a, d);\n              e = gb(a, d);\n              G("invalid", a);\n              break;\n\n            default:\n              e = d;\n          }\n\n          vb(c, e);\n          var h = e;\n\n          for (f in h) {\n            if (h.hasOwnProperty(f)) {\n              var k = h[f];\n              "style" === f ? tb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a, k) : "number" === typeof k && pb(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G("scroll", a) : null != k && qa(a, f, k, g));\n            }\n          }\n\n          switch (c) {\n            case "input":\n              Va(a);\n              cb(a, d, !1);\n              break;\n\n            case "textarea":\n              Va(a);\n              jb(a);\n              break;\n\n            case "option":\n              null != d.value && a.setAttribute("value", "" + Sa(d.value));\n              break;\n\n            case "select":\n              a.multiple = !!d.multiple;\n              f = d.value;\n              null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);\n              break;\n\n            default:\n              "function" === typeof e.onClick && (a.onclick = jf);\n          }\n\n          mf(c, d) && (b.flags |= 4);\n        }\n\n        null !== b.ref && (b.flags |= 128);\n      }\n      return null;\n\n    case 6:\n      if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);else {\n        if ("string" !== typeof d && null === b.stateNode) throw Error(y(166));\n        c = dh(ch.current);\n        dh(ah.current);\n        rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);\n      }\n      return null;\n\n    case 13:\n      H(P);\n      d = b.memoizedState;\n      if (0 !== (b.flags & 64)) return b.lanes = c, b;\n      d = null !== d;\n      c = !1;\n      null === a ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a.memoizedState;\n      if (d && !c && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);else {\n        if (0 === V || 3 === V) V = 4;\n        null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);\n      }\n      if (d || c) b.flags |= 4;\n      return null;\n\n    case 4:\n      return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;\n\n    case 10:\n      return rg(b), null;\n\n    case 17:\n      return Ff(b.type) && Gf(), null;\n\n    case 19:\n      H(P);\n      d = b.memoizedState;\n      if (null === d) return null;\n      f = 0 !== (b.flags & 64);\n      g = d.rendering;\n      if (null === g) {\n        if (f) Fi(d, !1);else {\n          if (0 !== V || null !== a && 0 !== (a.flags & 64)) for (a = b.child; null !== a;) {\n            g = ih(a);\n\n            if (null !== g) {\n              b.flags |= 64;\n              Fi(d, !1);\n              f = g.updateQueue;\n              null !== f && (b.updateQueue = f, b.flags |= 4);\n              null === d.lastEffect && (b.firstEffect = null);\n              b.lastEffect = d.lastEffect;\n              d = c;\n\n              for (c = b.child; null !== c;) {\n                f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {\n                  lanes: a.lanes,\n                  firstContext: a.firstContext\n                }), c = c.sibling;\n              }\n\n              I(P, P.current & 1 | 2);\n              return b.child;\n            }\n\n            a = a.sibling;\n          }\n          null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);\n        }\n      } else {\n        if (!f) if (a = ih(g), null !== a) {\n          if (b.flags |= 64, f = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;\n        } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);\n        d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);\n      }\n      return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;\n\n    case 23:\n    case 24:\n      return Ki(), null !== a && null !== a.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;\n  }\n\n  throw Error(y(156, b.tag));\n}\n\nfunction Li(a) {\n  switch (a.tag) {\n    case 1:\n      Ff(a.type) && Gf();\n      var b = a.flags;\n      return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;\n\n    case 3:\n      fh();\n      H(N);\n      H(M);\n      uh();\n      b = a.flags;\n      if (0 !== (b & 64)) throw Error(y(285));\n      a.flags = b & -4097 | 64;\n      return a;\n\n    case 5:\n      return hh(a), null;\n\n    case 13:\n      return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;\n\n    case 19:\n      return H(P), null;\n\n    case 4:\n      return fh(), null;\n\n    case 10:\n      return rg(a), null;\n\n    case 23:\n    case 24:\n      return Ki(), null;\n\n    default:\n      return null;\n  }\n}\n\nfunction Mi(a, b) {\n  try {\n    var c = "",\n        d = b;\n\n    do {\n      c += Qa(d), d = d.return;\n    } while (d);\n\n    var e = c;\n  } catch (f) {\n    e = "\\nError generating stack: " + f.message + "\\n" + f.stack;\n  }\n\n  return {\n    value: a,\n    source: b,\n    stack: e\n  };\n}\n\nfunction Ni(a, b) {\n  try {\n    console.error(b.value);\n  } catch (c) {\n    setTimeout(function () {\n      throw c;\n    });\n  }\n}\n\nvar Oi = "function" === typeof WeakMap ? WeakMap : Map;\n\nfunction Pi(a, b, c) {\n  c = zg(-1, c);\n  c.tag = 3;\n  c.payload = {\n    element: null\n  };\n  var d = b.value;\n\n  c.callback = function () {\n    Qi || (Qi = !0, Ri = d);\n    Ni(a, b);\n  };\n\n  return c;\n}\n\nfunction Si(a, b, c) {\n  c = zg(-1, c);\n  c.tag = 3;\n  var d = a.type.getDerivedStateFromError;\n\n  if ("function" === typeof d) {\n    var e = b.value;\n\n    c.payload = function () {\n      Ni(a, b);\n      return d(e);\n    };\n  }\n\n  var f = a.stateNode;\n  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {\n    "function" !== typeof d && (null === Ti ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));\n    var c = b.stack;\n    this.componentDidCatch(b.value, {\n      componentStack: null !== c ? c : ""\n    });\n  });\n  return c;\n}\n\nvar Ui = "function" === typeof WeakSet ? WeakSet : Set;\n\nfunction Vi(a) {\n  var b = a.ref;\n  if (null !== b) if ("function" === typeof b) try {\n    b(null);\n  } catch (c) {\n    Wi(a, c);\n  } else b.current = null;\n}\n\nfunction Xi(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 15:\n    case 22:\n      return;\n\n    case 1:\n      if (b.flags & 256 && null !== a) {\n        var c = a.memoizedProps,\n            d = a.memoizedState;\n        a = b.stateNode;\n        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);\n        a.__reactInternalSnapshotBeforeUpdate = b;\n      }\n\n      return;\n\n    case 3:\n      b.flags & 256 && qf(b.stateNode.containerInfo);\n      return;\n\n    case 5:\n    case 6:\n    case 4:\n    case 17:\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction Yi(a, b, c) {\n  switch (c.tag) {\n    case 0:\n    case 11:\n    case 15:\n    case 22:\n      b = c.updateQueue;\n      b = null !== b ? b.lastEffect : null;\n\n      if (null !== b) {\n        a = b = b.next;\n\n        do {\n          if (3 === (a.tag & 3)) {\n            var d = a.create;\n            a.destroy = d();\n          }\n\n          a = a.next;\n        } while (a !== b);\n      }\n\n      b = c.updateQueue;\n      b = null !== b ? b.lastEffect : null;\n\n      if (null !== b) {\n        a = b = b.next;\n\n        do {\n          var e = a;\n          d = e.next;\n          e = e.tag;\n          0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));\n          a = d;\n        } while (a !== b);\n      }\n\n      return;\n\n    case 1:\n      a = c.stateNode;\n      c.flags & 4 && (null === b ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));\n      b = c.updateQueue;\n      null !== b && Eg(c, b, a);\n      return;\n\n    case 3:\n      b = c.updateQueue;\n\n      if (null !== b) {\n        a = null;\n        if (null !== c.child) switch (c.child.tag) {\n          case 5:\n            a = c.child.stateNode;\n            break;\n\n          case 1:\n            a = c.child.stateNode;\n        }\n        Eg(c, b, a);\n      }\n\n      return;\n\n    case 5:\n      a = c.stateNode;\n      null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();\n      return;\n\n    case 6:\n      return;\n\n    case 4:\n      return;\n\n    case 12:\n      return;\n\n    case 13:\n      null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));\n      return;\n\n    case 19:\n    case 17:\n    case 20:\n    case 21:\n    case 23:\n    case 24:\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction aj(a, b) {\n  for (var c = a;;) {\n    if (5 === c.tag) {\n      var d = c.stateNode;\n      if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";else {\n        d = c.stateNode;\n        var e = c.memoizedProps.style;\n        e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;\n        d.style.display = sb("display", e);\n      }\n    } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a) && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n\n    if (c === a) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === a) return;\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n}\n\nfunction bj(a, b) {\n  if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {\n    Mf.onCommitFiberUnmount(Lf, b);\n  } catch (f) {}\n\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n    case 22:\n      a = b.updateQueue;\n\n      if (null !== a && (a = a.lastEffect, null !== a)) {\n        var c = a = a.next;\n\n        do {\n          var d = c,\n              e = d.destroy;\n          d = d.tag;\n          if (void 0 !== e) if (0 !== (d & 4)) Zi(b, c);else {\n            d = b;\n\n            try {\n              e();\n            } catch (f) {\n              Wi(d, f);\n            }\n          }\n          c = c.next;\n        } while (c !== a);\n      }\n\n      break;\n\n    case 1:\n      Vi(b);\n      a = b.stateNode;\n      if ("function" === typeof a.componentWillUnmount) try {\n        a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();\n      } catch (f) {\n        Wi(b, f);\n      }\n      break;\n\n    case 5:\n      Vi(b);\n      break;\n\n    case 4:\n      cj(a, b);\n  }\n}\n\nfunction dj(a) {\n  a.alternate = null;\n  a.child = null;\n  a.dependencies = null;\n  a.firstEffect = null;\n  a.lastEffect = null;\n  a.memoizedProps = null;\n  a.memoizedState = null;\n  a.pendingProps = null;\n  a.return = null;\n  a.updateQueue = null;\n}\n\nfunction ej(a) {\n  return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n}\n\nfunction fj(a) {\n  a: {\n    for (var b = a.return; null !== b;) {\n      if (ej(b)) break a;\n      b = b.return;\n    }\n\n    throw Error(y(160));\n  }\n\n  var c = b;\n  b = c.stateNode;\n\n  switch (c.tag) {\n    case 5:\n      var d = !1;\n      break;\n\n    case 3:\n      b = b.containerInfo;\n      d = !0;\n      break;\n\n    case 4:\n      b = b.containerInfo;\n      d = !0;\n      break;\n\n    default:\n      throw Error(y(161));\n  }\n\n  c.flags & 16 && (pb(b, ""), c.flags &= -17);\n\n  a: b: for (c = a;;) {\n    for (; null === c.sibling;) {\n      if (null === c.return || ej(c.return)) {\n        c = null;\n        break a;\n      }\n\n      c = c.return;\n    }\n\n    c.sibling.return = c.return;\n\n    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {\n      if (c.flags & 2) continue b;\n      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;\n    }\n\n    if (!(c.flags & 2)) {\n      c = c.stateNode;\n      break a;\n    }\n  }\n\n  d ? gj(a, c, b) : hj(a, c, b);\n}\n\nfunction gj(a, b, c) {\n  var d = a.tag,\n      e = 5 === d || 6 === d;\n  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));else if (4 !== d && (a = a.child, null !== a)) for (gj(a, b, c), a = a.sibling; null !== a;) {\n    gj(a, b, c), a = a.sibling;\n  }\n}\n\nfunction hj(a, b, c) {\n  var d = a.tag,\n      e = 5 === d || 6 === d;\n  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (hj(a, b, c), a = a.sibling; null !== a;) {\n    hj(a, b, c), a = a.sibling;\n  }\n}\n\nfunction cj(a, b) {\n  for (var c = b, d = !1, e, f;;) {\n    if (!d) {\n      d = c.return;\n\n      a: for (;;) {\n        if (null === d) throw Error(y(160));\n        e = d.stateNode;\n\n        switch (d.tag) {\n          case 5:\n            f = !1;\n            break a;\n\n          case 3:\n            e = e.containerInfo;\n            f = !0;\n            break a;\n\n          case 4:\n            e = e.containerInfo;\n            f = !0;\n            break a;\n        }\n\n        d = d.return;\n      }\n\n      d = !0;\n    }\n\n    if (5 === c.tag || 6 === c.tag) {\n      a: for (var g = a, h = c, k = h;;) {\n        if (bj(g, k), null !== k.child && 4 !== k.tag) k.child.return = k, k = k.child;else {\n          if (k === h) break a;\n\n          for (; null === k.sibling;) {\n            if (null === k.return || k.return === h) break a;\n            k = k.return;\n          }\n\n          k.sibling.return = k.return;\n          k = k.sibling;\n        }\n      }\n\n      f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);\n    } else if (4 === c.tag) {\n      if (null !== c.child) {\n        e = c.stateNode.containerInfo;\n        f = !0;\n        c.child.return = c;\n        c = c.child;\n        continue;\n      }\n    } else if (bj(a, c), null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n\n    if (c === b) break;\n\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n      4 === c.tag && (d = !1);\n    }\n\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n}\n\nfunction ij(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n    case 22:\n      var c = b.updateQueue;\n      c = null !== c ? c.lastEffect : null;\n\n      if (null !== c) {\n        var d = c = c.next;\n\n        do {\n          3 === (d.tag & 3) && (a = d.destroy, d.destroy = void 0, void 0 !== a && a()), d = d.next;\n        } while (d !== c);\n      }\n\n      return;\n\n    case 1:\n      return;\n\n    case 5:\n      c = b.stateNode;\n\n      if (null != c) {\n        d = b.memoizedProps;\n        var e = null !== a ? a.memoizedProps : d;\n        a = b.type;\n        var f = b.updateQueue;\n        b.updateQueue = null;\n\n        if (null !== f) {\n          c[xf] = d;\n          "input" === a && "radio" === d.type && null != d.name && $a(c, d);\n          wb(a, e);\n          b = wb(a, d);\n\n          for (e = 0; e < f.length; e += 2) {\n            var g = f[e],\n                h = f[e + 1];\n            "style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);\n          }\n\n          switch (a) {\n            case "input":\n              ab(c, d);\n              break;\n\n            case "textarea":\n              ib(c, d);\n              break;\n\n            case "select":\n              a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));\n          }\n        }\n      }\n\n      return;\n\n    case 6:\n      if (null === b.stateNode) throw Error(y(162));\n      b.stateNode.nodeValue = b.memoizedProps;\n      return;\n\n    case 3:\n      c = b.stateNode;\n      c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));\n      return;\n\n    case 12:\n      return;\n\n    case 13:\n      null !== b.memoizedState && (jj = O(), aj(b.child, !0));\n      kj(b);\n      return;\n\n    case 19:\n      kj(b);\n      return;\n\n    case 17:\n      return;\n\n    case 23:\n    case 24:\n      aj(b, null !== b.memoizedState);\n      return;\n  }\n\n  throw Error(y(163));\n}\n\nfunction kj(a) {\n  var b = a.updateQueue;\n\n  if (null !== b) {\n    a.updateQueue = null;\n    var c = a.stateNode;\n    null === c && (c = a.stateNode = new Ui());\n    b.forEach(function (b) {\n      var d = lj.bind(null, a, b);\n      c.has(b) || (c.add(b), b.then(d, d));\n    });\n  }\n}\n\nfunction mj(a, b) {\n  return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;\n}\n\nvar nj = Math.ceil,\n    oj = ra.ReactCurrentDispatcher,\n    pj = ra.ReactCurrentOwner,\n    X = 0,\n    U = null,\n    Y = null,\n    W = 0,\n    qj = 0,\n    rj = Bf(0),\n    V = 0,\n    sj = null,\n    tj = 0,\n    Dg = 0,\n    Hi = 0,\n    uj = 0,\n    vj = null,\n    jj = 0,\n    Ji = Infinity;\n\nfunction wj() {\n  Ji = O() + 500;\n}\n\nvar Z = null,\n    Qi = !1,\n    Ri = null,\n    Ti = null,\n    xj = !1,\n    yj = null,\n    zj = 90,\n    Aj = [],\n    Bj = [],\n    Cj = null,\n    Dj = 0,\n    Ej = null,\n    Fj = -1,\n    Gj = 0,\n    Hj = 0,\n    Ij = null,\n    Jj = !1;\n\nfunction Hg() {\n  return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();\n}\n\nfunction Ig(a) {\n  a = a.mode;\n  if (0 === (a & 2)) return 1;\n  if (0 === (a & 4)) return 99 === eg() ? 1 : 2;\n  0 === Gj && (Gj = tj);\n\n  if (0 !== kg.transition) {\n    0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);\n    a = Gj;\n    var b = 4186112 & ~Hj;\n    b &= -b;\n    0 === b && (a = 4186112 & ~a, b = a & -a, 0 === b && (b = 8192));\n    return b;\n  }\n\n  a = eg();\n  0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));\n  return a;\n}\n\nfunction Jg(a, b, c) {\n  if (50 < Dj) throw Dj = 0, Ej = null, Error(y(185));\n  a = Kj(a, b);\n  if (null === a) return null;\n  $c(a, b, c);\n  a === U && (Hi |= b, 4 === V && Ii(a, W));\n  var d = eg();\n  1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));\n  vj = a;\n}\n\nfunction Kj(a, b) {\n  a.lanes |= b;\n  var c = a.alternate;\n  null !== c && (c.lanes |= b);\n  c = a;\n\n  for (a = a.return; null !== a;) {\n    a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;\n  }\n\n  return 3 === c.tag ? c.stateNode : null;\n}\n\nfunction Mj(a, b) {\n  for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g;) {\n    var h = 31 - Vc(g),\n        k = 1 << h,\n        l = f[h];\n\n    if (-1 === l) {\n      if (0 === (k & d) || 0 !== (k & e)) {\n        l = b;\n        Rc(k);\n        var n = F;\n        f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;\n      }\n    } else l <= b && (a.expiredLanes |= k);\n\n    g &= ~k;\n  }\n\n  d = Uc(a, a === U ? W : 0);\n  b = F;\n  if (0 === d) null !== c && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);else {\n    if (null !== c) {\n      if (a.callbackPriority === b) return;\n      c !== Zf && Pf(c);\n    }\n\n    15 === b ? (c = Lj.bind(null, a), null === ag ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));\n    a.callbackPriority = b;\n    a.callbackNode = c;\n  }\n}\n\nfunction Nj(a) {\n  Fj = -1;\n  Hj = Gj = 0;\n  if (0 !== (X & 48)) throw Error(y(327));\n  var b = a.callbackNode;\n  if (Oj() && a.callbackNode !== b) return null;\n  var c = Uc(a, a === U ? W : 0);\n  if (0 === c) return null;\n  var d = c;\n  var e = X;\n  X |= 16;\n  var f = Pj();\n  if (U !== a || W !== d) wj(), Qj(a, d);\n\n  do {\n    try {\n      Rj();\n      break;\n    } catch (h) {\n      Sj(a, h);\n    }\n  } while (1);\n\n  qg();\n  oj.current = f;\n  X = e;\n  null !== Y ? d = 0 : (U = null, W = 0, d = V);\n  if (0 !== (tj & Hi)) Qj(a, 0);else if (0 !== d) {\n    2 === d && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), 0 !== c && (d = Tj(a, c)));\n    if (1 === d) throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;\n    a.finishedWork = a.current.alternate;\n    a.finishedLanes = c;\n\n    switch (d) {\n      case 0:\n      case 1:\n        throw Error(y(345));\n\n      case 2:\n        Uj(a);\n        break;\n\n      case 3:\n        Ii(a, c);\n\n        if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {\n          if (0 !== Uc(a, 0)) break;\n          e = a.suspendedLanes;\n\n          if ((e & c) !== c) {\n            Hg();\n            a.pingedLanes |= a.suspendedLanes & e;\n            break;\n          }\n\n          a.timeoutHandle = of(Uj.bind(null, a), d);\n          break;\n        }\n\n        Uj(a);\n        break;\n\n      case 4:\n        Ii(a, c);\n        if ((c & 4186112) === c) break;\n        d = a.eventTimes;\n\n        for (e = -1; 0 < c;) {\n          var g = 31 - Vc(c);\n          f = 1 << g;\n          g = d[g];\n          g > e && (e = g);\n          c &= ~f;\n        }\n\n        c = e;\n        c = O() - c;\n        c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;\n\n        if (10 < c) {\n          a.timeoutHandle = of(Uj.bind(null, a), c);\n          break;\n        }\n\n        Uj(a);\n        break;\n\n      case 5:\n        Uj(a);\n        break;\n\n      default:\n        throw Error(y(329));\n    }\n  }\n  Mj(a, O());\n  return a.callbackNode === b ? Nj.bind(null, a) : null;\n}\n\nfunction Ii(a, b) {\n  b &= ~uj;\n  b &= ~Hi;\n  a.suspendedLanes |= b;\n  a.pingedLanes &= ~b;\n\n  for (a = a.expirationTimes; 0 < b;) {\n    var c = 31 - Vc(b),\n        d = 1 << c;\n    a[c] = -1;\n    b &= ~d;\n  }\n}\n\nfunction Lj(a) {\n  if (0 !== (X & 48)) throw Error(y(327));\n  Oj();\n\n  if (a === U && 0 !== (a.expiredLanes & W)) {\n    var b = W;\n    var c = Tj(a, b);\n    0 !== (tj & Hi) && (b = Uc(a, b), c = Tj(a, b));\n  } else b = Uc(a, 0), c = Tj(a, b);\n\n  0 !== a.tag && 2 === c && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), 0 !== b && (c = Tj(a, b)));\n  if (1 === c) throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;\n  a.finishedWork = a.current.alternate;\n  a.finishedLanes = b;\n  Uj(a);\n  Mj(a, O());\n  return null;\n}\n\nfunction Vj() {\n  if (null !== Cj) {\n    var a = Cj;\n    Cj = null;\n    a.forEach(function (a) {\n      a.expiredLanes |= 24 & a.pendingLanes;\n      Mj(a, O());\n    });\n  }\n\n  ig();\n}\n\nfunction Wj(a, b) {\n  var c = X;\n  X |= 1;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n}\n\nfunction Xj(a, b) {\n  var c = X;\n  X &= -2;\n  X |= 8;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n}\n\nfunction ni(a, b) {\n  I(rj, qj);\n  qj |= b;\n  tj |= b;\n}\n\nfunction Ki() {\n  qj = rj.current;\n  H(rj);\n}\n\nfunction Qj(a, b) {\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  var c = a.timeoutHandle;\n  -1 !== c && (a.timeoutHandle = -1, pf(c));\n  if (null !== Y) for (c = Y.return; null !== c;) {\n    var d = c;\n\n    switch (d.tag) {\n      case 1:\n        d = d.type.childContextTypes;\n        null !== d && void 0 !== d && Gf();\n        break;\n\n      case 3:\n        fh();\n        H(N);\n        H(M);\n        uh();\n        break;\n\n      case 5:\n        hh(d);\n        break;\n\n      case 4:\n        fh();\n        break;\n\n      case 13:\n        H(P);\n        break;\n\n      case 19:\n        H(P);\n        break;\n\n      case 10:\n        rg(d);\n        break;\n\n      case 23:\n      case 24:\n        Ki();\n    }\n\n    c = c.return;\n  }\n  U = a;\n  Y = Tg(a.current, null);\n  W = qj = tj = b;\n  V = 0;\n  sj = null;\n  uj = Hi = Dg = 0;\n}\n\nfunction Sj(a, b) {\n  do {\n    var c = Y;\n\n    try {\n      qg();\n      vh.current = Gh;\n\n      if (yh) {\n        for (var d = R.memoizedState; null !== d;) {\n          var e = d.queue;\n          null !== e && (e.pending = null);\n          d = d.next;\n        }\n\n        yh = !1;\n      }\n\n      xh = 0;\n      T = S = R = null;\n      zh = !1;\n      pj.current = null;\n\n      if (null === c || null === c.return) {\n        V = 1;\n        sj = b;\n        Y = null;\n        break;\n      }\n\n      a: {\n        var f = a,\n            g = c.return,\n            h = c,\n            k = b;\n        b = W;\n        h.flags |= 2048;\n        h.firstEffect = h.lastEffect = null;\n\n        if (null !== k && "object" === typeof k && "function" === typeof k.then) {\n          var l = k;\n\n          if (0 === (h.mode & 2)) {\n            var n = h.alternate;\n            n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);\n          }\n\n          var A = 0 !== (P.current & 1),\n              p = g;\n\n          do {\n            var C;\n\n            if (C = 13 === p.tag) {\n              var x = p.memoizedState;\n              if (null !== x) C = null !== x.dehydrated ? !0 : !1;else {\n                var w = p.memoizedProps;\n                C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;\n              }\n            }\n\n            if (C) {\n              var z = p.updateQueue;\n\n              if (null === z) {\n                var u = new Set();\n                u.add(l);\n                p.updateQueue = u;\n              } else z.add(l);\n\n              if (0 === (p.mode & 2)) {\n                p.flags |= 64;\n                h.flags |= 16384;\n                h.flags &= -2981;\n                if (1 === h.tag) if (null === h.alternate) h.tag = 17;else {\n                  var t = zg(-1, 1);\n                  t.tag = 2;\n                  Ag(h, t);\n                }\n                h.lanes |= 1;\n                break a;\n              }\n\n              k = void 0;\n              h = b;\n              var q = f.pingCache;\n              null === q ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set(), q.set(l, k)));\n\n              if (!k.has(h)) {\n                k.add(h);\n                var v = Yj.bind(null, f, l, h);\n                l.then(v, v);\n              }\n\n              p.flags |= 4096;\n              p.lanes = b;\n              break a;\n            }\n\n            p = p.return;\n          } while (null !== p);\n\n          k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");\n        }\n\n        5 !== V && (V = 2);\n        k = Mi(k, h);\n        p = g;\n\n        do {\n          switch (p.tag) {\n            case 3:\n              f = k;\n              p.flags |= 4096;\n              b &= -b;\n              p.lanes |= b;\n              var J = Pi(p, f, b);\n              Bg(p, J);\n              break a;\n\n            case 1:\n              f = k;\n              var K = p.type,\n                  Q = p.stateNode;\n\n              if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {\n                p.flags |= 4096;\n                b &= -b;\n                p.lanes |= b;\n                var L = Si(p, f, b);\n                Bg(p, L);\n                break a;\n              }\n\n          }\n\n          p = p.return;\n        } while (null !== p);\n      }\n\n      Zj(c);\n    } catch (va) {\n      b = va;\n      Y === c && null !== c && (Y = c = c.return);\n      continue;\n    }\n\n    break;\n  } while (1);\n}\n\nfunction Pj() {\n  var a = oj.current;\n  oj.current = Gh;\n  return null === a ? Gh : a;\n}\n\nfunction Tj(a, b) {\n  var c = X;\n  X |= 16;\n  var d = Pj();\n  U === a && W === b || Qj(a, b);\n\n  do {\n    try {\n      ak();\n      break;\n    } catch (e) {\n      Sj(a, e);\n    }\n  } while (1);\n\n  qg();\n  X = c;\n  oj.current = d;\n  if (null !== Y) throw Error(y(261));\n  U = null;\n  W = 0;\n  return V;\n}\n\nfunction ak() {\n  for (; null !== Y;) {\n    bk(Y);\n  }\n}\n\nfunction Rj() {\n  for (; null !== Y && !Qf();) {\n    bk(Y);\n  }\n}\n\nfunction bk(a) {\n  var b = ck(a.alternate, a, qj);\n  a.memoizedProps = a.pendingProps;\n  null === b ? Zj(a) : Y = b;\n  pj.current = null;\n}\n\nfunction Zj(a) {\n  var b = a;\n\n  do {\n    var c = b.alternate;\n    a = b.return;\n\n    if (0 === (b.flags & 2048)) {\n      c = Gi(c, b, qj);\n\n      if (null !== c) {\n        Y = c;\n        return;\n      }\n\n      c = b;\n\n      if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {\n        for (var d = 0, e = c.child; null !== e;) {\n          d |= e.lanes | e.childLanes, e = e.sibling;\n        }\n\n        c.childLanes = d;\n      }\n\n      null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));\n    } else {\n      c = Li(b);\n\n      if (null !== c) {\n        c.flags &= 2047;\n        Y = c;\n        return;\n      }\n\n      null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);\n    }\n\n    b = b.sibling;\n\n    if (null !== b) {\n      Y = b;\n      return;\n    }\n\n    Y = b = a;\n  } while (null !== b);\n\n  0 === V && (V = 5);\n}\n\nfunction Uj(a) {\n  var b = eg();\n  gg(99, dk.bind(null, a, b));\n  return null;\n}\n\nfunction dk(a, b) {\n  do {\n    Oj();\n  } while (null !== yj);\n\n  if (0 !== (X & 48)) throw Error(y(327));\n  var c = a.finishedWork;\n  if (null === c) return null;\n  a.finishedWork = null;\n  a.finishedLanes = 0;\n  if (c === a.current) throw Error(y(177));\n  a.callbackNode = null;\n  var d = c.lanes | c.childLanes,\n      e = d,\n      f = a.pendingLanes & ~e;\n  a.pendingLanes = e;\n  a.suspendedLanes = 0;\n  a.pingedLanes = 0;\n  a.expiredLanes &= e;\n  a.mutableReadLanes &= e;\n  a.entangledLanes &= e;\n  e = a.entanglements;\n\n  for (var g = a.eventTimes, h = a.expirationTimes; 0 < f;) {\n    var k = 31 - Vc(f),\n        l = 1 << k;\n    e[k] = 0;\n    g[k] = -1;\n    h[k] = -1;\n    f &= ~l;\n  }\n\n  null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj.delete(a);\n  a === U && (Y = U = null, W = 0);\n  1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;\n\n  if (null !== d) {\n    e = X;\n    X |= 32;\n    pj.current = null;\n    kf = fd;\n    g = Ne();\n\n    if (Oe(g)) {\n      if ("selectionStart" in g) h = {\n        start: g.selectionStart,\n        end: g.selectionEnd\n      };else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {\n        h = l.anchorNode;\n        f = l.anchorOffset;\n        k = l.focusNode;\n        l = l.focusOffset;\n\n        try {\n          h.nodeType, k.nodeType;\n        } catch (va) {\n          h = null;\n          break a;\n        }\n\n        var n = 0,\n            A = -1,\n            p = -1,\n            C = 0,\n            x = 0,\n            w = g,\n            z = null;\n\n        b: for (;;) {\n          for (var u;;) {\n            w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);\n            w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);\n            3 === w.nodeType && (n += w.nodeValue.length);\n            if (null === (u = w.firstChild)) break;\n            z = w;\n            w = u;\n          }\n\n          for (;;) {\n            if (w === g) break b;\n            z === h && ++C === f && (A = n);\n            z === k && ++x === l && (p = n);\n            if (null !== (u = w.nextSibling)) break;\n            w = z;\n            z = w.parentNode;\n          }\n\n          w = u;\n        }\n\n        h = -1 === A || -1 === p ? null : {\n          start: A,\n          end: p\n        };\n      } else h = null;\n      h = h || {\n        start: 0,\n        end: 0\n      };\n    } else h = null;\n\n    lf = {\n      focusedElem: g,\n      selectionRange: h\n    };\n    fd = !1;\n    Ij = null;\n    Jj = !1;\n    Z = d;\n\n    do {\n      try {\n        ek();\n      } catch (va) {\n        if (null === Z) throw Error(y(330));\n        Wi(Z, va);\n        Z = Z.nextEffect;\n      }\n    } while (null !== Z);\n\n    Ij = null;\n    Z = d;\n\n    do {\n      try {\n        for (g = a; null !== Z;) {\n          var t = Z.flags;\n          t & 16 && pb(Z.stateNode, "");\n\n          if (t & 128) {\n            var q = Z.alternate;\n\n            if (null !== q) {\n              var v = q.ref;\n              null !== v && ("function" === typeof v ? v(null) : v.current = null);\n            }\n          }\n\n          switch (t & 1038) {\n            case 2:\n              fj(Z);\n              Z.flags &= -3;\n              break;\n\n            case 6:\n              fj(Z);\n              Z.flags &= -3;\n              ij(Z.alternate, Z);\n              break;\n\n            case 1024:\n              Z.flags &= -1025;\n              break;\n\n            case 1028:\n              Z.flags &= -1025;\n              ij(Z.alternate, Z);\n              break;\n\n            case 4:\n              ij(Z.alternate, Z);\n              break;\n\n            case 8:\n              h = Z;\n              cj(g, h);\n              var J = h.alternate;\n              dj(h);\n              null !== J && dj(J);\n          }\n\n          Z = Z.nextEffect;\n        }\n      } catch (va) {\n        if (null === Z) throw Error(y(330));\n        Wi(Z, va);\n        Z = Z.nextEffect;\n      }\n    } while (null !== Z);\n\n    v = lf;\n    q = Ne();\n    t = v.focusedElem;\n    g = v.selectionRange;\n\n    if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {\n      null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));\n      q = [];\n\n      for (v = t; v = v.parentNode;) {\n        1 === v.nodeType && q.push({\n          element: v,\n          left: v.scrollLeft,\n          top: v.scrollTop\n        });\n      }\n\n      "function" === typeof t.focus && t.focus();\n\n      for (t = 0; t < q.length; t++) {\n        v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;\n      }\n    }\n\n    fd = !!kf;\n    lf = kf = null;\n    a.current = c;\n    Z = d;\n\n    do {\n      try {\n        for (t = a; null !== Z;) {\n          var K = Z.flags;\n          K & 36 && Yi(t, Z.alternate, Z);\n\n          if (K & 128) {\n            q = void 0;\n            var Q = Z.ref;\n\n            if (null !== Q) {\n              var L = Z.stateNode;\n\n              switch (Z.tag) {\n                case 5:\n                  q = L;\n                  break;\n\n                default:\n                  q = L;\n              }\n\n              "function" === typeof Q ? Q(q) : Q.current = q;\n            }\n          }\n\n          Z = Z.nextEffect;\n        }\n      } catch (va) {\n        if (null === Z) throw Error(y(330));\n        Wi(Z, va);\n        Z = Z.nextEffect;\n      }\n    } while (null !== Z);\n\n    Z = null;\n    $f();\n    X = e;\n  } else a.current = c;\n\n  if (xj) xj = !1, yj = a, zj = b;else for (Z = d; null !== Z;) {\n    b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;\n  }\n  d = a.pendingLanes;\n  0 === d && (Ti = null);\n  1 === d ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;\n  c = c.stateNode;\n  if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {\n    Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));\n  } catch (va) {}\n  Mj(a, O());\n  if (Qi) throw Qi = !1, a = Ri, Ri = null, a;\n  if (0 !== (X & 8)) return null;\n  ig();\n  return null;\n}\n\nfunction ek() {\n  for (; null !== Z;) {\n    var a = Z.alternate;\n    Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));\n    var b = Z.flags;\n    0 !== (b & 256) && Xi(a, Z);\n    0 === (b & 512) || xj || (xj = !0, hg(97, function () {\n      Oj();\n      return null;\n    }));\n    Z = Z.nextEffect;\n  }\n}\n\nfunction Oj() {\n  if (90 !== zj) {\n    var a = 97 < zj ? 97 : zj;\n    zj = 90;\n    return gg(a, fk);\n  }\n\n  return !1;\n}\n\nfunction $i(a, b) {\n  Aj.push(b, a);\n  xj || (xj = !0, hg(97, function () {\n    Oj();\n    return null;\n  }));\n}\n\nfunction Zi(a, b) {\n  Bj.push(b, a);\n  xj || (xj = !0, hg(97, function () {\n    Oj();\n    return null;\n  }));\n}\n\nfunction fk() {\n  if (null === yj) return !1;\n  var a = yj;\n  yj = null;\n  if (0 !== (X & 48)) throw Error(y(331));\n  var b = X;\n  X |= 32;\n  var c = Bj;\n  Bj = [];\n\n  for (var d = 0; d < c.length; d += 2) {\n    var e = c[d],\n        f = c[d + 1],\n        g = e.destroy;\n    e.destroy = void 0;\n    if ("function" === typeof g) try {\n      g();\n    } catch (k) {\n      if (null === f) throw Error(y(330));\n      Wi(f, k);\n    }\n  }\n\n  c = Aj;\n  Aj = [];\n\n  for (d = 0; d < c.length; d += 2) {\n    e = c[d];\n    f = c[d + 1];\n\n    try {\n      var h = e.create;\n      e.destroy = h();\n    } catch (k) {\n      if (null === f) throw Error(y(330));\n      Wi(f, k);\n    }\n  }\n\n  for (h = a.current.firstEffect; null !== h;) {\n    a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;\n  }\n\n  X = b;\n  ig();\n  return !0;\n}\n\nfunction gk(a, b, c) {\n  b = Mi(c, b);\n  b = Pi(a, b, 1);\n  Ag(a, b);\n  b = Hg();\n  a = Kj(a, 1);\n  null !== a && ($c(a, 1, b), Mj(a, b));\n}\n\nfunction Wi(a, b) {\n  if (3 === a.tag) gk(a, a, b);else for (var c = a.return; null !== c;) {\n    if (3 === c.tag) {\n      gk(c, a, b);\n      break;\n    } else if (1 === c.tag) {\n      var d = c.stateNode;\n\n      if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {\n        a = Mi(b, a);\n        var e = Si(c, a, 1);\n        Ag(c, e);\n        e = Hg();\n        c = Kj(c, 1);\n        if (null !== c) $c(c, 1, e), Mj(c, e);else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {\n          d.componentDidCatch(b, a);\n        } catch (f) {}\n        break;\n      }\n    }\n\n    c = c.return;\n  }\n}\n\nfunction Yj(a, b, c) {\n  var d = a.pingCache;\n  null !== d && d.delete(b);\n  b = Hg();\n  a.pingedLanes |= a.suspendedLanes & c;\n  U === a && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);\n  Mj(a, b);\n}\n\nfunction lj(a, b) {\n  var c = a.stateNode;\n  null !== c && c.delete(b);\n  b = 0;\n  0 === b && (b = a.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));\n  c = Hg();\n  a = Kj(a, b);\n  null !== a && ($c(a, b, c), Mj(a, c));\n}\n\nvar ck;\n\nck = function ck(a, b, c) {\n  var d = b.lanes;\n  if (null !== a) {\n    if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;else {\n      ug = !1;\n\n      switch (b.tag) {\n        case 3:\n          ri(b);\n          sh();\n          break;\n\n        case 5:\n          gh(b);\n          break;\n\n        case 1:\n          Ff(b.type) && Jf(b);\n          break;\n\n        case 4:\n          eh(b, b.stateNode.containerInfo);\n          break;\n\n        case 10:\n          d = b.memoizedProps.value;\n          var e = b.type._context;\n          I(mg, e._currentValue);\n          e._currentValue = d;\n          break;\n\n        case 13:\n          if (null !== b.memoizedState) {\n            if (0 !== (c & b.child.childLanes)) return ti(a, b, c);\n            I(P, P.current & 1);\n            b = hi(a, b, c);\n            return null !== b ? b.sibling : null;\n          }\n\n          I(P, P.current & 1);\n          break;\n\n        case 19:\n          d = 0 !== (c & b.childLanes);\n\n          if (0 !== (a.flags & 64)) {\n            if (d) return Ai(a, b, c);\n            b.flags |= 64;\n          }\n\n          e = b.memoizedState;\n          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);\n          I(P, P.current);\n          if (d) break;else return null;\n\n        case 23:\n        case 24:\n          return b.lanes = 0, mi(a, b, c);\n      }\n\n      return hi(a, b, c);\n    }\n  } else ug = !1;\n  b.lanes = 0;\n\n  switch (b.tag) {\n    case 2:\n      d = b.type;\n      null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);\n      a = b.pendingProps;\n      e = Ef(b, M.current);\n      tg(b, c);\n      e = Ch(null, b, d, a, e, c);\n      b.flags |= 1;\n\n      if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {\n        b.tag = 1;\n        b.memoizedState = null;\n        b.updateQueue = null;\n\n        if (Ff(d)) {\n          var f = !0;\n          Jf(b);\n        } else f = !1;\n\n        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;\n        xg(b);\n        var g = d.getDerivedStateFromProps;\n        "function" === typeof g && Gg(b, d, g, a);\n        e.updater = Kg;\n        b.stateNode = e;\n        e._reactInternals = b;\n        Og(b, d, a, c);\n        b = qi(null, b, d, !0, f, c);\n      } else b.tag = 0, fi(null, b, e, c), b = b.child;\n\n      return b;\n\n    case 16:\n      e = b.elementType;\n\n      a: {\n        null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);\n        a = b.pendingProps;\n        f = e._init;\n        e = f(e._payload);\n        b.type = e;\n        f = b.tag = hk(e);\n        a = lg(e, a);\n\n        switch (f) {\n          case 0:\n            b = li(null, b, e, a, c);\n            break a;\n\n          case 1:\n            b = pi(null, b, e, a, c);\n            break a;\n\n          case 11:\n            b = gi(null, b, e, a, c);\n            break a;\n\n          case 14:\n            b = ii(null, b, e, lg(e.type, a), d, c);\n            break a;\n        }\n\n        throw Error(y(306, e, ""));\n      }\n\n      return b;\n\n    case 0:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);\n\n    case 1:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);\n\n    case 3:\n      ri(b);\n      d = b.updateQueue;\n      if (null === a || null === d) throw Error(y(282));\n      d = b.pendingProps;\n      e = b.memoizedState;\n      e = null !== e ? e.element : null;\n      yg(a, b);\n      Cg(b, d, null, c);\n      d = b.memoizedState.element;\n      if (d === e) sh(), b = hi(a, b, c);else {\n        e = b.stateNode;\n        if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;\n\n        if (f) {\n          a = e.mutableSourceEagerHydrationData;\n          if (null != a) for (e = 0; e < a.length; e += 2) {\n            f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);\n          }\n          c = Zg(b, null, d, c);\n\n          for (b.child = c; c;) {\n            c.flags = c.flags & -3 | 1024, c = c.sibling;\n          }\n        } else fi(a, b, d, c), sh();\n\n        b = b.child;\n      }\n      return b;\n\n    case 5:\n      return gh(b), null === a && ph(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;\n\n    case 6:\n      return null === a && ph(b), null;\n\n    case 13:\n      return ti(a, b, c);\n\n    case 4:\n      return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;\n\n    case 11:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);\n\n    case 7:\n      return fi(a, b, b.pendingProps, c), b.child;\n\n    case 8:\n      return fi(a, b, b.pendingProps.children, c), b.child;\n\n    case 12:\n      return fi(a, b, b.pendingProps.children, c), b.child;\n\n    case 10:\n      a: {\n        d = b.type._context;\n        e = b.pendingProps;\n        g = b.memoizedProps;\n        f = e.value;\n        var h = b.type._context;\n        I(mg, h._currentValue);\n        h._currentValue = f;\n        if (null !== g) if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {\n          if (g.children === e.children && !N.current) {\n            b = hi(a, b, c);\n            break a;\n          }\n        } else for (h = b.child, null !== h && (h.return = b); null !== h;) {\n          var k = h.dependencies;\n\n          if (null !== k) {\n            g = h.child;\n\n            for (var l = k.firstContext; null !== l;) {\n              if (l.context === d && 0 !== (l.observedBits & f)) {\n                1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));\n                h.lanes |= c;\n                l = h.alternate;\n                null !== l && (l.lanes |= c);\n                sg(h.return, c);\n                k.lanes |= c;\n                break;\n              }\n\n              l = l.next;\n            }\n          } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;\n\n          if (null !== g) g.return = h;else for (g = h; null !== g;) {\n            if (g === b) {\n              g = null;\n              break;\n            }\n\n            h = g.sibling;\n\n            if (null !== h) {\n              h.return = g.return;\n              g = h;\n              break;\n            }\n\n            g = g.return;\n          }\n          h = g;\n        }\n        fi(a, b, e.children, c);\n        b = b.child;\n      }\n\n      return b;\n\n    case 9:\n      return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;\n\n    case 14:\n      return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);\n\n    case 15:\n      return ki(a, b, b.type, b.pendingProps, d, c);\n\n    case 17:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);\n\n    case 19:\n      return Ai(a, b, c);\n\n    case 23:\n      return mi(a, b, c);\n\n    case 24:\n      return mi(a, b, c);\n  }\n\n  throw Error(y(156, b.tag));\n};\n\nfunction ik(a, b, c, d) {\n  this.tag = a;\n  this.key = c;\n  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = b;\n  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n  this.mode = d;\n  this.flags = 0;\n  this.lastEffect = this.firstEffect = this.nextEffect = null;\n  this.childLanes = this.lanes = 0;\n  this.alternate = null;\n}\n\nfunction nh(a, b, c, d) {\n  return new ik(a, b, c, d);\n}\n\nfunction ji(a) {\n  a = a.prototype;\n  return !(!a || !a.isReactComponent);\n}\n\nfunction hk(a) {\n  if ("function" === typeof a) return ji(a) ? 1 : 0;\n\n  if (void 0 !== a && null !== a) {\n    a = a.$$typeof;\n    if (a === Aa) return 11;\n    if (a === Da) return 14;\n  }\n\n  return 2;\n}\n\nfunction Tg(a, b) {\n  var c = a.alternate;\n  null === c ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);\n  c.childLanes = a.childLanes;\n  c.lanes = a.lanes;\n  c.child = a.child;\n  c.memoizedProps = a.memoizedProps;\n  c.memoizedState = a.memoizedState;\n  c.updateQueue = a.updateQueue;\n  b = a.dependencies;\n  c.dependencies = null === b ? null : {\n    lanes: b.lanes,\n    firstContext: b.firstContext\n  };\n  c.sibling = a.sibling;\n  c.index = a.index;\n  c.ref = a.ref;\n  return c;\n}\n\nfunction Vg(a, b, c, d, e, f) {\n  var g = 2;\n  d = a;\n  if ("function" === typeof a) ji(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {\n    case ua:\n      return Xg(c.children, e, f, b);\n\n    case Ha:\n      g = 8;\n      e |= 16;\n      break;\n\n    case wa:\n      g = 8;\n      e |= 1;\n      break;\n\n    case xa:\n      return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;\n\n    case Ba:\n      return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;\n\n    case Ca:\n      return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;\n\n    case Ia:\n      return vi(c, e, f, b);\n\n    case Ja:\n      return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;\n\n    default:\n      if ("object" === typeof a && null !== a) switch (a.$$typeof) {\n        case ya:\n          g = 10;\n          break a;\n\n        case za:\n          g = 9;\n          break a;\n\n        case Aa:\n          g = 11;\n          break a;\n\n        case Da:\n          g = 14;\n          break a;\n\n        case Ea:\n          g = 16;\n          d = null;\n          break a;\n\n        case Fa:\n          g = 22;\n          break a;\n      }\n      throw Error(y(130, null == a ? a : typeof a, ""));\n  }\n  b = nh(g, c, b, e);\n  b.elementType = a;\n  b.type = d;\n  b.lanes = f;\n  return b;\n}\n\nfunction Xg(a, b, c, d) {\n  a = nh(7, a, d, b);\n  a.lanes = c;\n  return a;\n}\n\nfunction vi(a, b, c, d) {\n  a = nh(23, a, d, b);\n  a.elementType = Ia;\n  a.lanes = c;\n  return a;\n}\n\nfunction Ug(a, b, c) {\n  a = nh(6, a, null, b);\n  a.lanes = c;\n  return a;\n}\n\nfunction Wg(a, b, c) {\n  b = nh(4, null !== a.children ? a.children : [], a.key, b);\n  b.lanes = c;\n  b.stateNode = {\n    containerInfo: a.containerInfo,\n    pendingChildren: null,\n    implementation: a.implementation\n  };\n  return b;\n}\n\nfunction jk(a, b, c) {\n  this.tag = b;\n  this.containerInfo = a;\n  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;\n  this.timeoutHandle = -1;\n  this.pendingContext = this.context = null;\n  this.hydrate = c;\n  this.callbackNode = null;\n  this.callbackPriority = 0;\n  this.eventTimes = Zc(0);\n  this.expirationTimes = Zc(-1);\n  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;\n  this.entanglements = Zc(0);\n  this.mutableSourceEagerHydrationData = null;\n}\n\nfunction kk(a, b, c) {\n  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: ta,\n    key: null == d ? null : "" + d,\n    children: a,\n    containerInfo: b,\n    implementation: c\n  };\n}\n\nfunction lk(a, b, c, d) {\n  var e = b.current,\n      f = Hg(),\n      g = Ig(e);\n\n  a: if (c) {\n    c = c._reactInternals;\n\n    b: {\n      if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));\n      var h = c;\n\n      do {\n        switch (h.tag) {\n          case 3:\n            h = h.stateNode.context;\n            break b;\n\n          case 1:\n            if (Ff(h.type)) {\n              h = h.stateNode.__reactInternalMemoizedMergedChildContext;\n              break b;\n            }\n\n        }\n\n        h = h.return;\n      } while (null !== h);\n\n      throw Error(y(171));\n    }\n\n    if (1 === c.tag) {\n      var k = c.type;\n\n      if (Ff(k)) {\n        c = If(c, k, h);\n        break a;\n      }\n    }\n\n    c = h;\n  } else c = Cf;\n\n  null === b.context ? b.context = c : b.pendingContext = c;\n  b = zg(f, g);\n  b.payload = {\n    element: a\n  };\n  d = void 0 === d ? null : d;\n  null !== d && (b.callback = d);\n  Ag(e, b);\n  Jg(e, g, f);\n  return g;\n}\n\nfunction mk(a) {\n  a = a.current;\n  if (!a.child) return null;\n\n  switch (a.child.tag) {\n    case 5:\n      return a.child.stateNode;\n\n    default:\n      return a.child.stateNode;\n  }\n}\n\nfunction nk(a, b) {\n  a = a.memoizedState;\n\n  if (null !== a && null !== a.dehydrated) {\n    var c = a.retryLane;\n    a.retryLane = 0 !== c && c < b ? c : b;\n  }\n}\n\nfunction ok(a, b) {\n  nk(a, b);\n  (a = a.alternate) && nk(a, b);\n}\n\nfunction pk() {\n  return null;\n}\n\nfunction qk(a, b, c) {\n  var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;\n  c = new jk(a, b, null != c && !0 === c.hydrate);\n  b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);\n  c.current = b;\n  b.stateNode = c;\n  xg(b);\n  a[ff] = c.current;\n  cf(8 === a.nodeType ? a.parentNode : a);\n  if (d) for (a = 0; a < d.length; a++) {\n    b = d[a];\n    var e = b._getVersion;\n    e = e(b._source);\n    null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);\n  }\n  this._internalRoot = c;\n}\n\nqk.prototype.render = function (a) {\n  lk(a, this._internalRoot, null, null);\n};\n\nqk.prototype.unmount = function () {\n  var a = this._internalRoot,\n      b = a.containerInfo;\n  lk(null, a, null, function () {\n    b[ff] = null;\n  });\n};\n\nfunction rk(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));\n}\n\nfunction sk(a, b) {\n  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));\n  if (!b) for (var c; c = a.lastChild;) {\n    a.removeChild(c);\n  }\n  return new qk(a, 0, b ? {\n    hydrate: !0\n  } : void 0);\n}\n\nfunction tk(a, b, c, d, e) {\n  var f = c._reactRootContainer;\n\n  if (f) {\n    var g = f._internalRoot;\n\n    if ("function" === typeof e) {\n      var h = e;\n\n      e = function e() {\n        var a = mk(g);\n        h.call(a);\n      };\n    }\n\n    lk(b, g, a, e);\n  } else {\n    f = c._reactRootContainer = sk(c, d);\n    g = f._internalRoot;\n\n    if ("function" === typeof e) {\n      var k = e;\n\n      e = function e() {\n        var a = mk(g);\n        k.call(a);\n      };\n    }\n\n    Xj(function () {\n      lk(b, g, a, e);\n    });\n  }\n\n  return mk(g);\n}\n\nec = function ec(a) {\n  if (13 === a.tag) {\n    var b = Hg();\n    Jg(a, 4, b);\n    ok(a, 4);\n  }\n};\n\nfc = function fc(a) {\n  if (13 === a.tag) {\n    var b = Hg();\n    Jg(a, 67108864, b);\n    ok(a, 67108864);\n  }\n};\n\ngc = function gc(a) {\n  if (13 === a.tag) {\n    var b = Hg(),\n        c = Ig(a);\n    Jg(a, c, b);\n    ok(a, c);\n  }\n};\n\nhc = function hc(a, b) {\n  return b();\n};\n\nyb = function yb(a, b, c) {\n  switch (b) {\n    case "input":\n      ab(a, c);\n      b = c.name;\n\n      if ("radio" === c.type && null != b) {\n        for (c = a; c.parentNode;) {\n          c = c.parentNode;\n        }\n\n        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + \'][type="radio"]\');\n\n        for (b = 0; b < c.length; b++) {\n          var d = c[b];\n\n          if (d !== a && d.form === a.form) {\n            var e = Db(d);\n            if (!e) throw Error(y(90));\n            Wa(d);\n            ab(d, e);\n          }\n        }\n      }\n\n      break;\n\n    case "textarea":\n      ib(a, c);\n      break;\n\n    case "select":\n      b = c.value, null != b && fb(a, !!c.multiple, b, !1);\n  }\n};\n\nGb = Wj;\n\nHb = function Hb(a, b, c, d, e) {\n  var f = X;\n  X |= 4;\n\n  try {\n    return gg(98, a.bind(null, b, c, d, e));\n  } finally {\n    X = f, 0 === X && (wj(), ig());\n  }\n};\n\nIb = function Ib() {\n  0 === (X & 49) && (Vj(), Oj());\n};\n\nJb = function Jb(a, b) {\n  var c = X;\n  X |= 2;\n\n  try {\n    return a(b);\n  } finally {\n    X = c, 0 === X && (wj(), ig());\n  }\n};\n\nfunction uk(a, b) {\n  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  if (!rk(b)) throw Error(y(200));\n  return kk(a, b, null, c);\n}\n\nvar vk = {\n  Events: [Cb, ue, Db, Eb, Fb, Oj, {\n    current: !1\n  }]\n},\n    wk = {\n  findFiberByHostInstance: wc,\n  bundleType: 0,\n  version: "17.0.1",\n  rendererPackageName: "react-dom"\n};\nvar xk = {\n  bundleType: wk.bundleType,\n  version: wk.version,\n  rendererPackageName: wk.rendererPackageName,\n  rendererConfig: wk.rendererConfig,\n  overrideHookState: null,\n  overrideHookStateDeletePath: null,\n  overrideHookStateRenamePath: null,\n  overrideProps: null,\n  overridePropsDeletePath: null,\n  overridePropsRenamePath: null,\n  setSuspenseHandler: null,\n  scheduleUpdate: null,\n  currentDispatcherRef: ra.ReactCurrentDispatcher,\n  findHostInstanceByFiber: function findHostInstanceByFiber(a) {\n    a = cc(a);\n    return null === a ? null : a.stateNode;\n  },\n  findFiberByHostInstance: wk.findFiberByHostInstance || pk,\n  findHostInstancesForRefresh: null,\n  scheduleRefresh: null,\n  scheduleRoot: null,\n  setRefreshHandler: null,\n  getCurrentFiber: null\n};\n\nif ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {\n  var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (!yk.isDisabled && yk.supportsFiber) try {\n    Lf = yk.inject(xk), Mf = yk;\n  } catch (a) {}\n}\n\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;\nexports.createPortal = uk;\n\nexports.findDOMNode = function (a) {\n  if (null == a) return null;\n  if (1 === a.nodeType) return a;\n  var b = a._reactInternals;\n\n  if (void 0 === b) {\n    if ("function" === typeof a.render) throw Error(y(188));\n    throw Error(y(268, Object.keys(a)));\n  }\n\n  a = cc(b);\n  a = null === a ? null : a.stateNode;\n  return a;\n};\n\nexports.flushSync = function (a, b) {\n  var c = X;\n  if (0 !== (c & 48)) return a(b);\n  X |= 1;\n\n  try {\n    if (a) return gg(99, a.bind(null, b));\n  } finally {\n    X = c, ig();\n  }\n};\n\nexports.hydrate = function (a, b, c) {\n  if (!rk(b)) throw Error(y(200));\n  return tk(null, a, b, !0, c);\n};\n\nexports.render = function (a, b, c) {\n  if (!rk(b)) throw Error(y(200));\n  return tk(null, a, b, !1, c);\n};\n\nexports.unmountComponentAtNode = function (a) {\n  if (!rk(a)) throw Error(y(40));\n  return a._reactRootContainer ? (Xj(function () {\n    tk(null, null, a, !1, function () {\n      a._reactRootContainer = null;\n      a[ff] = null;\n    });\n  }), !0) : !1;\n};\n\nexports.unstable_batchedUpdates = Wj;\n\nexports.unstable_createPortal = function (a, b) {\n  return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);\n};\n\nexports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {\n  if (!rk(c)) throw Error(y(200));\n  if (null == a || void 0 === a._reactInternals) throw Error(y(38));\n  return tk(a, b, c, !1, d);\n};\n\nexports.version = "17.0.1";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyJdLCJuYW1lcyI6WyJhYSIsInJlcXVpcmUiLCJtIiwiciIsInkiLCJhIiwiYiIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJFcnJvciIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiYWRkIiwiZmEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJoYSIsImlhIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJqYSIsImthIiwibGEiLCJjYWxsIiwidGVzdCIsIm1hIiwiZCIsInR5cGUiLCJhY2NlcHRzQm9vbGVhbnMiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwibmEiLCJpc05hTiIsIkIiLCJlIiwiZiIsImciLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsIkQiLCJzcGxpdCIsImZvckVhY2giLCJvYSIsInBhIiwidG9VcHBlckNhc2UiLCJyZXBsYWNlIiwieGxpbmtIcmVmIiwicWEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiU3ltYm9sIiwiZm9yIiwiRSIsIkthIiwiaXRlcmF0b3IiLCJMYSIsIk1hIiwiTmEiLCJzdGFjayIsInRyaW0iLCJtYXRjaCIsIk9hIiwiUGEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsImRlZmluZVByb3BlcnR5Iiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImsiLCJoIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiUWEiLCJ0YWciLCJyZW5kZXIiLCJfcmVuZGVyIiwiUmEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlVhIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIl92YWx1ZVRyYWNrZXIiLCJWYSIsIldhIiwiY2hlY2tlZCIsInZhbHVlIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIm93bmVyRG9jdW1lbnQiLCJkYiIsIkNoaWxkcmVuIiwiZWIiLCJjaGlsZHJlbiIsImZiIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJBcnJheSIsImlzQXJyYXkiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJsYiIsIm1iIiwibmIiLCJvYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwidG9TdHJpbmciLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJrZXlzIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwic2IiLCJ0YiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5IiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwiaXMiLCJ4YiIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsInB1c2giLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlJiIiwibCIsImFwcGx5IiwibiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJiYyIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJNYXAiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsInRjIiwidWMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJzaGlmdCIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsIk1hdGgiLCJjbHozMiIsImFkIiwiYmQiLCJsb2ciLCJjZCIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwiYmluZCIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJ3ZCIsInhkIiwieWQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkNkIiwiZGF0YVRyYW5zZmVyIiwiRGQiLCJFZCIsIkZkIiwiR2QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSGQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIktkIiwiZGF0YSIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwia2V5IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlNkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVGQiLCJVZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJWZCIsIldkIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJjaGFyIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJNZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiY29uY2F0IiwiWmUiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIngiLCJ3IiwieiIsInUiLCJ0IiwicSIsInYiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJ1bnNoaWZ0IiwiamYiLCJrZiIsImxmIiwibWYiLCJhdXRvRm9jdXMiLCJuZiIsIl9faHRtbCIsIm9mIiwic2V0VGltZW91dCIsInBmIiwiY2xlYXJUaW1lb3V0IiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiSCIsIkkiLCJDZiIsIk0iLCJOIiwiRGYiLCJFZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsIk8iLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibGciLCJkZWZhdWx0UHJvcHMiLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJfY3VycmVudFZhbHVlIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJjb250ZXh0Iiwib2JzZXJ2ZWRCaXRzIiwibmV4dCIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJBZyIsIkJnIiwiQ2ciLCJBIiwicCIsIkMiLCJEZyIsIkVnIiwiRmciLCJDb21wb25lbnQiLCJyZWZzIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTWciLCJjb250ZXh0VHlwZSIsInN0YXRlIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJwcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiUGciLCJRZyIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJSZyIsImpvaW4iLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJpbmRleCIsIlRnIiwiVWciLCJtb2RlIiwiZWxlbWVudFR5cGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsImRvbmUiLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImZoIiwiZ2giLCJoaCIsIlAiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwid2giLCJ4aCIsIlIiLCJTIiwiVCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJJaCIsIkpoIiwiS2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsInVzZVN0YXRlIiwiZ2V0U25hcHNob3QiLCJzdWJzY3JpYmUiLCJ1c2VFZmZlY3QiLCJzZXRTbmFwc2hvdCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJlaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImNvbXBhcmUiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwib25DbGljayIsIm9uY2xpY2siLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwibWVzc2FnZSIsIk5pIiwiY29uc29sZSIsImVycm9yIiwiT2kiLCJXZWFrTWFwIiwiUGkiLCJlbGVtZW50IiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiZGlzcGxheSIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsInRoZW4iLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiVmoiLCJXaiIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImNrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwibWluIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJoayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJpayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJwayIsInFrIiwiaHlkcmF0aW9uT3B0aW9ucyIsIm11dGFibGVTb3VyY2VzIiwiX2ludGVybmFsUm9vdCIsInVubW91bnQiLCJyayIsInNrIiwiaGFzQXR0cmlidXRlIiwidGsiLCJxdWVyeVNlbGVjdG9yQWxsIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm0iLCJ1ayIsInZrIiwiRXZlbnRzIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiZXhwb3J0cyIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBQUEsSUFBSUEsRUFBRSxHQUFDQyxtQkFBTyxDQUFDLENBQUQsQ0FBZDtBQUFBLElBQXdCQyxDQUFDLEdBQUNELG1CQUFPLENBQUMsQ0FBRCxDQUFqQztBQUFBLElBQW1ERSxDQUFDLEdBQUNGLG1CQUFPLENBQUMsRUFBRCxDQUE1RDs7QUFBMEUsU0FBU0csQ0FBVCxDQUFXQyxDQUFYLEVBQWE7QUFBQyxPQUFJLElBQUlDLENBQUMsR0FBQywyREFBeURELENBQS9ELEVBQWlFRSxDQUFDLEdBQUMsQ0FBdkUsRUFBeUVBLENBQUMsR0FBQ0MsU0FBUyxDQUFDQyxNQUFyRixFQUE0RkYsQ0FBQyxFQUE3RjtBQUFnR0QsS0FBQyxJQUFFLGFBQVdJLGtCQUFrQixDQUFDRixTQUFTLENBQUNELENBQUQsQ0FBVixDQUFoQztBQUFoRzs7QUFBK0ksU0FBTSwyQkFBeUJGLENBQXpCLEdBQTJCLFVBQTNCLEdBQXNDQyxDQUF0QyxHQUF3QyxnSEFBOUM7QUFBK0o7O0FBQUEsSUFBRyxDQUFDTixFQUFKLEVBQU8sTUFBTVcsS0FBSyxDQUFDUCxDQUFDLENBQUMsR0FBRCxDQUFGLENBQVg7QUFBb0IsSUFBSVEsRUFBRSxHQUFDLElBQUlDLEdBQUosRUFBUDtBQUFBLElBQWVDLEVB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MTcuMC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(14);\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFKLEVBQTJDO0FBQ3pDQyxRQUFNLENBQUNDLE9BQVAsR0FBaUJDLG1CQUFPLENBQUMsRUFBRCxDQUF4QjtBQUNELENBRkQsTUFFTyIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v0.20.1\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar _f, g, h, k;\n\nif ("object" === typeof performance && "function" === typeof performance.now) {\n  var l = performance;\n\n  exports.unstable_now = function () {\n    return l.now();\n  };\n} else {\n  var p = Date,\n      q = p.now();\n\n  exports.unstable_now = function () {\n    return p.now() - q;\n  };\n}\n\nif ("undefined" === typeof window || "function" !== typeof MessageChannel) {\n  var t = null,\n      u = null,\n      w = function w() {\n    if (null !== t) try {\n      var a = exports.unstable_now();\n      t(!0, a);\n      t = null;\n    } catch (b) {\n      throw setTimeout(w, 0), b;\n    }\n  };\n\n  _f = function f(a) {\n    null !== t ? setTimeout(_f, 0, a) : (t = a, setTimeout(w, 0));\n  };\n\n  g = function g(a, b) {\n    u = setTimeout(a, b);\n  };\n\n  h = function h() {\n    clearTimeout(u);\n  };\n\n  exports.unstable_shouldYield = function () {\n    return !1;\n  };\n\n  k = exports.unstable_forceFrameRate = function () {};\n} else {\n  var x = window.setTimeout,\n      y = window.clearTimeout;\n\n  if ("undefined" !== typeof console) {\n    var z = window.cancelAnimationFrame;\n    "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");\n    "function" !== typeof z && console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");\n  }\n\n  var A = !1,\n      B = null,\n      C = -1,\n      D = 5,\n      E = 0;\n\n  exports.unstable_shouldYield = function () {\n    return exports.unstable_now() >= E;\n  };\n\n  k = function k() {};\n\n  exports.unstable_forceFrameRate = function (a) {\n    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1E3 / a) : 5;\n  };\n\n  var F = new MessageChannel(),\n      G = F.port2;\n\n  F.port1.onmessage = function () {\n    if (null !== B) {\n      var a = exports.unstable_now();\n      E = a + D;\n\n      try {\n        B(!0, a) ? G.postMessage(null) : (A = !1, B = null);\n      } catch (b) {\n        throw G.postMessage(null), b;\n      }\n    } else A = !1;\n  };\n\n  _f = function _f(a) {\n    B = a;\n    A || (A = !0, G.postMessage(null));\n  };\n\n  g = function g(a, b) {\n    C = x(function () {\n      a(exports.unstable_now());\n    }, b);\n  };\n\n  h = function h() {\n    y(C);\n    C = -1;\n  };\n}\n\nfunction H(a, b) {\n  var c = a.length;\n  a.push(b);\n\n  a: for (;;) {\n    var d = c - 1 >>> 1,\n        e = a[d];\n    if (void 0 !== e && 0 < I(e, b)) a[d] = b, a[c] = e, c = d;else break a;\n  }\n}\n\nfunction J(a) {\n  a = a[0];\n  return void 0 === a ? null : a;\n}\n\nfunction K(a) {\n  var b = a[0];\n\n  if (void 0 !== b) {\n    var c = a.pop();\n\n    if (c !== b) {\n      a[0] = c;\n\n      a: for (var d = 0, e = a.length; d < e;) {\n        var m = 2 * (d + 1) - 1,\n            n = a[m],\n            v = m + 1,\n            r = a[v];\n        if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > I(r, c)) a[d] = r, a[v] = c, d = v;else break a;\n      }\n    }\n\n    return b;\n  }\n\n  return null;\n}\n\nfunction I(a, b) {\n  var c = a.sortIndex - b.sortIndex;\n  return 0 !== c ? c : a.id - b.id;\n}\n\nvar L = [],\n    M = [],\n    N = 1,\n    O = null,\n    P = 3,\n    Q = !1,\n    R = !1,\n    S = !1;\n\nfunction T(a) {\n  for (var b = J(M); null !== b;) {\n    if (null === b.callback) K(M);else if (b.startTime <= a) K(M), b.sortIndex = b.expirationTime, H(L, b);else break;\n    b = J(M);\n  }\n}\n\nfunction U(a) {\n  S = !1;\n  T(a);\n  if (!R) if (null !== J(L)) R = !0, _f(V);else {\n    var b = J(M);\n    null !== b && g(U, b.startTime - a);\n  }\n}\n\nfunction V(a, b) {\n  R = !1;\n  S && (S = !1, h());\n  Q = !0;\n  var c = P;\n\n  try {\n    T(b);\n\n    for (O = J(L); null !== O && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield());) {\n      var d = O.callback;\n\n      if ("function" === typeof d) {\n        O.callback = null;\n        P = O.priorityLevel;\n        var e = d(O.expirationTime <= b);\n        b = exports.unstable_now();\n        "function" === typeof e ? O.callback = e : O === J(L) && K(L);\n        T(b);\n      } else K(L);\n\n      O = J(L);\n    }\n\n    if (null !== O) var m = !0;else {\n      var n = J(M);\n      null !== n && g(U, n.startTime - b);\n      m = !1;\n    }\n    return m;\n  } finally {\n    O = null, P = c, Q = !1;\n  }\n}\n\nvar W = k;\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\n\nexports.unstable_cancelCallback = function (a) {\n  a.callback = null;\n};\n\nexports.unstable_continueExecution = function () {\n  R || Q || (R = !0, _f(V));\n};\n\nexports.unstable_getCurrentPriorityLevel = function () {\n  return P;\n};\n\nexports.unstable_getFirstCallbackNode = function () {\n  return J(L);\n};\n\nexports.unstable_next = function (a) {\n  switch (P) {\n    case 1:\n    case 2:\n    case 3:\n      var b = 3;\n      break;\n\n    default:\n      b = P;\n  }\n\n  var c = P;\n  P = b;\n\n  try {\n    return a();\n  } finally {\n    P = c;\n  }\n};\n\nexports.unstable_pauseExecution = function () {};\n\nexports.unstable_requestPaint = W;\n\nexports.unstable_runWithPriority = function (a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n\n    default:\n      a = 3;\n  }\n\n  var c = P;\n  P = a;\n\n  try {\n    return b();\n  } finally {\n    P = c;\n  }\n};\n\nexports.unstable_scheduleCallback = function (a, b, c) {\n  var d = exports.unstable_now();\n  "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;\n\n  switch (a) {\n    case 1:\n      var e = -1;\n      break;\n\n    case 2:\n      e = 250;\n      break;\n\n    case 5:\n      e = 1073741823;\n      break;\n\n    case 4:\n      e = 1E4;\n      break;\n\n    default:\n      e = 5E3;\n  }\n\n  e = c + e;\n  a = {\n    id: N++,\n    callback: b,\n    priorityLevel: a,\n    startTime: c,\n    expirationTime: e,\n    sortIndex: -1\n  };\n  c > d ? (a.sortIndex = c, H(M, a), null === J(L) && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, _f(V)));\n  return a;\n};\n\nexports.unstable_wrapCallback = function (a) {\n  var b = P;\n  return function () {\n    var c = P;\n    P = b;\n\n    try {\n      return a.apply(this, arguments);\n    } finally {\n      P = c;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},,,,function(module,exports,__webpack_require__){"use strict";eval('/** @license React v17.0.1\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n__webpack_require__(8);\n\nvar f = __webpack_require__(0),\n    g = 60103;\n\nexports.Fragment = 60107;\n\nif ("function" === typeof Symbol && Symbol.for) {\n  var h = Symbol.for;\n  g = h("react.element");\n  exports.Fragment = h("react.fragment");\n}\n\nvar m = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,\n    n = Object.prototype.hasOwnProperty,\n    p = {\n  key: !0,\n  ref: !0,\n  __self: !0,\n  __source: !0\n};\n\nfunction q(c, a, k) {\n  var b,\n      d = {},\n      e = null,\n      l = null;\n  void 0 !== k && (e = "" + k);\n  void 0 !== a.key && (e = "" + a.key);\n  void 0 !== a.ref && (l = a.ref);\n\n  for (b in a) {\n    n.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);\n  }\n\n  if (c && c.defaultProps) for (b in a = c.defaultProps, a) {\n    void 0 === d[b] && (d[b] = a[b]);\n  }\n  return {\n    $$typeof: g,\n    type: c,\n    key: e,\n    ref: l,\n    props: d,\n    _owner: m.current\n  };\n}\n\nexports.jsx = q;\nexports.jsxs = q;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImYiLCJnIiwiZXhwb3J0cyIsIkZyYWdtZW50IiwiU3ltYm9sIiwiZm9yIiwiaCIsIm0iLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsImtleSIsInJlZiIsIl9fc2VsZiIsIl9fc291cmNlIiwicSIsImMiLCJhIiwiayIsImIiLCJkIiwiZSIsImwiLCJjYWxsIiwiZGVmYXVsdFByb3BzIiwiJCR0eXBlb2YiLCJ0eXBlIiwicHJvcHMiLCJfb3duZXIiLCJjdXJyZW50IiwianN4IiwianN4cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUFBQSxtQkFBTyxDQUFDLENBQUQsQ0FBUDs7QUFBeUIsSUFBSUMsQ0FBQyxHQUFDRCxtQkFBTyxDQUFDLENBQUQsQ0FBYjtBQUFBLElBQXVCRSxDQUFDLEdBQUMsS0FBekI7O0FBQStCQyxPQUFPLENBQUNDLFFBQVIsR0FBaUIsS0FBakI7O0FBQXVCLElBQUcsZUFBYSxPQUFPQyxNQUFwQixJQUE0QkEsTUFBTSxDQUFDQyxHQUF0QyxFQUEwQztBQUFDLE1BQUlDLENBQUMsR0FBQ0YsTUFBTSxDQUFDQyxHQUFiO0FBQWlCSixHQUFDLEdBQUNLLENBQUMsQ0FBQyxlQUFELENBQUg7QUFBcUJKLFNBQU8sQ0FBQ0MsUUFBUixHQUFpQkcsQ0FBQyxDQUFDLGdCQUFELENBQWxCO0FBQXFDOztBQUFBLElBQUlDLENBQUMsR0FBQ1AsQ0FBQyxDQUFDUSxrREFBRixDQUFxREMsaUJBQTNEO0FBQUEsSUFBNkVDLENBQUMsR0FBQ0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFoRztBQUFBLElBQStHQyxDQUFDLEdBQUM7QUFBQ0MsS0FBRyxFQUFDLENBQUMsQ0FBTjtBQUFRQyxLQUFHLEVBQUMsQ0FBQyxDQUFiO0FBQWVDLFFBQU0sRUFBQyxDQUFDLENBQXZCO0FBQXlCQyxVQUFRLEVBQUMsQ0FBQztBQUFuQyxDQUFqSDs7QUFDbE4sU0FBU0MsQ0FBVCxDQUFXQyxDQUFYLEVBQWFDLENBQWIsRUFBZUMsQ0FBZixFQUFpQjtBQUFDLE1BQUlDLENBQUo7QUFBQSxNQUFNQyxDQUFDLEdBQUMsRUFBUjtBQUFBLE1BQVdDLENBQUMsR0FBQyxJQUFiO0FBQUEsTUFBa0JDLENBQUMsR0FBQyxJQUFwQjtBQUF5QixPQUFLLENBQUwsS0FBU0osQ0FBVCxLQUFhRyxDQUFDLEdBQUMsS0FBR0gsQ0FBbEI7QUFBcUIsT0FBSyxDQUFMLEtBQVNELENBQUMsQ0FBQ04sR0FBWCxLQUFpQlUsQ0FBQyxHQUFDLEtBQUdKLENBQUMsQ0FBQ04sR0FBeEI7QUFBNkIsT0FBSyxDQUFMLEtBQVNNLENBQUMsQ0FBQ0wsR0FBWCxLQUFpQlUsQ0FBQyxHQUFDTCxDQUFDLENBQUNMLEdBQXJCOztBQUEwQixPQUFJTyxDQUFKLElBQVNGLENBQVQ7QUFBV1gsS0FBQyxDQUFDaUIsSUFBRixDQUFPTixDQUFQLEVBQVNFLENBQVQsS0FBYSxDQUFDVCxDQUFDLENBQUNELGNBQUYsQ0FBaUJVLENBQWpCLENBQWQsS0FBb0NDLENBQUMsQ0FBQ0QsQ0FBRCxDQUFELEdBQUtGLENBQUMsQ0FBQ0UsQ0FBRCxDQUExQztBQUFYOztBQUEwRCxNQUFHSCxDQUFDLElBQUVBLENBQUMsQ0FBQ1EsWUFBUixFQUFxQixLQUFJTCxDQUFKLElBQVNGLENBQUMsR0FBQ0QsQ0FBQyxDQUFDUSxZQUFKLEVBQWlCUCxDQUExQjtBQUE0QixTQUFLLENBQUwsS0FBU0csQ0FBQyxDQUFDRCxDQUFELENBQVYsS0FBZ0JDLENBQUMsQ0FBQ0QsQ0FBRCxDQUFELEdBQUtGLENBQUMsQ0FBQ0UsQ0FBRCxDQUF0QjtBQUE1QjtBQUF1RCxTQUFNO0FBQUNNLFlBQVEsRUFBQzVCLENBQVY7QUFBWTZCLFFBQUksRUFBQ1YsQ0FBakI7QUFBbUJMLE9BQUcsRUFBQ1UsQ0FBdkI7QUFBeUJULE9BQUcsRUFBQ1UsQ0FBN0I7QUFBK0JLLFNBQUssRUFBQ1AsQ0FBckM7QUFBdUNRLFVBQU0sRUFBQ3pCLENBQUMsQ0FBQzBCO0FBQWhELEdBQU47QUFBK0Q7O0FBQUEvQixPQUFPLENBQUNnQyxHQUFSLEdBQVlmLENBQVo7QUFBY2pCLE9BQU8sQ0FBQ2lDLElBQVIsR0FBYWhCLENBQWIiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3JlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxnPTYwMTAzO2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIGg9U3ltYm9sLmZvcjtnPWgoXCJyZWFjdC5lbGVtZW50XCIpO2V4cG9ydHMuRnJhZ21lbnQ9aChcInJlYWN0LmZyYWdtZW50XCIpfXZhciBtPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGspe3ZhciBiLGQ9e30sZT1udWxsLGw9bnVsbDt2b2lkIDAhPT1rJiYoZT1cIlwiK2spO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGw9YS5yZWYpO2ZvcihiIGluIGEpbi5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmcsdHlwZTpjLGtleTplLHJlZjpsLHByb3BzOmQsX293bmVyOm0uY3VycmVudH19ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n')},function(module,exports){eval('var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function("return this")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === "object") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzIl0sIm5hbWVzIjpbImciLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxDQUFKLEMsQ0FFQTs7QUFDQUEsQ0FBQyxHQUFJLFlBQVc7QUFDZixTQUFPLElBQVA7QUFDQSxDQUZHLEVBQUo7O0FBSUEsSUFBSTtBQUNIO0FBQ0FBLEdBQUMsR0FBR0EsQ0FBQyxJQUFJLElBQUlDLFFBQUosQ0FBYSxhQUFiLEdBQVQ7QUFDQSxDQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1g7QUFDQSxNQUFJLE9BQU9DLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0NILENBQUMsR0FBR0csTUFBSjtBQUNoQyxDLENBRUQ7QUFDQTtBQUNBOzs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTCxDQUFqQiIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n')}]]);